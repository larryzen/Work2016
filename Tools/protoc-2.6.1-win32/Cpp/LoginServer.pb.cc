// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

void protobuf_ShutdownFile_LoginServer_2eproto() {
  delete ServerT::default_instance_;
  delete CMsRequsetLogin::default_instance_;
  delete CMsResponseLogin::default_instance_;
  delete CMsRegisterServer::default_instance_;
  delete CMsRegisterServerRet::default_instance_;
  delete CLMSTokeValidate::default_instance_;
  delete SMSTokeValidate::default_instance_;
  delete CMsgLogout::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LoginServer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LoginServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServerT::default_instance_ = new ServerT();
  CMsRequsetLogin::default_instance_ = new CMsRequsetLogin();
  CMsResponseLogin::default_instance_ = new CMsResponseLogin();
  CMsRegisterServer::default_instance_ = new CMsRegisterServer();
  CMsRegisterServerRet::default_instance_ = new CMsRegisterServerRet();
  CLMSTokeValidate::default_instance_ = new CLMSTokeValidate();
  SMSTokeValidate::default_instance_ = new SMSTokeValidate();
  CMsgLogout::default_instance_ = new CMsgLogout();
  ServerT::default_instance_->InitAsDefaultInstance();
  CMsRequsetLogin::default_instance_->InitAsDefaultInstance();
  CMsResponseLogin::default_instance_->InitAsDefaultInstance();
  CMsRegisterServer::default_instance_->InitAsDefaultInstance();
  CMsRegisterServerRet::default_instance_->InitAsDefaultInstance();
  CLMSTokeValidate::default_instance_->InitAsDefaultInstance();
  SMSTokeValidate::default_instance_->InitAsDefaultInstance();
  CMsgLogout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginServer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LoginServer_2eproto_once_);
void protobuf_AddDesc_LoginServer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LoginServer_2eproto_once_,
                 &protobuf_AddDesc_LoginServer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginServer_2eproto {
  StaticDescriptorInitializer_LoginServer_2eproto() {
    protobuf_AddDesc_LoginServer_2eproto();
  }
} static_descriptor_initializer_LoginServer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ServerT::kIdFieldNumber;
const int ServerT::kNameFieldNumber;
const int ServerT::kIpFieldNumber;
const int ServerT::kPortFieldNumber;
const int ServerT::kNumberFieldNumber;
const int ServerT::kRecommendFieldNumber;
#endif  // !_MSC_VER

ServerT::ServerT()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.ServerT)
}

void ServerT::InitAsDefaultInstance() {
}

ServerT::ServerT(const ServerT& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.ServerT)
}

void ServerT::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  number_ = 0;
  recommend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerT::~ServerT() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.ServerT)
  SharedDtor();
}

void ServerT::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerT& ServerT::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

ServerT* ServerT::default_instance_ = NULL;

ServerT* ServerT::New() const {
  return new ServerT;
}

void ServerT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, port_);
    ZR_(number_, recommend_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.ServerT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // required int32 number = 5;
      case 5: {
        if (tag == 40) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_recommend;
        break;
      }

      // required int32 recommend = 6;
      case 6: {
        if (tag == 48) {
         parse_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_)));
          set_has_recommend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.ServerT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.ServerT)
  return false;
#undef DO_
}

void ServerT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.ServerT)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required int32 number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number(), output);
  }

  // required int32 recommend = 6;
  if (has_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recommend(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.ServerT)
}

int ServerT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 recommend = 6;
    if (has_recommend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerT::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerT*>(&from));
}

void ServerT::MergeFrom(const ServerT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_recommend()) {
      set_recommend(from.recommend());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerT::CopyFrom(const ServerT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerT::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerT::Swap(ServerT* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(number_, other->number_);
    std::swap(recommend_, other->recommend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerT::GetTypeName() const {
  return "com.game.Protobuf.ServerT";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsRequsetLogin::kLoginTypeFieldNumber;
const int CMsRequsetLogin::kAccountFieldNumber;
const int CMsRequsetLogin::kPwdFieldNumber;
const int CMsRequsetLogin::kChannelIDFieldNumber;
const int CMsRequsetLogin::kDevicesIDFieldNumber;
const int CMsRequsetLogin::kSexFieldNumber;
const int CMsRequsetLogin::kPlatformFieldNumber;
const int CMsRequsetLogin::kVerisonFieldNumber;
const int CMsRequsetLogin::kNickNameFieldNumber;
#endif  // !_MSC_VER

CMsRequsetLogin::CMsRequsetLogin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMsRequsetLogin)
}

void CMsRequsetLogin::InitAsDefaultInstance() {
}

CMsRequsetLogin::CMsRequsetLogin(const CMsRequsetLogin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMsRequsetLogin)
}

void CMsRequsetLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logintype_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verison_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsRequsetLogin::~CMsRequsetLogin() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMsRequsetLogin)
  SharedDtor();
}

void CMsRequsetLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (devicesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicesid_;
  }
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sex_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (verison_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verison_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsRequsetLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsRequsetLogin& CMsRequsetLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CMsRequsetLogin* CMsRequsetLogin::default_instance_ = NULL;

CMsRequsetLogin* CMsRequsetLogin::New() const {
  return new CMsRequsetLogin;
}

void CMsRequsetLogin::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    logintype_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_devicesid()) {
      if (devicesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicesid_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sex_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_verison()) {
      if (verison_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verison_->clear();
      }
    }
  }
  if (has_nickname()) {
    if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nickname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsRequsetLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMsRequsetLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 loginType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channelID;
        break;
      }

      // required string channelID = 4;
      case 4: {
        if (tag == 34) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devicesID;
        break;
      }

      // optional string devicesID = 5;
      case 5: {
        if (tag == 42) {
         parse_devicesID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicesid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sex;
        break;
      }

      // optional string sex = 6;
      case 6: {
        if (tag == 50) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_platform;
        break;
      }

      // optional string platform = 7;
      case 7: {
        if (tag == 58) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_verison;
        break;
      }

      // required string verison = 8;
      case 8: {
        if (tag == 66) {
         parse_verison:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verison()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_nickName;
        break;
      }

      // optional string nickName = 9;
      case 9: {
        if (tag == 74) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMsRequsetLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMsRequsetLogin)
  return false;
#undef DO_
}

void CMsRequsetLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMsRequsetLogin)
  // required int32 loginType = 1;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logintype(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // required string channelID = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channelid(), output);
  }

  // optional string devicesID = 5;
  if (has_devicesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devicesid(), output);
  }

  // optional string sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sex(), output);
  }

  // optional string platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->platform(), output);
  }

  // required string verison = 8;
  if (has_verison()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->verison(), output);
  }

  // optional string nickName = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMsRequsetLogin)
}

int CMsRequsetLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 loginType = 1;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // required string channelID = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string devicesID = 5;
    if (has_devicesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicesid());
    }

    // optional string sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // optional string platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string verison = 8;
    if (has_verison()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verison());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string nickName = 9;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsRequsetLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsRequsetLogin*>(&from));
}

void CMsRequsetLogin::MergeFrom(const CMsRequsetLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_devicesid()) {
      set_devicesid(from.devicesid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_verison()) {
      set_verison(from.verison());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsRequsetLogin::CopyFrom(const CMsRequsetLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsRequsetLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000089) != 0x00000089) return false;

  return true;
}

void CMsRequsetLogin::Swap(CMsRequsetLogin* other) {
  if (other != this) {
    std::swap(logintype_, other->logintype_);
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(channelid_, other->channelid_);
    std::swap(devicesid_, other->devicesid_);
    std::swap(sex_, other->sex_);
    std::swap(platform_, other->platform_);
    std::swap(verison_, other->verison_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsRequsetLogin::GetTypeName() const {
  return "com.game.Protobuf.CMsRequsetLogin";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsResponseLogin::kTokenFieldNumber;
const int CMsResponseLogin::kAccountFieldNumber;
const int CMsResponseLogin::kPwdFieldNumber;
const int CMsResponseLogin::kGameIDFieldNumber;
const int CMsResponseLogin::kNickNameFieldNumber;
const int CMsResponseLogin::kServerlistFieldNumber;
#endif  // !_MSC_VER

CMsResponseLogin::CMsResponseLogin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMsResponseLogin)
}

void CMsResponseLogin::InitAsDefaultInstance() {
}

CMsResponseLogin::CMsResponseLogin(const CMsResponseLogin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMsResponseLogin)
}

void CMsResponseLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsResponseLogin::~CMsResponseLogin() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMsResponseLogin)
  SharedDtor();
}

void CMsResponseLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsResponseLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsResponseLogin& CMsResponseLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CMsResponseLogin* CMsResponseLogin::default_instance_ = NULL;

CMsResponseLogin* CMsResponseLogin::New() const {
  return new CMsResponseLogin;
}

void CMsResponseLogin::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  serverlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsResponseLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMsResponseLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gameID;
        break;
      }

      // required string gameID = 4;
      case 4: {
        if (tag == 34) {
         parse_gameID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }

      // required string nickName = 5;
      case 5: {
        if (tag == 42) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serverlist;
        break;
      }

      // repeated .com.game.Protobuf.ServerT serverlist = 6;
      case 6: {
        if (tag == 50) {
         parse_serverlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serverlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMsResponseLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMsResponseLogin)
  return false;
#undef DO_
}

void CMsResponseLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMsResponseLogin)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // required string gameID = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gameid(), output);
  }

  // required string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // repeated .com.game.Protobuf.ServerT serverlist = 6;
  for (int i = 0; i < this->serverlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->serverlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMsResponseLogin)
}

int CMsResponseLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // required string gameID = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // required string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  // repeated .com.game.Protobuf.ServerT serverlist = 6;
  total_size += 1 * this->serverlist_size();
  for (int i = 0; i < this->serverlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsResponseLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsResponseLogin*>(&from));
}

void CMsResponseLogin::MergeFrom(const CMsResponseLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverlist_.MergeFrom(from.serverlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsResponseLogin::CopyFrom(const CMsResponseLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsResponseLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->serverlist())) return false;
  return true;
}

void CMsResponseLogin::Swap(CMsResponseLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(gameid_, other->gameid_);
    std::swap(nickname_, other->nickname_);
    serverlist_.Swap(&other->serverlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsResponseLogin::GetTypeName() const {
  return "com.game.Protobuf.CMsResponseLogin";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsRegisterServer::kServerFieldNumber;
#endif  // !_MSC_VER

CMsRegisterServer::CMsRegisterServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMsRegisterServer)
}

void CMsRegisterServer::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  server_ = const_cast< ::com::game::Protobuf::ServerT*>(
      ::com::game::Protobuf::ServerT::internal_default_instance());
#else
  server_ = const_cast< ::com::game::Protobuf::ServerT*>(&::com::game::Protobuf::ServerT::default_instance());
#endif
}

CMsRegisterServer::CMsRegisterServer(const CMsRegisterServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMsRegisterServer)
}

void CMsRegisterServer::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsRegisterServer::~CMsRegisterServer() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMsRegisterServer)
  SharedDtor();
}

void CMsRegisterServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete server_;
  }
}

void CMsRegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsRegisterServer& CMsRegisterServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CMsRegisterServer* CMsRegisterServer::default_instance_ = NULL;

CMsRegisterServer* CMsRegisterServer::New() const {
  return new CMsRegisterServer;
}

void CMsRegisterServer::Clear() {
  if (has_server()) {
    if (server_ != NULL) server_->::com::game::Protobuf::ServerT::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsRegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMsRegisterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.game.Protobuf.ServerT server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMsRegisterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMsRegisterServer)
  return false;
#undef DO_
}

void CMsRegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMsRegisterServer)
  // required .com.game.Protobuf.ServerT server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->server(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMsRegisterServer)
}

int CMsRegisterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.game.Protobuf.ServerT server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsRegisterServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsRegisterServer*>(&from));
}

void CMsRegisterServer::MergeFrom(const CMsRegisterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::com::game::Protobuf::ServerT::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsRegisterServer::CopyFrom(const CMsRegisterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsRegisterServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void CMsRegisterServer::Swap(CMsRegisterServer* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsRegisterServer::GetTypeName() const {
  return "com.game.Protobuf.CMsRegisterServer";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsRegisterServerRet::kRetFieldNumber;
#endif  // !_MSC_VER

CMsRegisterServerRet::CMsRegisterServerRet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMsRegisterServerRet)
}

void CMsRegisterServerRet::InitAsDefaultInstance() {
}

CMsRegisterServerRet::CMsRegisterServerRet(const CMsRegisterServerRet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMsRegisterServerRet)
}

void CMsRegisterServerRet::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsRegisterServerRet::~CMsRegisterServerRet() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMsRegisterServerRet)
  SharedDtor();
}

void CMsRegisterServerRet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsRegisterServerRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsRegisterServerRet& CMsRegisterServerRet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CMsRegisterServerRet* CMsRegisterServerRet::default_instance_ = NULL;

CMsRegisterServerRet* CMsRegisterServerRet::New() const {
  return new CMsRegisterServerRet;
}

void CMsRegisterServerRet::Clear() {
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsRegisterServerRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMsRegisterServerRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMsRegisterServerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMsRegisterServerRet)
  return false;
#undef DO_
}

void CMsRegisterServerRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMsRegisterServerRet)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMsRegisterServerRet)
}

int CMsRegisterServerRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsRegisterServerRet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsRegisterServerRet*>(&from));
}

void CMsRegisterServerRet::MergeFrom(const CMsRegisterServerRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsRegisterServerRet::CopyFrom(const CMsRegisterServerRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsRegisterServerRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsRegisterServerRet::Swap(CMsRegisterServerRet* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsRegisterServerRet::GetTypeName() const {
  return "com.game.Protobuf.CMsRegisterServerRet";
}


// ===================================================================

#ifndef _MSC_VER
const int CLMSTokeValidate::kTokenFieldNumber;
#endif  // !_MSC_VER

CLMSTokeValidate::CLMSTokeValidate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CLMSTokeValidate)
}

void CLMSTokeValidate::InitAsDefaultInstance() {
}

CLMSTokeValidate::CLMSTokeValidate(const CLMSTokeValidate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CLMSTokeValidate)
}

void CLMSTokeValidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMSTokeValidate::~CLMSTokeValidate() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CLMSTokeValidate)
  SharedDtor();
}

void CLMSTokeValidate::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CLMSTokeValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CLMSTokeValidate& CLMSTokeValidate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CLMSTokeValidate* CLMSTokeValidate::default_instance_ = NULL;

CLMSTokeValidate* CLMSTokeValidate::New() const {
  return new CLMSTokeValidate;
}

void CLMSTokeValidate::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CLMSTokeValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CLMSTokeValidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CLMSTokeValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CLMSTokeValidate)
  return false;
#undef DO_
}

void CLMSTokeValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CLMSTokeValidate)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CLMSTokeValidate)
}

int CLMSTokeValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMSTokeValidate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CLMSTokeValidate*>(&from));
}

void CLMSTokeValidate::MergeFrom(const CLMSTokeValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CLMSTokeValidate::CopyFrom(const CLMSTokeValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMSTokeValidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CLMSTokeValidate::Swap(CLMSTokeValidate* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CLMSTokeValidate::GetTypeName() const {
  return "com.game.Protobuf.CLMSTokeValidate";
}


// ===================================================================

#ifndef _MSC_VER
const int SMSTokeValidate::kRetFieldNumber;
const int SMSTokeValidate::kGameIDFieldNumber;
const int SMSTokeValidate::kAccountFieldNumber;
const int SMSTokeValidate::kPwdFieldNumber;
const int SMSTokeValidate::kNickNameFieldNumber;
#endif  // !_MSC_VER

SMSTokeValidate::SMSTokeValidate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SMSTokeValidate)
}

void SMSTokeValidate::InitAsDefaultInstance() {
}

SMSTokeValidate::SMSTokeValidate(const SMSTokeValidate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SMSTokeValidate)
}

void SMSTokeValidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = false;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSTokeValidate::~SMSTokeValidate() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SMSTokeValidate)
  SharedDtor();
}

void SMSTokeValidate::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SMSTokeValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SMSTokeValidate& SMSTokeValidate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

SMSTokeValidate* SMSTokeValidate::default_instance_ = NULL;

SMSTokeValidate* SMSTokeValidate::New() const {
  return new SMSTokeValidate;
}

void SMSTokeValidate::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    ret_ = false;
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SMSTokeValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SMSTokeValidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GameID;
        break;
      }

      // optional string GameID = 2;
      case 2: {
        if (tag == 18) {
         parse_GameID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }

      // optional string pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }

      // optional string nickName = 5;
      case 5: {
        if (tag == 42) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SMSTokeValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SMSTokeValidate)
  return false;
#undef DO_
}

void SMSTokeValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SMSTokeValidate)
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // optional string GameID = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SMSTokeValidate)
}

int SMSTokeValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional string GameID = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSTokeValidate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SMSTokeValidate*>(&from));
}

void SMSTokeValidate::MergeFrom(const SMSTokeValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SMSTokeValidate::CopyFrom(const SMSTokeValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSTokeValidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SMSTokeValidate::Swap(SMSTokeValidate* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(gameid_, other->gameid_);
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SMSTokeValidate::GetTypeName() const {
  return "com.game.Protobuf.SMSTokeValidate";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLogout::kRetFieldNumber;
#endif  // !_MSC_VER

CMsgLogout::CMsgLogout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMsgLogout)
}

void CMsgLogout::InitAsDefaultInstance() {
}

CMsgLogout::CMsgLogout(const CMsgLogout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMsgLogout)
}

void CMsgLogout::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLogout::~CMsgLogout() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMsgLogout)
  SharedDtor();
}

void CMsgLogout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgLogout& CMsgLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginServer_2eproto();
#endif
  return *default_instance_;
}

CMsgLogout* CMsgLogout::default_instance_ = NULL;

CMsgLogout* CMsgLogout::New() const {
  return new CMsgLogout;
}

void CMsgLogout::Clear() {
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsgLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMsgLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMsgLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMsgLogout)
  return false;
#undef DO_
}

void CMsgLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMsgLogout)
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMsgLogout)
}

int CMsgLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLogout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgLogout*>(&from));
}

void CMsgLogout::MergeFrom(const CMsgLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsgLogout::CopyFrom(const CMsgLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLogout::IsInitialized() const {

  return true;
}

void CMsgLogout::Swap(CMsgLogout* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgLogout::GetTypeName() const {
  return "com.game.Protobuf.CMsgLogout";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
