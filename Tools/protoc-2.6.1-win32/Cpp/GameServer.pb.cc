// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

void protobuf_ShutdownFile_GameServer_2eproto() {
  delete SGOMsMapInfo::default_instance_;
  delete SCGMsPlayerInfo::default_instance_;
  delete GamePlayerInfo::default_instance_;
  delete COGMsEntyrGame::default_instance_;
  delete SGOMsPlayerInfo::default_instance_;
  delete Fish_Object::default_instance_;
  delete Net_Object::default_instance_;
  delete SGOMs_Fish_Path::default_instance_;
  delete SGOMs_Fish_Group::default_instance_;
  delete SGOMs_Fire_Success::default_instance_;
  delete SGOMs_Fire_Failed::default_instance_;
  delete SGOMs_Change_Cannon_Ret::default_instance_;
  delete SGOMs_Cast_Nets_Success::default_instance_;
  delete SGOMs_Get_ItemLock::default_instance_;
  delete SGOMs_Get_ItemStop::default_instance_;
  delete COGMs_OnFire::default_instance_;
  delete COGMs_Cast_Nets::default_instance_;
  delete COGMs_HitTeam::default_instance_;
  delete SGOMs_HitTeam_Success::default_instance_;
  delete COGMs_HitSceenBomb::default_instance_;
  delete SGOMs_HitSceenBomb_Success::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GameServer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GameServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SGOMsMapInfo::default_instance_ = new SGOMsMapInfo();
  SCGMsPlayerInfo::default_instance_ = new SCGMsPlayerInfo();
  GamePlayerInfo::default_instance_ = new GamePlayerInfo();
  COGMsEntyrGame::default_instance_ = new COGMsEntyrGame();
  SGOMsPlayerInfo::default_instance_ = new SGOMsPlayerInfo();
  Fish_Object::default_instance_ = new Fish_Object();
  Net_Object::default_instance_ = new Net_Object();
  SGOMs_Fish_Path::default_instance_ = new SGOMs_Fish_Path();
  SGOMs_Fish_Group::default_instance_ = new SGOMs_Fish_Group();
  SGOMs_Fire_Success::default_instance_ = new SGOMs_Fire_Success();
  SGOMs_Fire_Failed::default_instance_ = new SGOMs_Fire_Failed();
  SGOMs_Change_Cannon_Ret::default_instance_ = new SGOMs_Change_Cannon_Ret();
  SGOMs_Cast_Nets_Success::default_instance_ = new SGOMs_Cast_Nets_Success();
  SGOMs_Get_ItemLock::default_instance_ = new SGOMs_Get_ItemLock();
  SGOMs_Get_ItemStop::default_instance_ = new SGOMs_Get_ItemStop();
  COGMs_OnFire::default_instance_ = new COGMs_OnFire();
  COGMs_Cast_Nets::default_instance_ = new COGMs_Cast_Nets();
  COGMs_HitTeam::default_instance_ = new COGMs_HitTeam();
  SGOMs_HitTeam_Success::default_instance_ = new SGOMs_HitTeam_Success();
  COGMs_HitSceenBomb::default_instance_ = new COGMs_HitSceenBomb();
  SGOMs_HitSceenBomb_Success::default_instance_ = new SGOMs_HitSceenBomb_Success();
  SGOMsMapInfo::default_instance_->InitAsDefaultInstance();
  SCGMsPlayerInfo::default_instance_->InitAsDefaultInstance();
  GamePlayerInfo::default_instance_->InitAsDefaultInstance();
  COGMsEntyrGame::default_instance_->InitAsDefaultInstance();
  SGOMsPlayerInfo::default_instance_->InitAsDefaultInstance();
  Fish_Object::default_instance_->InitAsDefaultInstance();
  Net_Object::default_instance_->InitAsDefaultInstance();
  SGOMs_Fish_Path::default_instance_->InitAsDefaultInstance();
  SGOMs_Fish_Group::default_instance_->InitAsDefaultInstance();
  SGOMs_Fire_Success::default_instance_->InitAsDefaultInstance();
  SGOMs_Fire_Failed::default_instance_->InitAsDefaultInstance();
  SGOMs_Change_Cannon_Ret::default_instance_->InitAsDefaultInstance();
  SGOMs_Cast_Nets_Success::default_instance_->InitAsDefaultInstance();
  SGOMs_Get_ItemLock::default_instance_->InitAsDefaultInstance();
  SGOMs_Get_ItemStop::default_instance_->InitAsDefaultInstance();
  COGMs_OnFire::default_instance_->InitAsDefaultInstance();
  COGMs_Cast_Nets::default_instance_->InitAsDefaultInstance();
  COGMs_HitTeam::default_instance_->InitAsDefaultInstance();
  SGOMs_HitTeam_Success::default_instance_->InitAsDefaultInstance();
  COGMs_HitSceenBomb::default_instance_->InitAsDefaultInstance();
  SGOMs_HitSceenBomb_Success::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameServer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GameServer_2eproto_once_);
void protobuf_AddDesc_GameServer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GameServer_2eproto_once_,
                 &protobuf_AddDesc_GameServer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameServer_2eproto {
  StaticDescriptorInitializer_GameServer_2eproto() {
    protobuf_AddDesc_GameServer_2eproto();
  }
} static_descriptor_initializer_GameServer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SGOMsMapInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

SGOMsMapInfo::SGOMsMapInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMsMapInfo)
}

void SGOMsMapInfo::InitAsDefaultInstance() {
}

SGOMsMapInfo::SGOMsMapInfo(const SGOMsMapInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMsMapInfo)
}

void SGOMsMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMsMapInfo::~SGOMsMapInfo() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMsMapInfo)
  SharedDtor();
}

void SGOMsMapInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMsMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMsMapInfo& SGOMsMapInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMsMapInfo* SGOMsMapInfo::default_instance_ = NULL;

SGOMsMapInfo* SGOMsMapInfo::New() const {
  return new SGOMsMapInfo;
}

void SGOMsMapInfo::Clear() {
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMsMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMsMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMsMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMsMapInfo)
  return false;
#undef DO_
}

void SGOMsMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMsMapInfo)
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMsMapInfo)
}

int SGOMsMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMsMapInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMsMapInfo*>(&from));
}

void SGOMsMapInfo::MergeFrom(const SGOMsMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMsMapInfo::CopyFrom(const SGOMsMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMsMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SGOMsMapInfo::Swap(SGOMsMapInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMsMapInfo::GetTypeName() const {
  return "com.game.Protobuf.SGOMsMapInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCGMsPlayerInfo::kRetFieldNumber;
const int SCGMsPlayerInfo::kGameIdFieldNumber;
const int SCGMsPlayerInfo::kNickNameFieldNumber;
const int SCGMsPlayerInfo::kGoldFieldNumber;
const int SCGMsPlayerInfo::kDiamondsFieldNumber;
const int SCGMsPlayerInfo::kHeadIDFieldNumber;
const int SCGMsPlayerInfo::kProp1FieldNumber;
const int SCGMsPlayerInfo::kProp2FieldNumber;
const int SCGMsPlayerInfo::kVipFieldNumber;
const int SCGMsPlayerInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

SCGMsPlayerInfo::SCGMsPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SCGMsPlayerInfo)
}

void SCGMsPlayerInfo::InitAsDefaultInstance() {
}

SCGMsPlayerInfo::SCGMsPlayerInfo(const SCGMsPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SCGMsPlayerInfo)
}

void SCGMsPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = 0;
  gold_ = 0;
  diamonds_ = 0;
  headid_ = 0;
  prop1_ = 0;
  prop2_ = 0;
  vip_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGMsPlayerInfo::~SCGMsPlayerInfo() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SCGMsPlayerInfo)
  SharedDtor();
}

void SCGMsPlayerInfo::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCGMsPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCGMsPlayerInfo& SCGMsPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SCGMsPlayerInfo* SCGMsPlayerInfo::default_instance_ = NULL;

SCGMsPlayerInfo* SCGMsPlayerInfo::New() const {
  return new SCGMsPlayerInfo;
}

void SCGMsPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SCGMsPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ret_, prop2_);
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
  }
  ZR_(vip_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SCGMsPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SCGMsPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameId;
        break;
      }

      // optional string gameId = 2;
      case 2: {
        if (tag == 18) {
         parse_gameId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nickName;
        break;
      }

      // optional int32 nickName = 3;
      case 3: {
        if (tag == 24) {
         parse_nickName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nickname_)));
          set_has_nickname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_diamonds;
        break;
      }

      // optional int32 diamonds = 5;
      case 5: {
        if (tag == 40) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_headID;
        break;
      }

      // optional int32 headID = 6;
      case 6: {
        if (tag == 48) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Prop1;
        break;
      }

      // optional int32 Prop1 = 7;
      case 7: {
        if (tag == 56) {
         parse_Prop1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop1_)));
          set_has_prop1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Prop2;
        break;
      }

      // optional int32 Prop2 = 8;
      case 8: {
        if (tag == 64) {
         parse_Prop2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop2_)));
          set_has_prop2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // optional int32 vip = 9;
      case 9: {
        if (tag == 72) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (tag == 80) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SCGMsPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SCGMsPlayerInfo)
  return false;
#undef DO_
}

void SCGMsPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SCGMsPlayerInfo)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional string gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  // optional int32 nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nickname(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 diamonds = 5;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamonds(), output);
  }

  // optional int32 headID = 6;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headid(), output);
  }

  // optional int32 Prop1 = 7;
  if (has_prop1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prop1(), output);
  }

  // optional int32 Prop2 = 8;
  if (has_prop2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prop2(), output);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SCGMsPlayerInfo)
}

int SCGMsPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional int32 nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nickname());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 diamonds = 5;
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamonds());
    }

    // optional int32 headID = 6;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int32 Prop1 = 7;
    if (has_prop1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop1());
    }

    // optional int32 Prop2 = 8;
    if (has_prop2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGMsPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCGMsPlayerInfo*>(&from));
}

void SCGMsPlayerInfo::MergeFrom(const SCGMsPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_prop1()) {
      set_prop1(from.prop1());
    }
    if (from.has_prop2()) {
      set_prop2(from.prop2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SCGMsPlayerInfo::CopyFrom(const SCGMsPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGMsPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCGMsPlayerInfo::Swap(SCGMsPlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(gameid_, other->gameid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gold_, other->gold_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(headid_, other->headid_);
    std::swap(prop1_, other->prop1_);
    std::swap(prop2_, other->prop2_);
    std::swap(vip_, other->vip_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCGMsPlayerInfo::GetTypeName() const {
  return "com.game.Protobuf.SCGMsPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerInfo::kIsMyselfFieldNumber;
const int GamePlayerInfo::kChairIDFieldNumber;
const int GamePlayerInfo::kNickNameFieldNumber;
const int GamePlayerInfo::kGameidFieldNumber;
const int GamePlayerInfo::kGoldFieldNumber;
const int GamePlayerInfo::kDiamondsFieldNumber;
const int GamePlayerInfo::kItemStopFieldNumber;
const int GamePlayerInfo::kItemLockFieldNumber;
const int GamePlayerInfo::kVipFieldNumber;
const int GamePlayerInfo::kLevelFieldNumber;
const int GamePlayerInfo::kCannonLvFieldNumber;
const int GamePlayerInfo::kHeadIDFieldNumber;
#endif  // !_MSC_VER

GamePlayerInfo::GamePlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.GamePlayerInfo)
}

void GamePlayerInfo::InitAsDefaultInstance() {
}

GamePlayerInfo::GamePlayerInfo(const GamePlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.GamePlayerInfo)
}

void GamePlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ismyself_ = false;
  chairid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_ = 0;
  diamonds_ = 0;
  itemstop_ = 0;
  itemlock_ = 0;
  vip_ = 0;
  level_ = 0;
  cannonlv_ = 0;
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerInfo::~GamePlayerInfo() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.GamePlayerInfo)
  SharedDtor();
}

void GamePlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GamePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GamePlayerInfo& GamePlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

GamePlayerInfo* GamePlayerInfo::default_instance_ = NULL;

GamePlayerInfo* GamePlayerInfo::New() const {
  return new GamePlayerInfo;
}

void GamePlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GamePlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ismyself_, chairid_);
    ZR_(gold_, itemlock_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
  }
  ZR_(vip_, headid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GamePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.GamePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isMyself = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismyself_)));
          set_has_ismyself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairID;
        break;
      }

      // required int32 chairID = 2;
      case 2: {
        if (tag == 16) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // required string nickName = 3;
      case 3: {
        if (tag == 26) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gameid;
        break;
      }

      // required string gameid = 4;
      case 4: {
        if (tag == 34) {
         parse_gameid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // required int32 gold = 5;
      case 5: {
        if (tag == 40) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_diamonds;
        break;
      }

      // optional int32 diamonds = 6;
      case 6: {
        if (tag == 48) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemStop;
        break;
      }

      // optional int32 itemStop = 7;
      case 7: {
        if (tag == 56) {
         parse_itemStop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemstop_)));
          set_has_itemstop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_itemLock;
        break;
      }

      // optional int32 itemLock = 8;
      case 8: {
        if (tag == 64) {
         parse_itemLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemlock_)));
          set_has_itemlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // optional int32 vip = 9;
      case 9: {
        if (tag == 72) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (tag == 80) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cannonLv;
        break;
      }

      // optional int32 cannonLv = 11;
      case 11: {
        if (tag == 88) {
         parse_cannonLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonlv_)));
          set_has_cannonlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_headID;
        break;
      }

      // required int32 headID = 12;
      case 12: {
        if (tag == 96) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.GamePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.GamePlayerInfo)
  return false;
#undef DO_
}

void GamePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.GamePlayerInfo)
  // required bool isMyself = 1;
  if (has_ismyself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismyself(), output);
  }

  // required int32 chairID = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // required string gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gameid(), output);
  }

  // required int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional int32 diamonds = 6;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamonds(), output);
  }

  // optional int32 itemStop = 7;
  if (has_itemstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->itemstop(), output);
  }

  // optional int32 itemLock = 8;
  if (has_itemlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemlock(), output);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  // optional int32 cannonLv = 11;
  if (has_cannonlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cannonlv(), output);
  }

  // required int32 headID = 12;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.GamePlayerInfo)
}

int GamePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMyself = 1;
    if (has_ismyself()) {
      total_size += 1 + 1;
    }

    // required int32 chairID = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // required int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 diamonds = 6;
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamonds());
    }

    // optional int32 itemStop = 7;
    if (has_itemstop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemstop());
    }

    // optional int32 itemLock = 8;
    if (has_itemlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemlock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 cannonLv = 11;
    if (has_cannonlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonlv());
    }

    // required int32 headID = 12;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamePlayerInfo*>(&from));
}

void GamePlayerInfo::MergeFrom(const GamePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismyself()) {
      set_ismyself(from.ismyself());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_itemstop()) {
      set_itemstop(from.itemstop());
    }
    if (from.has_itemlock()) {
      set_itemlock(from.itemlock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cannonlv()) {
      set_cannonlv(from.cannonlv());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GamePlayerInfo::CopyFrom(const GamePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000081f) != 0x0000081f) return false;

  return true;
}

void GamePlayerInfo::Swap(GamePlayerInfo* other) {
  if (other != this) {
    std::swap(ismyself_, other->ismyself_);
    std::swap(chairid_, other->chairid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gameid_, other->gameid_);
    std::swap(gold_, other->gold_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(itemstop_, other->itemstop_);
    std::swap(itemlock_, other->itemlock_);
    std::swap(vip_, other->vip_);
    std::swap(level_, other->level_);
    std::swap(cannonlv_, other->cannonlv_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GamePlayerInfo::GetTypeName() const {
  return "com.game.Protobuf.GamePlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int COGMsEntyrGame::kGameIdFieldNumber;
#endif  // !_MSC_VER

COGMsEntyrGame::COGMsEntyrGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COGMsEntyrGame)
}

void COGMsEntyrGame::InitAsDefaultInstance() {
}

COGMsEntyrGame::COGMsEntyrGame(const COGMsEntyrGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COGMsEntyrGame)
}

void COGMsEntyrGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COGMsEntyrGame::~COGMsEntyrGame() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COGMsEntyrGame)
  SharedDtor();
}

void COGMsEntyrGame::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void COGMsEntyrGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COGMsEntyrGame& COGMsEntyrGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

COGMsEntyrGame* COGMsEntyrGame::default_instance_ = NULL;

COGMsEntyrGame* COGMsEntyrGame::New() const {
  return new COGMsEntyrGame;
}

void COGMsEntyrGame::Clear() {
  if (has_gameid()) {
    if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gameid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COGMsEntyrGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COGMsEntyrGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COGMsEntyrGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COGMsEntyrGame)
  return false;
#undef DO_
}

void COGMsEntyrGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COGMsEntyrGame)
  // required string gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COGMsEntyrGame)
}

int COGMsEntyrGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COGMsEntyrGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COGMsEntyrGame*>(&from));
}

void COGMsEntyrGame::MergeFrom(const COGMsEntyrGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COGMsEntyrGame::CopyFrom(const COGMsEntyrGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COGMsEntyrGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void COGMsEntyrGame::Swap(COGMsEntyrGame* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COGMsEntyrGame::GetTypeName() const {
  return "com.game.Protobuf.COGMsEntyrGame";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMsPlayerInfo::kPlayerListFieldNumber;
#endif  // !_MSC_VER

SGOMsPlayerInfo::SGOMsPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMsPlayerInfo)
}

void SGOMsPlayerInfo::InitAsDefaultInstance() {
}

SGOMsPlayerInfo::SGOMsPlayerInfo(const SGOMsPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMsPlayerInfo)
}

void SGOMsPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMsPlayerInfo::~SGOMsPlayerInfo() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMsPlayerInfo)
  SharedDtor();
}

void SGOMsPlayerInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMsPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMsPlayerInfo& SGOMsPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMsPlayerInfo* SGOMsPlayerInfo::default_instance_ = NULL;

SGOMsPlayerInfo* SGOMsPlayerInfo::New() const {
  return new SGOMsPlayerInfo;
}

void SGOMsPlayerInfo::Clear() {
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMsPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMsPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.game.Protobuf.GamePlayerInfo playerList = 1;
      case 1: {
        if (tag == 10) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_playerList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMsPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMsPlayerInfo)
  return false;
#undef DO_
}

void SGOMsPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMsPlayerInfo)
  // repeated .com.game.Protobuf.GamePlayerInfo playerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMsPlayerInfo)
}

int SGOMsPlayerInfo::ByteSize() const {
  int total_size = 0;

  // repeated .com.game.Protobuf.GamePlayerInfo playerList = 1;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMsPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMsPlayerInfo*>(&from));
}

void SGOMsPlayerInfo::MergeFrom(const SGOMsPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMsPlayerInfo::CopyFrom(const SGOMsPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMsPlayerInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->playerlist())) return false;
  return true;
}

void SGOMsPlayerInfo::Swap(SGOMsPlayerInfo* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMsPlayerInfo::GetTypeName() const {
  return "com.game.Protobuf.SGOMsPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int Fish_Object::kWIDFieldNumber;
const int Fish_Object::kCbTypeFieldNumber;
#endif  // !_MSC_VER

Fish_Object::Fish_Object()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.Fish_Object)
}

void Fish_Object::InitAsDefaultInstance() {
}

Fish_Object::Fish_Object(const Fish_Object& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.Fish_Object)
}

void Fish_Object::SharedCtor() {
  _cached_size_ = 0;
  wid_ = 0;
  cbtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fish_Object::~Fish_Object() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.Fish_Object)
  SharedDtor();
}

void Fish_Object::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Fish_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fish_Object& Fish_Object::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

Fish_Object* Fish_Object::default_instance_ = NULL;

Fish_Object* Fish_Object::New() const {
  return new Fish_Object;
}

void Fish_Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Fish_Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wid_, cbtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Fish_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.Fish_Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wid_)));
          set_has_wid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbType;
        break;
      }

      // required int32 cbType = 2;
      case 2: {
        if (tag == 16) {
         parse_cbType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbtype_)));
          set_has_cbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.Fish_Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.Fish_Object)
  return false;
#undef DO_
}

void Fish_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.Fish_Object)
  // required int32 wID = 1;
  if (has_wid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wid(), output);
  }

  // required int32 cbType = 2;
  if (has_cbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.Fish_Object)
}

int Fish_Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wID = 1;
    if (has_wid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wid());
    }

    // required int32 cbType = 2;
    if (has_cbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fish_Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fish_Object*>(&from));
}

void Fish_Object::MergeFrom(const Fish_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wid()) {
      set_wid(from.wid());
    }
    if (from.has_cbtype()) {
      set_cbtype(from.cbtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Fish_Object::CopyFrom(const Fish_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fish_Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fish_Object::Swap(Fish_Object* other) {
  if (other != this) {
    std::swap(wid_, other->wid_);
    std::swap(cbtype_, other->cbtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Fish_Object::GetTypeName() const {
  return "com.game.Protobuf.Fish_Object";
}


// ===================================================================

#ifndef _MSC_VER
const int Net_Object::kWIDFieldNumber;
const int Net_Object::kCbTypeFieldNumber;
#endif  // !_MSC_VER

Net_Object::Net_Object()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.Net_Object)
}

void Net_Object::InitAsDefaultInstance() {
}

Net_Object::Net_Object(const Net_Object& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.Net_Object)
}

void Net_Object::SharedCtor() {
  _cached_size_ = 0;
  wid_ = 0;
  cbtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Net_Object::~Net_Object() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.Net_Object)
  SharedDtor();
}

void Net_Object::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Net_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Net_Object& Net_Object::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

Net_Object* Net_Object::default_instance_ = NULL;

Net_Object* Net_Object::New() const {
  return new Net_Object;
}

void Net_Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Net_Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wid_, cbtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Net_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.Net_Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wid_)));
          set_has_wid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbType;
        break;
      }

      // required int32 cbType = 2;
      case 2: {
        if (tag == 16) {
         parse_cbType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbtype_)));
          set_has_cbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.Net_Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.Net_Object)
  return false;
#undef DO_
}

void Net_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.Net_Object)
  // required int32 wID = 1;
  if (has_wid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wid(), output);
  }

  // required int32 cbType = 2;
  if (has_cbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.Net_Object)
}

int Net_Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wID = 1;
    if (has_wid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wid());
    }

    // required int32 cbType = 2;
    if (has_cbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Net_Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Net_Object*>(&from));
}

void Net_Object::MergeFrom(const Net_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wid()) {
      set_wid(from.wid());
    }
    if (from.has_cbtype()) {
      set_cbtype(from.cbtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Net_Object::CopyFrom(const Net_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net_Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Net_Object::Swap(Net_Object* other) {
  if (other != this) {
    std::swap(wid_, other->wid_);
    std::swap(cbtype_, other->cbtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Net_Object::GetTypeName() const {
  return "com.game.Protobuf.Net_Object";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Fish_Path::kCbTypeFieldNumber;
const int SGOMs_Fish_Path::kCbCountFieldNumber;
const int SGOMs_Fish_Path::kCbSeedFieldNumber;
const int SGOMs_Fish_Path::kFishNetObjectFieldNumber;
#endif  // !_MSC_VER

SGOMs_Fish_Path::SGOMs_Fish_Path()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Fish_Path)
}

void SGOMs_Fish_Path::InitAsDefaultInstance() {
}

SGOMs_Fish_Path::SGOMs_Fish_Path(const SGOMs_Fish_Path& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Fish_Path)
}

void SGOMs_Fish_Path::SharedCtor() {
  _cached_size_ = 0;
  cbtype_ = 0;
  cbcount_ = 0;
  cbseed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Fish_Path::~SGOMs_Fish_Path() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Fish_Path)
  SharedDtor();
}

void SGOMs_Fish_Path::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Fish_Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Fish_Path& SGOMs_Fish_Path::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Fish_Path* SGOMs_Fish_Path::default_instance_ = NULL;

SGOMs_Fish_Path* SGOMs_Fish_Path::New() const {
  return new SGOMs_Fish_Path;
}

void SGOMs_Fish_Path::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_Fish_Path*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(cbtype_, cbcount_);
    cbseed_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishnetobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Fish_Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Fish_Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbtype_)));
          set_has_cbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbCount;
        break;
      }

      // required int32 cbCount = 2;
      case 2: {
        if (tag == 16) {
         parse_cbCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cbSeed;
        break;
      }

      // required int32 cbSeed = 3;
      case 3: {
        if (tag == 24) {
         parse_cbSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbseed_)));
          set_has_cbseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FishNetObject;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishNetObject = 4;
      case 4: {
        if (tag == 34) {
         parse_FishNetObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishnetobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FishNetObject;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Fish_Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Fish_Path)
  return false;
#undef DO_
}

void SGOMs_Fish_Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Fish_Path)
  // required int32 cbType = 1;
  if (has_cbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbtype(), output);
  }

  // required int32 cbCount = 2;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbcount(), output);
  }

  // required int32 cbSeed = 3;
  if (has_cbseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbseed(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishNetObject = 4;
  for (int i = 0; i < this->fishnetobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fishnetobject(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Fish_Path)
}

int SGOMs_Fish_Path::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbType = 1;
    if (has_cbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbtype());
    }

    // required int32 cbCount = 2;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required int32 cbSeed = 3;
    if (has_cbseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbseed());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishNetObject = 4;
  total_size += 1 * this->fishnetobject_size();
  for (int i = 0; i < this->fishnetobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishnetobject(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Fish_Path::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Fish_Path*>(&from));
}

void SGOMs_Fish_Path::MergeFrom(const SGOMs_Fish_Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishnetobject_.MergeFrom(from.fishnetobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbtype()) {
      set_cbtype(from.cbtype());
    }
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_cbseed()) {
      set_cbseed(from.cbseed());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Fish_Path::CopyFrom(const SGOMs_Fish_Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Fish_Path::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fishnetobject())) return false;
  return true;
}

void SGOMs_Fish_Path::Swap(SGOMs_Fish_Path* other) {
  if (other != this) {
    std::swap(cbtype_, other->cbtype_);
    std::swap(cbcount_, other->cbcount_);
    std::swap(cbseed_, other->cbseed_);
    fishnetobject_.Swap(&other->fishnetobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Fish_Path::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Fish_Path";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Fish_Group::kCbTypeFieldNumber;
const int SGOMs_Fish_Group::kCbSeedFieldNumber;
const int SGOMs_Fish_Group::kFPassTimeFieldNumber;
const int SGOMs_Fish_Group::kWCountFieldNumber;
const int SGOMs_Fish_Group::kFishGroupIDsFieldNumber;
#endif  // !_MSC_VER

SGOMs_Fish_Group::SGOMs_Fish_Group()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Fish_Group)
}

void SGOMs_Fish_Group::InitAsDefaultInstance() {
}

SGOMs_Fish_Group::SGOMs_Fish_Group(const SGOMs_Fish_Group& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Fish_Group)
}

void SGOMs_Fish_Group::SharedCtor() {
  _cached_size_ = 0;
  cbtype_ = 0;
  cbseed_ = 0;
  fpasstime_ = 0;
  wcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Fish_Group::~SGOMs_Fish_Group() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Fish_Group)
  SharedDtor();
}

void SGOMs_Fish_Group::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Fish_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Fish_Group& SGOMs_Fish_Group::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Fish_Group* SGOMs_Fish_Group::default_instance_ = NULL;

SGOMs_Fish_Group* SGOMs_Fish_Group::New() const {
  return new SGOMs_Fish_Group;
}

void SGOMs_Fish_Group::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_Fish_Group*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cbtype_, wcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishgroupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Fish_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Fish_Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbtype_)));
          set_has_cbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbSeed;
        break;
      }

      // required int32 cbSeed = 2;
      case 2: {
        if (tag == 16) {
         parse_cbSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbseed_)));
          set_has_cbseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_fPassTime;
        break;
      }

      // required float fPassTime = 3;
      case 3: {
        if (tag == 29) {
         parse_fPassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fpasstime_)));
          set_has_fpasstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wCount;
        break;
      }

      // required int32 wCount = 4;
      case 4: {
        if (tag == 32) {
         parse_wCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcount_)));
          set_has_wcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FishGroupIDs;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishGroupIDs = 5;
      case 5: {
        if (tag == 42) {
         parse_FishGroupIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishgroupids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FishGroupIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Fish_Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Fish_Group)
  return false;
#undef DO_
}

void SGOMs_Fish_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Fish_Group)
  // required int32 cbType = 1;
  if (has_cbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbtype(), output);
  }

  // required int32 cbSeed = 2;
  if (has_cbseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbseed(), output);
  }

  // required float fPassTime = 3;
  if (has_fpasstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fpasstime(), output);
  }

  // required int32 wCount = 4;
  if (has_wcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wcount(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishGroupIDs = 5;
  for (int i = 0; i < this->fishgroupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->fishgroupids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Fish_Group)
}

int SGOMs_Fish_Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbType = 1;
    if (has_cbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbtype());
    }

    // required int32 cbSeed = 2;
    if (has_cbseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbseed());
    }

    // required float fPassTime = 3;
    if (has_fpasstime()) {
      total_size += 1 + 4;
    }

    // required int32 wCount = 4;
    if (has_wcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wcount());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishGroupIDs = 5;
  total_size += 1 * this->fishgroupids_size();
  for (int i = 0; i < this->fishgroupids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishgroupids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Fish_Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Fish_Group*>(&from));
}

void SGOMs_Fish_Group::MergeFrom(const SGOMs_Fish_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishgroupids_.MergeFrom(from.fishgroupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbtype()) {
      set_cbtype(from.cbtype());
    }
    if (from.has_cbseed()) {
      set_cbseed(from.cbseed());
    }
    if (from.has_fpasstime()) {
      set_fpasstime(from.fpasstime());
    }
    if (from.has_wcount()) {
      set_wcount(from.wcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Fish_Group::CopyFrom(const SGOMs_Fish_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Fish_Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fishgroupids())) return false;
  return true;
}

void SGOMs_Fish_Group::Swap(SGOMs_Fish_Group* other) {
  if (other != this) {
    std::swap(cbtype_, other->cbtype_);
    std::swap(cbseed_, other->cbseed_);
    std::swap(fpasstime_, other->fpasstime_);
    std::swap(wcount_, other->wcount_);
    fishgroupids_.Swap(&other->fishgroupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Fish_Group::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Fish_Group";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Fire_Success::kCbChairIDFieldNumber;
const int SGOMs_Fire_Success::kFRoteFieldNumber;
#endif  // !_MSC_VER

SGOMs_Fire_Success::SGOMs_Fire_Success()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Fire_Success)
}

void SGOMs_Fire_Success::InitAsDefaultInstance() {
}

SGOMs_Fire_Success::SGOMs_Fire_Success(const SGOMs_Fire_Success& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Fire_Success)
}

void SGOMs_Fire_Success::SharedCtor() {
  _cached_size_ = 0;
  cbchairid_ = 0;
  frote_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Fire_Success::~SGOMs_Fire_Success() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Fire_Success)
  SharedDtor();
}

void SGOMs_Fire_Success::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Fire_Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Fire_Success& SGOMs_Fire_Success::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Fire_Success* SGOMs_Fire_Success::default_instance_ = NULL;

SGOMs_Fire_Success* SGOMs_Fire_Success::New() const {
  return new SGOMs_Fire_Success;
}

void SGOMs_Fire_Success::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_Fire_Success*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cbchairid_, frote_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Fire_Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Fire_Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchairid_)));
          set_has_cbchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fRote;
        break;
      }

      // required int32 fRote = 2;
      case 2: {
        if (tag == 16) {
         parse_fRote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frote_)));
          set_has_frote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Fire_Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Fire_Success)
  return false;
#undef DO_
}

void SGOMs_Fire_Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Fire_Success)
  // required int32 cbChairID = 1;
  if (has_cbchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbchairid(), output);
  }

  // required int32 fRote = 2;
  if (has_frote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frote(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Fire_Success)
}

int SGOMs_Fire_Success::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbChairID = 1;
    if (has_cbchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchairid());
    }

    // required int32 fRote = 2;
    if (has_frote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frote());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Fire_Success::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Fire_Success*>(&from));
}

void SGOMs_Fire_Success::MergeFrom(const SGOMs_Fire_Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbchairid()) {
      set_cbchairid(from.cbchairid());
    }
    if (from.has_frote()) {
      set_frote(from.frote());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Fire_Success::CopyFrom(const SGOMs_Fire_Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Fire_Success::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SGOMs_Fire_Success::Swap(SGOMs_Fire_Success* other) {
  if (other != this) {
    std::swap(cbchairid_, other->cbchairid_);
    std::swap(frote_, other->frote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Fire_Success::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Fire_Success";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Fire_Failed::kWChairIDFieldNumber;
const int SGOMs_Fire_Failed::kSzReasonFieldNumber;
#endif  // !_MSC_VER

SGOMs_Fire_Failed::SGOMs_Fire_Failed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Fire_Failed)
}

void SGOMs_Fire_Failed::InitAsDefaultInstance() {
}

SGOMs_Fire_Failed::SGOMs_Fire_Failed(const SGOMs_Fire_Failed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Fire_Failed)
}

void SGOMs_Fire_Failed::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wchairid_ = 0;
  szreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Fire_Failed::~SGOMs_Fire_Failed() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Fire_Failed)
  SharedDtor();
}

void SGOMs_Fire_Failed::SharedDtor() {
  if (szreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szreason_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Fire_Failed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Fire_Failed& SGOMs_Fire_Failed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Fire_Failed* SGOMs_Fire_Failed::default_instance_ = NULL;

SGOMs_Fire_Failed* SGOMs_Fire_Failed::New() const {
  return new SGOMs_Fire_Failed;
}

void SGOMs_Fire_Failed::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    wchairid_ = 0;
    if (has_szreason()) {
      if (szreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szreason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Fire_Failed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Fire_Failed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wchairid_)));
          set_has_wchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szReason;
        break;
      }

      // required string szReason = 2;
      case 2: {
        if (tag == 18) {
         parse_szReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szreason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Fire_Failed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Fire_Failed)
  return false;
#undef DO_
}

void SGOMs_Fire_Failed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Fire_Failed)
  // required int32 wChairID = 1;
  if (has_wchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wchairid(), output);
  }

  // required string szReason = 2;
  if (has_szreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Fire_Failed)
}

int SGOMs_Fire_Failed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wChairID = 1;
    if (has_wchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wchairid());
    }

    // required string szReason = 2;
    if (has_szreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szreason());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Fire_Failed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Fire_Failed*>(&from));
}

void SGOMs_Fire_Failed::MergeFrom(const SGOMs_Fire_Failed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wchairid()) {
      set_wchairid(from.wchairid());
    }
    if (from.has_szreason()) {
      set_szreason(from.szreason());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Fire_Failed::CopyFrom(const SGOMs_Fire_Failed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Fire_Failed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SGOMs_Fire_Failed::Swap(SGOMs_Fire_Failed* other) {
  if (other != this) {
    std::swap(wchairid_, other->wchairid_);
    std::swap(szreason_, other->szreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Fire_Failed::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Fire_Failed";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Change_Cannon_Ret::kCbChairIDFieldNumber;
const int SGOMs_Change_Cannon_Ret::kCbStyleFieldNumber;
const int SGOMs_Change_Cannon_Ret::kWCostFieldNumber;
#endif  // !_MSC_VER

SGOMs_Change_Cannon_Ret::SGOMs_Change_Cannon_Ret()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
}

void SGOMs_Change_Cannon_Ret::InitAsDefaultInstance() {
}

SGOMs_Change_Cannon_Ret::SGOMs_Change_Cannon_Ret(const SGOMs_Change_Cannon_Ret& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
}

void SGOMs_Change_Cannon_Ret::SharedCtor() {
  _cached_size_ = 0;
  cbchairid_ = 0;
  cbstyle_ = 0;
  wcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Change_Cannon_Ret::~SGOMs_Change_Cannon_Ret() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
  SharedDtor();
}

void SGOMs_Change_Cannon_Ret::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Change_Cannon_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Change_Cannon_Ret& SGOMs_Change_Cannon_Ret::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Change_Cannon_Ret* SGOMs_Change_Cannon_Ret::default_instance_ = NULL;

SGOMs_Change_Cannon_Ret* SGOMs_Change_Cannon_Ret::New() const {
  return new SGOMs_Change_Cannon_Ret;
}

void SGOMs_Change_Cannon_Ret::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_Change_Cannon_Ret*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cbchairid_, wcost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Change_Cannon_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchairid_)));
          set_has_cbchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbStyle;
        break;
      }

      // required int32 cbStyle = 2;
      case 2: {
        if (tag == 16) {
         parse_cbStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbstyle_)));
          set_has_cbstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wCost;
        break;
      }

      // required int32 wCost = 3;
      case 3: {
        if (tag == 24) {
         parse_wCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcost_)));
          set_has_wcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
  return false;
#undef DO_
}

void SGOMs_Change_Cannon_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
  // required int32 cbChairID = 1;
  if (has_cbchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbchairid(), output);
  }

  // required int32 cbStyle = 2;
  if (has_cbstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbstyle(), output);
  }

  // required int32 wCost = 3;
  if (has_wcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wcost(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
}

int SGOMs_Change_Cannon_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbChairID = 1;
    if (has_cbchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchairid());
    }

    // required int32 cbStyle = 2;
    if (has_cbstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbstyle());
    }

    // required int32 wCost = 3;
    if (has_wcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wcost());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Change_Cannon_Ret::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Change_Cannon_Ret*>(&from));
}

void SGOMs_Change_Cannon_Ret::MergeFrom(const SGOMs_Change_Cannon_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbchairid()) {
      set_cbchairid(from.cbchairid());
    }
    if (from.has_cbstyle()) {
      set_cbstyle(from.cbstyle());
    }
    if (from.has_wcost()) {
      set_wcost(from.wcost());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Change_Cannon_Ret::CopyFrom(const SGOMs_Change_Cannon_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Change_Cannon_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SGOMs_Change_Cannon_Ret::Swap(SGOMs_Change_Cannon_Ret* other) {
  if (other != this) {
    std::swap(cbchairid_, other->cbchairid_);
    std::swap(cbstyle_, other->cbstyle_);
    std::swap(wcost_, other->wcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Change_Cannon_Ret::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Change_Cannon_Ret";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Cast_Nets_Success::kCbCountFieldNumber;
const int SGOMs_Cast_Nets_Success::kCbChairIDFieldNumber;
const int SGOMs_Cast_Nets_Success::kTotalGoinFieldNumber;
const int SGOMs_Cast_Nets_Success::kAddGoinFieldNumber;
const int SGOMs_Cast_Nets_Success::kFishIDsFieldNumber;
#endif  // !_MSC_VER

SGOMs_Cast_Nets_Success::SGOMs_Cast_Nets_Success()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Cast_Nets_Success)
}

void SGOMs_Cast_Nets_Success::InitAsDefaultInstance() {
}

SGOMs_Cast_Nets_Success::SGOMs_Cast_Nets_Success(const SGOMs_Cast_Nets_Success& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Cast_Nets_Success)
}

void SGOMs_Cast_Nets_Success::SharedCtor() {
  _cached_size_ = 0;
  cbcount_ = 0;
  cbchairid_ = 0;
  totalgoin_ = 0;
  addgoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Cast_Nets_Success::~SGOMs_Cast_Nets_Success() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Cast_Nets_Success)
  SharedDtor();
}

void SGOMs_Cast_Nets_Success::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Cast_Nets_Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Cast_Nets_Success& SGOMs_Cast_Nets_Success::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Cast_Nets_Success* SGOMs_Cast_Nets_Success::default_instance_ = NULL;

SGOMs_Cast_Nets_Success* SGOMs_Cast_Nets_Success::New() const {
  return new SGOMs_Cast_Nets_Success;
}

void SGOMs_Cast_Nets_Success::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_Cast_Nets_Success*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cbcount_, addgoin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Cast_Nets_Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Cast_Nets_Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbChairID;
        break;
      }

      // required int32 cbChairID = 2;
      case 2: {
        if (tag == 16) {
         parse_cbChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchairid_)));
          set_has_cbchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalGoin;
        break;
      }

      // required int32 totalGoin = 3;
      case 3: {
        if (tag == 24) {
         parse_totalGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgoin_)));
          set_has_totalgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_addGoin;
        break;
      }

      // required int32 addGoin = 4;
      case 4: {
        if (tag == 32) {
         parse_addGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgoin_)));
          set_has_addgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
      case 6: {
        if (tag == 50) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Cast_Nets_Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Cast_Nets_Success)
  return false;
#undef DO_
}

void SGOMs_Cast_Nets_Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Cast_Nets_Success)
  // required int32 cbCount = 1;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbcount(), output);
  }

  // required int32 cbChairID = 2;
  if (has_cbchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbchairid(), output);
  }

  // required int32 totalGoin = 3;
  if (has_totalgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalgoin(), output);
  }

  // required int32 addGoin = 4;
  if (has_addgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addgoin(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Cast_Nets_Success)
}

int SGOMs_Cast_Nets_Success::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbCount = 1;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required int32 cbChairID = 2;
    if (has_cbchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchairid());
    }

    // required int32 totalGoin = 3;
    if (has_totalgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgoin());
    }

    // required int32 addGoin = 4;
    if (has_addgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgoin());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Cast_Nets_Success::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Cast_Nets_Success*>(&from));
}

void SGOMs_Cast_Nets_Success::MergeFrom(const SGOMs_Cast_Nets_Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_cbchairid()) {
      set_cbchairid(from.cbchairid());
    }
    if (from.has_totalgoin()) {
      set_totalgoin(from.totalgoin());
    }
    if (from.has_addgoin()) {
      set_addgoin(from.addgoin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Cast_Nets_Success::CopyFrom(const SGOMs_Cast_Nets_Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Cast_Nets_Success::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void SGOMs_Cast_Nets_Success::Swap(SGOMs_Cast_Nets_Success* other) {
  if (other != this) {
    std::swap(cbcount_, other->cbcount_);
    std::swap(cbchairid_, other->cbchairid_);
    std::swap(totalgoin_, other->totalgoin_);
    std::swap(addgoin_, other->addgoin_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Cast_Nets_Success::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Cast_Nets_Success";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Get_ItemLock::kGameIDFieldNumber;
#endif  // !_MSC_VER

SGOMs_Get_ItemLock::SGOMs_Get_ItemLock()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Get_ItemLock)
}

void SGOMs_Get_ItemLock::InitAsDefaultInstance() {
}

SGOMs_Get_ItemLock::SGOMs_Get_ItemLock(const SGOMs_Get_ItemLock& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Get_ItemLock)
}

void SGOMs_Get_ItemLock::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Get_ItemLock::~SGOMs_Get_ItemLock() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Get_ItemLock)
  SharedDtor();
}

void SGOMs_Get_ItemLock::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Get_ItemLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Get_ItemLock& SGOMs_Get_ItemLock::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Get_ItemLock* SGOMs_Get_ItemLock::default_instance_ = NULL;

SGOMs_Get_ItemLock* SGOMs_Get_ItemLock::New() const {
  return new SGOMs_Get_ItemLock;
}

void SGOMs_Get_ItemLock::Clear() {
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Get_ItemLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Get_ItemLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Get_ItemLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Get_ItemLock)
  return false;
#undef DO_
}

void SGOMs_Get_ItemLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Get_ItemLock)
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Get_ItemLock)
}

int SGOMs_Get_ItemLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Get_ItemLock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Get_ItemLock*>(&from));
}

void SGOMs_Get_ItemLock::MergeFrom(const SGOMs_Get_ItemLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Get_ItemLock::CopyFrom(const SGOMs_Get_ItemLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Get_ItemLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SGOMs_Get_ItemLock::Swap(SGOMs_Get_ItemLock* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Get_ItemLock::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Get_ItemLock";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_Get_ItemStop::kGameIDFieldNumber;
#endif  // !_MSC_VER

SGOMs_Get_ItemStop::SGOMs_Get_ItemStop()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_Get_ItemStop)
}

void SGOMs_Get_ItemStop::InitAsDefaultInstance() {
}

SGOMs_Get_ItemStop::SGOMs_Get_ItemStop(const SGOMs_Get_ItemStop& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_Get_ItemStop)
}

void SGOMs_Get_ItemStop::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_Get_ItemStop::~SGOMs_Get_ItemStop() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_Get_ItemStop)
  SharedDtor();
}

void SGOMs_Get_ItemStop::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SGOMs_Get_ItemStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_Get_ItemStop& SGOMs_Get_ItemStop::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_Get_ItemStop* SGOMs_Get_ItemStop::default_instance_ = NULL;

SGOMs_Get_ItemStop* SGOMs_Get_ItemStop::New() const {
  return new SGOMs_Get_ItemStop;
}

void SGOMs_Get_ItemStop::Clear() {
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_Get_ItemStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_Get_ItemStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_Get_ItemStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_Get_ItemStop)
  return false;
#undef DO_
}

void SGOMs_Get_ItemStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_Get_ItemStop)
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_Get_ItemStop)
}

int SGOMs_Get_ItemStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_Get_ItemStop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_Get_ItemStop*>(&from));
}

void SGOMs_Get_ItemStop::MergeFrom(const SGOMs_Get_ItemStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_Get_ItemStop::CopyFrom(const SGOMs_Get_ItemStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_Get_ItemStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SGOMs_Get_ItemStop::Swap(SGOMs_Get_ItemStop* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_Get_ItemStop::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_Get_ItemStop";
}


// ===================================================================

#ifndef _MSC_VER
const int COGMs_OnFire::kFRoteFieldNumber;
const int COGMs_OnFire::kCanonlvFieldNumber;
#endif  // !_MSC_VER

COGMs_OnFire::COGMs_OnFire()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COGMs_OnFire)
}

void COGMs_OnFire::InitAsDefaultInstance() {
}

COGMs_OnFire::COGMs_OnFire(const COGMs_OnFire& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COGMs_OnFire)
}

void COGMs_OnFire::SharedCtor() {
  _cached_size_ = 0;
  frote_ = 0;
  canonlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COGMs_OnFire::~COGMs_OnFire() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COGMs_OnFire)
  SharedDtor();
}

void COGMs_OnFire::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void COGMs_OnFire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COGMs_OnFire& COGMs_OnFire::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

COGMs_OnFire* COGMs_OnFire::default_instance_ = NULL;

COGMs_OnFire* COGMs_OnFire::New() const {
  return new COGMs_OnFire;
}

void COGMs_OnFire::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<COGMs_OnFire*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frote_, canonlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COGMs_OnFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COGMs_OnFire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float fRote = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frote_)));
          set_has_frote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canonlv;
        break;
      }

      // required int32 canonlv = 2;
      case 2: {
        if (tag == 16) {
         parse_canonlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canonlv_)));
          set_has_canonlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COGMs_OnFire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COGMs_OnFire)
  return false;
#undef DO_
}

void COGMs_OnFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COGMs_OnFire)
  // required float fRote = 1;
  if (has_frote()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frote(), output);
  }

  // required int32 canonlv = 2;
  if (has_canonlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canonlv(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COGMs_OnFire)
}

int COGMs_OnFire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float fRote = 1;
    if (has_frote()) {
      total_size += 1 + 4;
    }

    // required int32 canonlv = 2;
    if (has_canonlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canonlv());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COGMs_OnFire::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COGMs_OnFire*>(&from));
}

void COGMs_OnFire::MergeFrom(const COGMs_OnFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frote()) {
      set_frote(from.frote());
    }
    if (from.has_canonlv()) {
      set_canonlv(from.canonlv());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COGMs_OnFire::CopyFrom(const COGMs_OnFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COGMs_OnFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void COGMs_OnFire::Swap(COGMs_OnFire* other) {
  if (other != this) {
    std::swap(frote_, other->frote_);
    std::swap(canonlv_, other->canonlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COGMs_OnFire::GetTypeName() const {
  return "com.game.Protobuf.COGMs_OnFire";
}


// ===================================================================

#ifndef _MSC_VER
const int COGMs_Cast_Nets::kCbCountFieldNumber;
const int COGMs_Cast_Nets::kWRatioFieldNumber;
const int COGMs_Cast_Nets::kFishIDsFieldNumber;
#endif  // !_MSC_VER

COGMs_Cast_Nets::COGMs_Cast_Nets()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COGMs_Cast_Nets)
}

void COGMs_Cast_Nets::InitAsDefaultInstance() {
}

COGMs_Cast_Nets::COGMs_Cast_Nets(const COGMs_Cast_Nets& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COGMs_Cast_Nets)
}

void COGMs_Cast_Nets::SharedCtor() {
  _cached_size_ = 0;
  cbcount_ = 0;
  wratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COGMs_Cast_Nets::~COGMs_Cast_Nets() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COGMs_Cast_Nets)
  SharedDtor();
}

void COGMs_Cast_Nets::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void COGMs_Cast_Nets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COGMs_Cast_Nets& COGMs_Cast_Nets::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

COGMs_Cast_Nets* COGMs_Cast_Nets::default_instance_ = NULL;

COGMs_Cast_Nets* COGMs_Cast_Nets::New() const {
  return new COGMs_Cast_Nets;
}

void COGMs_Cast_Nets::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<COGMs_Cast_Nets*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cbcount_, wratio_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COGMs_Cast_Nets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COGMs_Cast_Nets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wRatio;
        break;
      }

      // required int32 wRatio = 2;
      case 2: {
        if (tag == 16) {
         parse_wRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wratio_)));
          set_has_wratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
      case 3: {
        if (tag == 26) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COGMs_Cast_Nets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COGMs_Cast_Nets)
  return false;
#undef DO_
}

void COGMs_Cast_Nets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COGMs_Cast_Nets)
  // required int32 cbCount = 1;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbcount(), output);
  }

  // required int32 wRatio = 2;
  if (has_wratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wratio(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COGMs_Cast_Nets)
}

int COGMs_Cast_Nets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbCount = 1;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required int32 wRatio = 2;
    if (has_wratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wratio());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COGMs_Cast_Nets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COGMs_Cast_Nets*>(&from));
}

void COGMs_Cast_Nets::MergeFrom(const COGMs_Cast_Nets& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_wratio()) {
      set_wratio(from.wratio());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COGMs_Cast_Nets::CopyFrom(const COGMs_Cast_Nets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COGMs_Cast_Nets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void COGMs_Cast_Nets::Swap(COGMs_Cast_Nets* other) {
  if (other != this) {
    std::swap(cbcount_, other->cbcount_);
    std::swap(wratio_, other->wratio_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COGMs_Cast_Nets::GetTypeName() const {
  return "com.game.Protobuf.COGMs_Cast_Nets";
}


// ===================================================================

#ifndef _MSC_VER
const int COGMs_HitTeam::kCbCountFieldNumber;
const int COGMs_HitTeam::kHitFishFieldNumber;
const int COGMs_HitTeam::kFishIDsFieldNumber;
#endif  // !_MSC_VER

COGMs_HitTeam::COGMs_HitTeam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COGMs_HitTeam)
}

void COGMs_HitTeam::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(
      ::com::game::Protobuf::Fish_Object::internal_default_instance());
#else
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(&::com::game::Protobuf::Fish_Object::default_instance());
#endif
}

COGMs_HitTeam::COGMs_HitTeam(const COGMs_HitTeam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COGMs_HitTeam)
}

void COGMs_HitTeam::SharedCtor() {
  _cached_size_ = 0;
  cbcount_ = 0;
  hitfish_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COGMs_HitTeam::~COGMs_HitTeam() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COGMs_HitTeam)
  SharedDtor();
}

void COGMs_HitTeam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hitfish_;
  }
}

void COGMs_HitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COGMs_HitTeam& COGMs_HitTeam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

COGMs_HitTeam* COGMs_HitTeam::default_instance_ = NULL;

COGMs_HitTeam* COGMs_HitTeam::New() const {
  return new COGMs_HitTeam;
}

void COGMs_HitTeam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cbcount_ = 0;
    if (has_hitfish()) {
      if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
    }
  }
  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COGMs_HitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COGMs_HitTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hitFish;
        break;
      }

      // required .com.game.Protobuf.Fish_Object hitFish = 2;
      case 2: {
        if (tag == 18) {
         parse_hitFish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitfish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Net_Object FishIDs = 3;
      case 3: {
        if (tag == 26) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COGMs_HitTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COGMs_HitTeam)
  return false;
#undef DO_
}

void COGMs_HitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COGMs_HitTeam)
  // required int32 cbCount = 1;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbcount(), output);
  }

  // required .com.game.Protobuf.Fish_Object hitFish = 2;
  if (has_hitfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->hitfish(), output);
  }

  // repeated .com.game.Protobuf.Net_Object FishIDs = 3;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COGMs_HitTeam)
}

int COGMs_HitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbCount = 1;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required .com.game.Protobuf.Fish_Object hitFish = 2;
    if (has_hitfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitfish());
    }

  }
  // repeated .com.game.Protobuf.Net_Object FishIDs = 3;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COGMs_HitTeam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COGMs_HitTeam*>(&from));
}

void COGMs_HitTeam::MergeFrom(const COGMs_HitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_hitfish()) {
      mutable_hitfish()->::com::game::Protobuf::Fish_Object::MergeFrom(from.hitfish());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COGMs_HitTeam::CopyFrom(const COGMs_HitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COGMs_HitTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hitfish()) {
    if (!this->hitfish().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void COGMs_HitTeam::Swap(COGMs_HitTeam* other) {
  if (other != this) {
    std::swap(cbcount_, other->cbcount_);
    std::swap(hitfish_, other->hitfish_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COGMs_HitTeam::GetTypeName() const {
  return "com.game.Protobuf.COGMs_HitTeam";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_HitTeam_Success::kCbCountFieldNumber;
const int SGOMs_HitTeam_Success::kCbChairIDFieldNumber;
const int SGOMs_HitTeam_Success::kTotalGoinFieldNumber;
const int SGOMs_HitTeam_Success::kAddGoinFieldNumber;
const int SGOMs_HitTeam_Success::kHitFishFieldNumber;
const int SGOMs_HitTeam_Success::kFishIDsFieldNumber;
#endif  // !_MSC_VER

SGOMs_HitTeam_Success::SGOMs_HitTeam_Success()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_HitTeam_Success)
}

void SGOMs_HitTeam_Success::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(
      ::com::game::Protobuf::Fish_Object::internal_default_instance());
#else
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(&::com::game::Protobuf::Fish_Object::default_instance());
#endif
}

SGOMs_HitTeam_Success::SGOMs_HitTeam_Success(const SGOMs_HitTeam_Success& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_HitTeam_Success)
}

void SGOMs_HitTeam_Success::SharedCtor() {
  _cached_size_ = 0;
  cbcount_ = 0;
  cbchairid_ = 0;
  totalgoin_ = 0;
  addgoin_ = 0;
  hitfish_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_HitTeam_Success::~SGOMs_HitTeam_Success() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_HitTeam_Success)
  SharedDtor();
}

void SGOMs_HitTeam_Success::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hitfish_;
  }
}

void SGOMs_HitTeam_Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_HitTeam_Success& SGOMs_HitTeam_Success::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_HitTeam_Success* SGOMs_HitTeam_Success::default_instance_ = NULL;

SGOMs_HitTeam_Success* SGOMs_HitTeam_Success::New() const {
  return new SGOMs_HitTeam_Success;
}

void SGOMs_HitTeam_Success::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_HitTeam_Success*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cbcount_, addgoin_);
    if (has_hitfish()) {
      if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_HitTeam_Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_HitTeam_Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbChairID;
        break;
      }

      // required int32 cbChairID = 2;
      case 2: {
        if (tag == 16) {
         parse_cbChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchairid_)));
          set_has_cbchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalGoin;
        break;
      }

      // required int32 totalGoin = 3;
      case 3: {
        if (tag == 24) {
         parse_totalGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgoin_)));
          set_has_totalgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_addGoin;
        break;
      }

      // required int32 addGoin = 4;
      case 4: {
        if (tag == 32) {
         parse_addGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgoin_)));
          set_has_addgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hitFish;
        break;
      }

      // required .com.game.Protobuf.Fish_Object hitFish = 5;
      case 5: {
        if (tag == 42) {
         parse_hitFish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitfish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Net_Object FishIDs = 6;
      case 6: {
        if (tag == 50) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_HitTeam_Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_HitTeam_Success)
  return false;
#undef DO_
}

void SGOMs_HitTeam_Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_HitTeam_Success)
  // required int32 cbCount = 1;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbcount(), output);
  }

  // required int32 cbChairID = 2;
  if (has_cbchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbchairid(), output);
  }

  // required int32 totalGoin = 3;
  if (has_totalgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalgoin(), output);
  }

  // required int32 addGoin = 4;
  if (has_addgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addgoin(), output);
  }

  // required .com.game.Protobuf.Fish_Object hitFish = 5;
  if (has_hitfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->hitfish(), output);
  }

  // repeated .com.game.Protobuf.Net_Object FishIDs = 6;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_HitTeam_Success)
}

int SGOMs_HitTeam_Success::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbCount = 1;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required int32 cbChairID = 2;
    if (has_cbchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchairid());
    }

    // required int32 totalGoin = 3;
    if (has_totalgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgoin());
    }

    // required int32 addGoin = 4;
    if (has_addgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgoin());
    }

    // required .com.game.Protobuf.Fish_Object hitFish = 5;
    if (has_hitfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitfish());
    }

  }
  // repeated .com.game.Protobuf.Net_Object FishIDs = 6;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_HitTeam_Success::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_HitTeam_Success*>(&from));
}

void SGOMs_HitTeam_Success::MergeFrom(const SGOMs_HitTeam_Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_cbchairid()) {
      set_cbchairid(from.cbchairid());
    }
    if (from.has_totalgoin()) {
      set_totalgoin(from.totalgoin());
    }
    if (from.has_addgoin()) {
      set_addgoin(from.addgoin());
    }
    if (from.has_hitfish()) {
      mutable_hitfish()->::com::game::Protobuf::Fish_Object::MergeFrom(from.hitfish());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_HitTeam_Success::CopyFrom(const SGOMs_HitTeam_Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_HitTeam_Success::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_hitfish()) {
    if (!this->hitfish().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void SGOMs_HitTeam_Success::Swap(SGOMs_HitTeam_Success* other) {
  if (other != this) {
    std::swap(cbcount_, other->cbcount_);
    std::swap(cbchairid_, other->cbchairid_);
    std::swap(totalgoin_, other->totalgoin_);
    std::swap(addgoin_, other->addgoin_);
    std::swap(hitfish_, other->hitfish_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_HitTeam_Success::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_HitTeam_Success";
}


// ===================================================================

#ifndef _MSC_VER
const int COGMs_HitSceenBomb::kWRatioFieldNumber;
const int COGMs_HitSceenBomb::kCbCountFieldNumber;
const int COGMs_HitSceenBomb::kFishIDsFieldNumber;
#endif  // !_MSC_VER

COGMs_HitSceenBomb::COGMs_HitSceenBomb()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COGMs_HitSceenBomb)
}

void COGMs_HitSceenBomb::InitAsDefaultInstance() {
}

COGMs_HitSceenBomb::COGMs_HitSceenBomb(const COGMs_HitSceenBomb& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COGMs_HitSceenBomb)
}

void COGMs_HitSceenBomb::SharedCtor() {
  _cached_size_ = 0;
  wratio_ = 0;
  cbcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COGMs_HitSceenBomb::~COGMs_HitSceenBomb() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COGMs_HitSceenBomb)
  SharedDtor();
}

void COGMs_HitSceenBomb::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void COGMs_HitSceenBomb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COGMs_HitSceenBomb& COGMs_HitSceenBomb::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

COGMs_HitSceenBomb* COGMs_HitSceenBomb::default_instance_ = NULL;

COGMs_HitSceenBomb* COGMs_HitSceenBomb::New() const {
  return new COGMs_HitSceenBomb;
}

void COGMs_HitSceenBomb::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<COGMs_HitSceenBomb*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wratio_, cbcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COGMs_HitSceenBomb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COGMs_HitSceenBomb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wRatio = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wratio_)));
          set_has_wratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbCount;
        break;
      }

      // required int32 cbCount = 2;
      case 2: {
        if (tag == 16) {
         parse_cbCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
      case 3: {
        if (tag == 26) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COGMs_HitSceenBomb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COGMs_HitSceenBomb)
  return false;
#undef DO_
}

void COGMs_HitSceenBomb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COGMs_HitSceenBomb)
  // required int32 wRatio = 1;
  if (has_wratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wratio(), output);
  }

  // required int32 cbCount = 2;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbcount(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COGMs_HitSceenBomb)
}

int COGMs_HitSceenBomb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wRatio = 1;
    if (has_wratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wratio());
    }

    // required int32 cbCount = 2;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COGMs_HitSceenBomb::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COGMs_HitSceenBomb*>(&from));
}

void COGMs_HitSceenBomb::MergeFrom(const COGMs_HitSceenBomb& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wratio()) {
      set_wratio(from.wratio());
    }
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COGMs_HitSceenBomb::CopyFrom(const COGMs_HitSceenBomb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COGMs_HitSceenBomb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void COGMs_HitSceenBomb::Swap(COGMs_HitSceenBomb* other) {
  if (other != this) {
    std::swap(wratio_, other->wratio_);
    std::swap(cbcount_, other->cbcount_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COGMs_HitSceenBomb::GetTypeName() const {
  return "com.game.Protobuf.COGMs_HitSceenBomb";
}


// ===================================================================

#ifndef _MSC_VER
const int SGOMs_HitSceenBomb_Success::kCbCountFieldNumber;
const int SGOMs_HitSceenBomb_Success::kCbChairIDFieldNumber;
const int SGOMs_HitSceenBomb_Success::kTotalGoinFieldNumber;
const int SGOMs_HitSceenBomb_Success::kAddGoinFieldNumber;
const int SGOMs_HitSceenBomb_Success::kHitFishFieldNumber;
const int SGOMs_HitSceenBomb_Success::kFishIDsFieldNumber;
#endif  // !_MSC_VER

SGOMs_HitSceenBomb_Success::SGOMs_HitSceenBomb_Success()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
}

void SGOMs_HitSceenBomb_Success::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(
      ::com::game::Protobuf::Fish_Object::internal_default_instance());
#else
  hitfish_ = const_cast< ::com::game::Protobuf::Fish_Object*>(&::com::game::Protobuf::Fish_Object::default_instance());
#endif
}

SGOMs_HitSceenBomb_Success::SGOMs_HitSceenBomb_Success(const SGOMs_HitSceenBomb_Success& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
}

void SGOMs_HitSceenBomb_Success::SharedCtor() {
  _cached_size_ = 0;
  cbcount_ = 0;
  cbchairid_ = 0;
  totalgoin_ = 0;
  addgoin_ = 0;
  hitfish_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGOMs_HitSceenBomb_Success::~SGOMs_HitSceenBomb_Success() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
  SharedDtor();
}

void SGOMs_HitSceenBomb_Success::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hitfish_;
  }
}

void SGOMs_HitSceenBomb_Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SGOMs_HitSceenBomb_Success& SGOMs_HitSceenBomb_Success::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GameServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
#endif
  return *default_instance_;
}

SGOMs_HitSceenBomb_Success* SGOMs_HitSceenBomb_Success::default_instance_ = NULL;

SGOMs_HitSceenBomb_Success* SGOMs_HitSceenBomb_Success::New() const {
  return new SGOMs_HitSceenBomb_Success;
}

void SGOMs_HitSceenBomb_Success::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGOMs_HitSceenBomb_Success*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cbcount_, addgoin_);
    if (has_hitfish()) {
      if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SGOMs_HitSceenBomb_Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcount_)));
          set_has_cbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbChairID;
        break;
      }

      // required int32 cbChairID = 2;
      case 2: {
        if (tag == 16) {
         parse_cbChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchairid_)));
          set_has_cbchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalGoin;
        break;
      }

      // required int32 totalGoin = 3;
      case 3: {
        if (tag == 24) {
         parse_totalGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgoin_)));
          set_has_totalgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_addGoin;
        break;
      }

      // required int32 addGoin = 4;
      case 4: {
        if (tag == 32) {
         parse_addGoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgoin_)));
          set_has_addgoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hitFish;
        break;
      }

      // required .com.game.Protobuf.Fish_Object hitFish = 5;
      case 5: {
        if (tag == 42) {
         parse_hitFish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitfish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        break;
      }

      // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
      case 6: {
        if (tag == 50) {
         parse_FishIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FishIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
  return false;
#undef DO_
}

void SGOMs_HitSceenBomb_Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
  // required int32 cbCount = 1;
  if (has_cbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbcount(), output);
  }

  // required int32 cbChairID = 2;
  if (has_cbchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbchairid(), output);
  }

  // required int32 totalGoin = 3;
  if (has_totalgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalgoin(), output);
  }

  // required int32 addGoin = 4;
  if (has_addgoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addgoin(), output);
  }

  // required .com.game.Protobuf.Fish_Object hitFish = 5;
  if (has_hitfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->hitfish(), output);
  }

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  for (int i = 0; i < this->fishids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fishids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
}

int SGOMs_HitSceenBomb_Success::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbCount = 1;
    if (has_cbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcount());
    }

    // required int32 cbChairID = 2;
    if (has_cbchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchairid());
    }

    // required int32 totalGoin = 3;
    if (has_totalgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgoin());
    }

    // required int32 addGoin = 4;
    if (has_addgoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgoin());
    }

    // required .com.game.Protobuf.Fish_Object hitFish = 5;
    if (has_hitfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitfish());
    }

  }
  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  total_size += 1 * this->fishids_size();
  for (int i = 0; i < this->fishids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGOMs_HitSceenBomb_Success::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SGOMs_HitSceenBomb_Success*>(&from));
}

void SGOMs_HitSceenBomb_Success::MergeFrom(const SGOMs_HitSceenBomb_Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishids_.MergeFrom(from.fishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbcount()) {
      set_cbcount(from.cbcount());
    }
    if (from.has_cbchairid()) {
      set_cbchairid(from.cbchairid());
    }
    if (from.has_totalgoin()) {
      set_totalgoin(from.totalgoin());
    }
    if (from.has_addgoin()) {
      set_addgoin(from.addgoin());
    }
    if (from.has_hitfish()) {
      mutable_hitfish()->::com::game::Protobuf::Fish_Object::MergeFrom(from.hitfish());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SGOMs_HitSceenBomb_Success::CopyFrom(const SGOMs_HitSceenBomb_Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGOMs_HitSceenBomb_Success::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_hitfish()) {
    if (!this->hitfish().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->fishids())) return false;
  return true;
}

void SGOMs_HitSceenBomb_Success::Swap(SGOMs_HitSceenBomb_Success* other) {
  if (other != this) {
    std::swap(cbcount_, other->cbcount_);
    std::swap(cbchairid_, other->cbchairid_);
    std::swap(totalgoin_, other->totalgoin_);
    std::swap(addgoin_, other->addgoin_);
    std::swap(hitfish_, other->hitfish_);
    fishids_.Swap(&other->fishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SGOMs_HitSceenBomb_Success::GetTypeName() const {
  return "com.game.Protobuf.SGOMs_HitSceenBomb_Success";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
