// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CenterServer.proto

#ifndef PROTOBUF_CenterServer_2eproto__INCLUDED
#define PROTOBUF_CenterServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CenterServer_2eproto();
void protobuf_AssignDesc_CenterServer_2eproto();
void protobuf_ShutdownFile_CenterServer_2eproto();

class ServerC;
class CGCMsRegisterServer;
class COCMSTokeValidate;
class SCOMsPlayerInfo;
class SCOMsRoomList;

// ===================================================================

class ServerC : public ::google::protobuf::MessageLite {
 public:
  ServerC();
  virtual ~ServerC();

  ServerC(const ServerC& from);

  inline ServerC& operator=(const ServerC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ServerC& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerC* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerC* other);

  // implements Message ----------------------------------------------

  ServerC* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerC& from);
  void MergeFrom(const ServerC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // required int32 recommend = 6;
  inline bool has_recommend() const;
  inline void clear_recommend();
  static const int kRecommendFieldNumber = 6;
  inline ::google::protobuf::int32 recommend() const;
  inline void set_recommend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.ServerC)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_recommend();
  inline void clear_has_recommend();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  ::std::string* ip_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 recommend_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CenterServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CenterServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_CenterServer_2eproto();
  friend void protobuf_ShutdownFile_CenterServer_2eproto();

  void InitAsDefaultInstance();
  static ServerC* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsRegisterServer : public ::google::protobuf::MessageLite {
 public:
  CGCMsRegisterServer();
  virtual ~CGCMsRegisterServer();

  CGCMsRegisterServer(const CGCMsRegisterServer& from);

  inline CGCMsRegisterServer& operator=(const CGCMsRegisterServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CGCMsRegisterServer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CGCMsRegisterServer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CGCMsRegisterServer* other);

  // implements Message ----------------------------------------------

  CGCMsRegisterServer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CGCMsRegisterServer& from);
  void MergeFrom(const CGCMsRegisterServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.game.Protobuf.ServerC server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::com::game::Protobuf::ServerC& server() const;
  inline ::com::game::Protobuf::ServerC* mutable_server();
  inline ::com::game::Protobuf::ServerC* release_server();
  inline void set_allocated_server(::com::game::Protobuf::ServerC* server);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.CGCMsRegisterServer)
 private:
  inline void set_has_server();
  inline void clear_has_server();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::game::Protobuf::ServerC* server_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CenterServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CenterServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_CenterServer_2eproto();
  friend void protobuf_ShutdownFile_CenterServer_2eproto();

  void InitAsDefaultInstance();
  static CGCMsRegisterServer* default_instance_;
};
// -------------------------------------------------------------------

class COCMSTokeValidate : public ::google::protobuf::MessageLite {
 public:
  COCMSTokeValidate();
  virtual ~COCMSTokeValidate();

  COCMSTokeValidate(const COCMSTokeValidate& from);

  inline COCMSTokeValidate& operator=(const COCMSTokeValidate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COCMSTokeValidate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COCMSTokeValidate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COCMSTokeValidate* other);

  // implements Message ----------------------------------------------

  COCMSTokeValidate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COCMSTokeValidate& from);
  void MergeFrom(const COCMSTokeValidate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string gameID = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 2;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COCMSTokeValidate)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::std::string* gameid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CenterServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CenterServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_CenterServer_2eproto();
  friend void protobuf_ShutdownFile_CenterServer_2eproto();

  void InitAsDefaultInstance();
  static COCMSTokeValidate* default_instance_;
};
// -------------------------------------------------------------------

class SCOMsPlayerInfo : public ::google::protobuf::MessageLite {
 public:
  SCOMsPlayerInfo();
  virtual ~SCOMsPlayerInfo();

  SCOMsPlayerInfo(const SCOMsPlayerInfo& from);

  inline SCOMsPlayerInfo& operator=(const SCOMsPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SCOMsPlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCOMsPlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCOMsPlayerInfo* other);

  // implements Message ----------------------------------------------

  SCOMsPlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCOMsPlayerInfo& from);
  void MergeFrom(const SCOMsPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int32 diamonds = 2;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 2;
  inline ::google::protobuf::int32 diamonds() const;
  inline void set_diamonds(::google::protobuf::int32 value);

  // required bool ischangePwd = 3;
  inline bool has_ischangepwd() const;
  inline void clear_ischangepwd();
  static const int kIschangePwdFieldNumber = 3;
  inline bool ischangepwd() const;
  inline void set_ischangepwd(bool value);

  // required int32 Prop1 = 4;
  inline bool has_prop1() const;
  inline void clear_prop1();
  static const int kProp1FieldNumber = 4;
  inline ::google::protobuf::int32 prop1() const;
  inline void set_prop1(::google::protobuf::int32 value);

  // required int32 Prop2 = 5;
  inline bool has_prop2() const;
  inline void clear_prop2();
  static const int kProp2FieldNumber = 5;
  inline ::google::protobuf::int32 prop2() const;
  inline void set_prop2(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.ServerC server = 6;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 6;
  inline const ::com::game::Protobuf::ServerC& server(int index) const;
  inline ::com::game::Protobuf::ServerC* mutable_server(int index);
  inline ::com::game::Protobuf::ServerC* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::ServerC >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::ServerC >*
      mutable_server();

  // optional int32 nickName = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 7;
  inline ::google::protobuf::int32 nickname() const;
  inline void set_nickname(::google::protobuf::int32 value);

  // optional int32 headID = 8;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 8;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // optional int32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SCOMsPlayerInfo)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_ischangepwd();
  inline void clear_has_ischangepwd();
  inline void set_has_prop1();
  inline void clear_has_prop1();
  inline void set_has_prop2();
  inline void clear_has_prop2();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_level();
  inline void clear_has_level();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamonds_;
  bool ischangepwd_;
  ::google::protobuf::int32 prop1_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::ServerC > server_;
  ::google::protobuf::int32 prop2_;
  ::google::protobuf::int32 nickname_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 level_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CenterServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CenterServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_CenterServer_2eproto();
  friend void protobuf_ShutdownFile_CenterServer_2eproto();

  void InitAsDefaultInstance();
  static SCOMsPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCOMsRoomList : public ::google::protobuf::MessageLite {
 public:
  SCOMsRoomList();
  virtual ~SCOMsRoomList();

  SCOMsRoomList(const SCOMsRoomList& from);

  inline SCOMsRoomList& operator=(const SCOMsRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SCOMsRoomList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCOMsRoomList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCOMsRoomList* other);

  // implements Message ----------------------------------------------

  SCOMsRoomList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCOMsRoomList& from);
  void MergeFrom(const SCOMsRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.game.Protobuf.ServerC server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::com::game::Protobuf::ServerC& server() const;
  inline ::com::game::Protobuf::ServerC* mutable_server();
  inline ::com::game::Protobuf::ServerC* release_server();
  inline void set_allocated_server(::com::game::Protobuf::ServerC* server);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SCOMsRoomList)
 private:
  inline void set_has_server();
  inline void clear_has_server();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::game::Protobuf::ServerC* server_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CenterServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CenterServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_CenterServer_2eproto();
  friend void protobuf_ShutdownFile_CenterServer_2eproto();

  void InitAsDefaultInstance();
  static SCOMsRoomList* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerC

// required int32 id = 1;
inline bool ServerC::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerC::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerC::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerC::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ServerC::id() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.id)
  return id_;
}
inline void ServerC::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.id)
}

// required string name = 2;
inline bool ServerC::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerC::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerC::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerC::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerC::name() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.name)
  return *name_;
}
inline void ServerC::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.name)
}
inline void ServerC::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.ServerC.name)
}
inline void ServerC::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.ServerC.name)
}
inline ::std::string* ServerC::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.ServerC.name)
  return name_;
}
inline ::std::string* ServerC::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerC::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.ServerC.name)
}

// required string ip = 3;
inline bool ServerC::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerC::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerC::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerC::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerC::ip() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.ip)
  return *ip_;
}
inline void ServerC::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.ip)
}
inline void ServerC::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.ServerC.ip)
}
inline void ServerC::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.ServerC.ip)
}
inline ::std::string* ServerC::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.ServerC.ip)
  return ip_;
}
inline ::std::string* ServerC::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerC::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.ServerC.ip)
}

// required int32 port = 4;
inline bool ServerC::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerC::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerC::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerC::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerC::port() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.port)
  return port_;
}
inline void ServerC::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.port)
}

// required int32 number = 5;
inline bool ServerC::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerC::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerC::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerC::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 ServerC::number() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.number)
  return number_;
}
inline void ServerC::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.number)
}

// required int32 recommend = 6;
inline bool ServerC::has_recommend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerC::set_has_recommend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerC::clear_has_recommend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerC::clear_recommend() {
  recommend_ = 0;
  clear_has_recommend();
}
inline ::google::protobuf::int32 ServerC::recommend() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.ServerC.recommend)
  return recommend_;
}
inline void ServerC::set_recommend(::google::protobuf::int32 value) {
  set_has_recommend();
  recommend_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.ServerC.recommend)
}

// -------------------------------------------------------------------

// CGCMsRegisterServer

// required .com.game.Protobuf.ServerC server = 1;
inline bool CGCMsRegisterServer::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCMsRegisterServer::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCMsRegisterServer::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCMsRegisterServer::clear_server() {
  if (server_ != NULL) server_->::com::game::Protobuf::ServerC::Clear();
  clear_has_server();
}
inline const ::com::game::Protobuf::ServerC& CGCMsRegisterServer::server() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.CGCMsRegisterServer.server)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return server_ != NULL ? *server_ : *default_instance().server_;
#else
  return server_ != NULL ? *server_ : *default_instance_->server_;
#endif
}
inline ::com::game::Protobuf::ServerC* CGCMsRegisterServer::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::com::game::Protobuf::ServerC;
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.CGCMsRegisterServer.server)
  return server_;
}
inline ::com::game::Protobuf::ServerC* CGCMsRegisterServer::release_server() {
  clear_has_server();
  ::com::game::Protobuf::ServerC* temp = server_;
  server_ = NULL;
  return temp;
}
inline void CGCMsRegisterServer::set_allocated_server(::com::game::Protobuf::ServerC* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.CGCMsRegisterServer.server)
}

// -------------------------------------------------------------------

// COCMSTokeValidate

// required string token = 1;
inline bool COCMSTokeValidate::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COCMSTokeValidate::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COCMSTokeValidate::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COCMSTokeValidate::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& COCMSTokeValidate::token() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COCMSTokeValidate.token)
  return *token_;
}
inline void COCMSTokeValidate::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COCMSTokeValidate.token)
}
inline void COCMSTokeValidate::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.COCMSTokeValidate.token)
}
inline void COCMSTokeValidate::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.COCMSTokeValidate.token)
}
inline ::std::string* COCMSTokeValidate::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COCMSTokeValidate.token)
  return token_;
}
inline ::std::string* COCMSTokeValidate::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void COCMSTokeValidate::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.COCMSTokeValidate.token)
}

// required string gameID = 2;
inline bool COCMSTokeValidate::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COCMSTokeValidate::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COCMSTokeValidate::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COCMSTokeValidate::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& COCMSTokeValidate::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COCMSTokeValidate.gameID)
  return *gameid_;
}
inline void COCMSTokeValidate::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COCMSTokeValidate.gameID)
}
inline void COCMSTokeValidate::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.COCMSTokeValidate.gameID)
}
inline void COCMSTokeValidate::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.COCMSTokeValidate.gameID)
}
inline ::std::string* COCMSTokeValidate::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COCMSTokeValidate.gameID)
  return gameid_;
}
inline ::std::string* COCMSTokeValidate::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void COCMSTokeValidate::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.COCMSTokeValidate.gameID)
}

// -------------------------------------------------------------------

// SCOMsPlayerInfo

// required int32 gold = 1;
inline bool SCOMsPlayerInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCOMsPlayerInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCOMsPlayerInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCOMsPlayerInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.gold)
  return gold_;
}
inline void SCOMsPlayerInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.gold)
}

// required int32 diamonds = 2;
inline bool SCOMsPlayerInfo::has_diamonds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCOMsPlayerInfo::set_has_diamonds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCOMsPlayerInfo::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCOMsPlayerInfo::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::diamonds() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.diamonds)
  return diamonds_;
}
inline void SCOMsPlayerInfo::set_diamonds(::google::protobuf::int32 value) {
  set_has_diamonds();
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.diamonds)
}

// required bool ischangePwd = 3;
inline bool SCOMsPlayerInfo::has_ischangepwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCOMsPlayerInfo::set_has_ischangepwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCOMsPlayerInfo::clear_has_ischangepwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCOMsPlayerInfo::clear_ischangepwd() {
  ischangepwd_ = false;
  clear_has_ischangepwd();
}
inline bool SCOMsPlayerInfo::ischangepwd() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.ischangePwd)
  return ischangepwd_;
}
inline void SCOMsPlayerInfo::set_ischangepwd(bool value) {
  set_has_ischangepwd();
  ischangepwd_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.ischangePwd)
}

// required int32 Prop1 = 4;
inline bool SCOMsPlayerInfo::has_prop1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCOMsPlayerInfo::set_has_prop1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCOMsPlayerInfo::clear_has_prop1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCOMsPlayerInfo::clear_prop1() {
  prop1_ = 0;
  clear_has_prop1();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::prop1() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.Prop1)
  return prop1_;
}
inline void SCOMsPlayerInfo::set_prop1(::google::protobuf::int32 value) {
  set_has_prop1();
  prop1_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.Prop1)
}

// required int32 Prop2 = 5;
inline bool SCOMsPlayerInfo::has_prop2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCOMsPlayerInfo::set_has_prop2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCOMsPlayerInfo::clear_has_prop2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCOMsPlayerInfo::clear_prop2() {
  prop2_ = 0;
  clear_has_prop2();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::prop2() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.Prop2)
  return prop2_;
}
inline void SCOMsPlayerInfo::set_prop2(::google::protobuf::int32 value) {
  set_has_prop2();
  prop2_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.Prop2)
}

// repeated .com.game.Protobuf.ServerC server = 6;
inline int SCOMsPlayerInfo::server_size() const {
  return server_.size();
}
inline void SCOMsPlayerInfo::clear_server() {
  server_.Clear();
}
inline const ::com::game::Protobuf::ServerC& SCOMsPlayerInfo::server(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.server)
  return server_.Get(index);
}
inline ::com::game::Protobuf::ServerC* SCOMsPlayerInfo::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SCOMsPlayerInfo.server)
  return server_.Mutable(index);
}
inline ::com::game::Protobuf::ServerC* SCOMsPlayerInfo::add_server() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SCOMsPlayerInfo.server)
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::ServerC >&
SCOMsPlayerInfo::server() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SCOMsPlayerInfo.server)
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::ServerC >*
SCOMsPlayerInfo::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SCOMsPlayerInfo.server)
  return &server_;
}

// optional int32 nickName = 7;
inline bool SCOMsPlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCOMsPlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCOMsPlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCOMsPlayerInfo::clear_nickname() {
  nickname_ = 0;
  clear_has_nickname();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.nickName)
  return nickname_;
}
inline void SCOMsPlayerInfo::set_nickname(::google::protobuf::int32 value) {
  set_has_nickname();
  nickname_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.nickName)
}

// optional int32 headID = 8;
inline bool SCOMsPlayerInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCOMsPlayerInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCOMsPlayerInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCOMsPlayerInfo::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::headid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.headID)
  return headid_;
}
inline void SCOMsPlayerInfo::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.headID)
}

// optional int32 vip = 9;
inline bool SCOMsPlayerInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCOMsPlayerInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCOMsPlayerInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCOMsPlayerInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::vip() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.vip)
  return vip_;
}
inline void SCOMsPlayerInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.vip)
}

// optional int32 level = 10;
inline bool SCOMsPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCOMsPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCOMsPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCOMsPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SCOMsPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsPlayerInfo.level)
  return level_;
}
inline void SCOMsPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCOMsPlayerInfo.level)
}

// -------------------------------------------------------------------

// SCOMsRoomList

// required .com.game.Protobuf.ServerC server = 1;
inline bool SCOMsRoomList::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCOMsRoomList::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCOMsRoomList::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCOMsRoomList::clear_server() {
  if (server_ != NULL) server_->::com::game::Protobuf::ServerC::Clear();
  clear_has_server();
}
inline const ::com::game::Protobuf::ServerC& SCOMsRoomList::server() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCOMsRoomList.server)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return server_ != NULL ? *server_ : *default_instance().server_;
#else
  return server_ != NULL ? *server_ : *default_instance_->server_;
#endif
}
inline ::com::game::Protobuf::ServerC* SCOMsRoomList::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::com::game::Protobuf::ServerC;
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SCOMsRoomList.server)
  return server_;
}
inline ::com::game::Protobuf::ServerC* SCOMsRoomList::release_server() {
  clear_has_server();
  ::com::game::Protobuf::ServerC* temp = server_;
  server_ = NULL;
  return temp;
}
inline void SCOMsRoomList::set_allocated_server(::com::game::Protobuf::ServerC* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.SCOMsRoomList.server)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CenterServer_2eproto__INCLUDED
