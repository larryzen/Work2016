// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CenterServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CenterServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

void protobuf_ShutdownFile_CenterServer_2eproto() {
  delete ServerC::default_instance_;
  delete CGCMsRegisterServer::default_instance_;
  delete COCMSTokeValidate::default_instance_;
  delete SCOMsPlayerInfo::default_instance_;
  delete SCOMsRoomList::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CenterServer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CenterServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServerC::default_instance_ = new ServerC();
  CGCMsRegisterServer::default_instance_ = new CGCMsRegisterServer();
  COCMSTokeValidate::default_instance_ = new COCMSTokeValidate();
  SCOMsPlayerInfo::default_instance_ = new SCOMsPlayerInfo();
  SCOMsRoomList::default_instance_ = new SCOMsRoomList();
  ServerC::default_instance_->InitAsDefaultInstance();
  CGCMsRegisterServer::default_instance_->InitAsDefaultInstance();
  COCMSTokeValidate::default_instance_->InitAsDefaultInstance();
  SCOMsPlayerInfo::default_instance_->InitAsDefaultInstance();
  SCOMsRoomList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CenterServer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CenterServer_2eproto_once_);
void protobuf_AddDesc_CenterServer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CenterServer_2eproto_once_,
                 &protobuf_AddDesc_CenterServer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CenterServer_2eproto {
  StaticDescriptorInitializer_CenterServer_2eproto() {
    protobuf_AddDesc_CenterServer_2eproto();
  }
} static_descriptor_initializer_CenterServer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ServerC::kIdFieldNumber;
const int ServerC::kNameFieldNumber;
const int ServerC::kIpFieldNumber;
const int ServerC::kPortFieldNumber;
const int ServerC::kNumberFieldNumber;
const int ServerC::kRecommendFieldNumber;
#endif  // !_MSC_VER

ServerC::ServerC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.ServerC)
}

void ServerC::InitAsDefaultInstance() {
}

ServerC::ServerC(const ServerC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.ServerC)
}

void ServerC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  number_ = 0;
  recommend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerC::~ServerC() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.ServerC)
  SharedDtor();
}

void ServerC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerC& ServerC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CenterServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CenterServer_2eproto();
#endif
  return *default_instance_;
}

ServerC* ServerC::default_instance_ = NULL;

ServerC* ServerC::New() const {
  return new ServerC;
}

void ServerC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, port_);
    ZR_(number_, recommend_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.ServerC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // required int32 number = 5;
      case 5: {
        if (tag == 40) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_recommend;
        break;
      }

      // required int32 recommend = 6;
      case 6: {
        if (tag == 48) {
         parse_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_)));
          set_has_recommend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.ServerC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.ServerC)
  return false;
#undef DO_
}

void ServerC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.ServerC)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required int32 number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number(), output);
  }

  // required int32 recommend = 6;
  if (has_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recommend(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.ServerC)
}

int ServerC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 recommend = 6;
    if (has_recommend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerC*>(&from));
}

void ServerC::MergeFrom(const ServerC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_recommend()) {
      set_recommend(from.recommend());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerC::CopyFrom(const ServerC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerC::Swap(ServerC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(number_, other->number_);
    std::swap(recommend_, other->recommend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerC::GetTypeName() const {
  return "com.game.Protobuf.ServerC";
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsRegisterServer::kServerFieldNumber;
#endif  // !_MSC_VER

CGCMsRegisterServer::CGCMsRegisterServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CGCMsRegisterServer)
}

void CGCMsRegisterServer::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  server_ = const_cast< ::com::game::Protobuf::ServerC*>(
      ::com::game::Protobuf::ServerC::internal_default_instance());
#else
  server_ = const_cast< ::com::game::Protobuf::ServerC*>(&::com::game::Protobuf::ServerC::default_instance());
#endif
}

CGCMsRegisterServer::CGCMsRegisterServer(const CGCMsRegisterServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CGCMsRegisterServer)
}

void CGCMsRegisterServer::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsRegisterServer::~CGCMsRegisterServer() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CGCMsRegisterServer)
  SharedDtor();
}

void CGCMsRegisterServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete server_;
  }
}

void CGCMsRegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CGCMsRegisterServer& CGCMsRegisterServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CenterServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CenterServer_2eproto();
#endif
  return *default_instance_;
}

CGCMsRegisterServer* CGCMsRegisterServer::default_instance_ = NULL;

CGCMsRegisterServer* CGCMsRegisterServer::New() const {
  return new CGCMsRegisterServer;
}

void CGCMsRegisterServer::Clear() {
  if (has_server()) {
    if (server_ != NULL) server_->::com::game::Protobuf::ServerC::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CGCMsRegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CGCMsRegisterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.game.Protobuf.ServerC server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CGCMsRegisterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CGCMsRegisterServer)
  return false;
#undef DO_
}

void CGCMsRegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CGCMsRegisterServer)
  // required .com.game.Protobuf.ServerC server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->server(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CGCMsRegisterServer)
}

int CGCMsRegisterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.game.Protobuf.ServerC server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsRegisterServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CGCMsRegisterServer*>(&from));
}

void CGCMsRegisterServer::MergeFrom(const CGCMsRegisterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::com::game::Protobuf::ServerC::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CGCMsRegisterServer::CopyFrom(const CGCMsRegisterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsRegisterServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void CGCMsRegisterServer::Swap(CGCMsRegisterServer* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CGCMsRegisterServer::GetTypeName() const {
  return "com.game.Protobuf.CGCMsRegisterServer";
}


// ===================================================================

#ifndef _MSC_VER
const int COCMSTokeValidate::kTokenFieldNumber;
const int COCMSTokeValidate::kGameIDFieldNumber;
#endif  // !_MSC_VER

COCMSTokeValidate::COCMSTokeValidate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.COCMSTokeValidate)
}

void COCMSTokeValidate::InitAsDefaultInstance() {
}

COCMSTokeValidate::COCMSTokeValidate(const COCMSTokeValidate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.COCMSTokeValidate)
}

void COCMSTokeValidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COCMSTokeValidate::~COCMSTokeValidate() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.COCMSTokeValidate)
  SharedDtor();
}

void COCMSTokeValidate::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void COCMSTokeValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const COCMSTokeValidate& COCMSTokeValidate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CenterServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CenterServer_2eproto();
#endif
  return *default_instance_;
}

COCMSTokeValidate* COCMSTokeValidate::default_instance_ = NULL;

COCMSTokeValidate* COCMSTokeValidate::New() const {
  return new COCMSTokeValidate;
}

void COCMSTokeValidate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool COCMSTokeValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.COCMSTokeValidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameID;
        break;
      }

      // required string gameID = 2;
      case 2: {
        if (tag == 18) {
         parse_gameID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.COCMSTokeValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.COCMSTokeValidate)
  return false;
#undef DO_
}

void COCMSTokeValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.COCMSTokeValidate)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required string gameID = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.COCMSTokeValidate)
}

int COCMSTokeValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string gameID = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COCMSTokeValidate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const COCMSTokeValidate*>(&from));
}

void COCMSTokeValidate::MergeFrom(const COCMSTokeValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void COCMSTokeValidate::CopyFrom(const COCMSTokeValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COCMSTokeValidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void COCMSTokeValidate::Swap(COCMSTokeValidate* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string COCMSTokeValidate::GetTypeName() const {
  return "com.game.Protobuf.COCMSTokeValidate";
}


// ===================================================================

#ifndef _MSC_VER
const int SCOMsPlayerInfo::kGoldFieldNumber;
const int SCOMsPlayerInfo::kDiamondsFieldNumber;
const int SCOMsPlayerInfo::kIschangePwdFieldNumber;
const int SCOMsPlayerInfo::kProp1FieldNumber;
const int SCOMsPlayerInfo::kProp2FieldNumber;
const int SCOMsPlayerInfo::kServerFieldNumber;
const int SCOMsPlayerInfo::kNickNameFieldNumber;
const int SCOMsPlayerInfo::kHeadIDFieldNumber;
const int SCOMsPlayerInfo::kVipFieldNumber;
const int SCOMsPlayerInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

SCOMsPlayerInfo::SCOMsPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SCOMsPlayerInfo)
}

void SCOMsPlayerInfo::InitAsDefaultInstance() {
}

SCOMsPlayerInfo::SCOMsPlayerInfo(const SCOMsPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SCOMsPlayerInfo)
}

void SCOMsPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  diamonds_ = 0;
  ischangepwd_ = false;
  prop1_ = 0;
  prop2_ = 0;
  nickname_ = 0;
  headid_ = 0;
  vip_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCOMsPlayerInfo::~SCOMsPlayerInfo() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SCOMsPlayerInfo)
  SharedDtor();
}

void SCOMsPlayerInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCOMsPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCOMsPlayerInfo& SCOMsPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CenterServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CenterServer_2eproto();
#endif
  return *default_instance_;
}

SCOMsPlayerInfo* SCOMsPlayerInfo::default_instance_ = NULL;

SCOMsPlayerInfo* SCOMsPlayerInfo::New() const {
  return new SCOMsPlayerInfo;
}

void SCOMsPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SCOMsPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(gold_, prop1_);
    ZR_(prop2_, headid_);
  }
  ZR_(vip_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SCOMsPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SCOMsPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gold = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diamonds;
        break;
      }

      // required int32 diamonds = 2;
      case 2: {
        if (tag == 16) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ischangePwd;
        break;
      }

      // required bool ischangePwd = 3;
      case 3: {
        if (tag == 24) {
         parse_ischangePwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangepwd_)));
          set_has_ischangepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Prop1;
        break;
      }

      // required int32 Prop1 = 4;
      case 4: {
        if (tag == 32) {
         parse_Prop1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop1_)));
          set_has_prop1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Prop2;
        break;
      }

      // required int32 Prop2 = 5;
      case 5: {
        if (tag == 40) {
         parse_Prop2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop2_)));
          set_has_prop2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server;
        break;
      }

      // repeated .com.game.Protobuf.ServerC server = 6;
      case 6: {
        if (tag == 50) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server;
        if (input->ExpectTag(56)) goto parse_nickName;
        break;
      }

      // optional int32 nickName = 7;
      case 7: {
        if (tag == 56) {
         parse_nickName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nickname_)));
          set_has_nickname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_headID;
        break;
      }

      // optional int32 headID = 8;
      case 8: {
        if (tag == 64) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // optional int32 vip = 9;
      case 9: {
        if (tag == 72) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (tag == 80) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SCOMsPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SCOMsPlayerInfo)
  return false;
#undef DO_
}

void SCOMsPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SCOMsPlayerInfo)
  // required int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // required int32 diamonds = 2;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamonds(), output);
  }

  // required bool ischangePwd = 3;
  if (has_ischangepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ischangepwd(), output);
  }

  // required int32 Prop1 = 4;
  if (has_prop1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prop1(), output);
  }

  // required int32 Prop2 = 5;
  if (has_prop2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prop2(), output);
  }

  // repeated .com.game.Protobuf.ServerC server = 6;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->server(i), output);
  }

  // optional int32 nickName = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nickname(), output);
  }

  // optional int32 headID = 8;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headid(), output);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SCOMsPlayerInfo)
}

int SCOMsPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 diamonds = 2;
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamonds());
    }

    // required bool ischangePwd = 3;
    if (has_ischangepwd()) {
      total_size += 1 + 1;
    }

    // required int32 Prop1 = 4;
    if (has_prop1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop1());
    }

    // required int32 Prop2 = 5;
    if (has_prop2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop2());
    }

    // optional int32 nickName = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nickname());
    }

    // optional int32 headID = 8;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .com.game.Protobuf.ServerC server = 6;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCOMsPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCOMsPlayerInfo*>(&from));
}

void SCOMsPlayerInfo::MergeFrom(const SCOMsPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_.MergeFrom(from.server_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_ischangepwd()) {
      set_ischangepwd(from.ischangepwd());
    }
    if (from.has_prop1()) {
      set_prop1(from.prop1());
    }
    if (from.has_prop2()) {
      set_prop2(from.prop2());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SCOMsPlayerInfo::CopyFrom(const SCOMsPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOMsPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->server())) return false;
  return true;
}

void SCOMsPlayerInfo::Swap(SCOMsPlayerInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(ischangepwd_, other->ischangepwd_);
    std::swap(prop1_, other->prop1_);
    std::swap(prop2_, other->prop2_);
    server_.Swap(&other->server_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(vip_, other->vip_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCOMsPlayerInfo::GetTypeName() const {
  return "com.game.Protobuf.SCOMsPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCOMsRoomList::kServerFieldNumber;
#endif  // !_MSC_VER

SCOMsRoomList::SCOMsRoomList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.SCOMsRoomList)
}

void SCOMsRoomList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  server_ = const_cast< ::com::game::Protobuf::ServerC*>(
      ::com::game::Protobuf::ServerC::internal_default_instance());
#else
  server_ = const_cast< ::com::game::Protobuf::ServerC*>(&::com::game::Protobuf::ServerC::default_instance());
#endif
}

SCOMsRoomList::SCOMsRoomList(const SCOMsRoomList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.SCOMsRoomList)
}

void SCOMsRoomList::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCOMsRoomList::~SCOMsRoomList() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.SCOMsRoomList)
  SharedDtor();
}

void SCOMsRoomList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete server_;
  }
}

void SCOMsRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCOMsRoomList& SCOMsRoomList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CenterServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CenterServer_2eproto();
#endif
  return *default_instance_;
}

SCOMsRoomList* SCOMsRoomList::default_instance_ = NULL;

SCOMsRoomList* SCOMsRoomList::New() const {
  return new SCOMsRoomList;
}

void SCOMsRoomList::Clear() {
  if (has_server()) {
    if (server_ != NULL) server_->::com::game::Protobuf::ServerC::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SCOMsRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.SCOMsRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.game.Protobuf.ServerC server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.SCOMsRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.SCOMsRoomList)
  return false;
#undef DO_
}

void SCOMsRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.SCOMsRoomList)
  // required .com.game.Protobuf.ServerC server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->server(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.SCOMsRoomList)
}

int SCOMsRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.game.Protobuf.ServerC server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCOMsRoomList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCOMsRoomList*>(&from));
}

void SCOMsRoomList::MergeFrom(const SCOMsRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::com::game::Protobuf::ServerC::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SCOMsRoomList::CopyFrom(const SCOMsRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOMsRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void SCOMsRoomList::Swap(SCOMsRoomList* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCOMsRoomList::GetTypeName() const {
  return "com.game.Protobuf.SCOMsRoomList";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
