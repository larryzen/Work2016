// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServer.proto

#ifndef PROTOBUF_GameServer_2eproto__INCLUDED
#define PROTOBUF_GameServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameServer_2eproto();
void protobuf_AssignDesc_GameServer_2eproto();
void protobuf_ShutdownFile_GameServer_2eproto();

class SGOMsMapInfo;
class SCGMsPlayerInfo;
class GamePlayerInfo;
class COGMsEntyrGame;
class SGOMsPlayerInfo;
class Fish_Object;
class Net_Object;
class SGOMs_Fish_Path;
class SGOMs_Fish_Group;
class SGOMs_Fire_Success;
class SGOMs_Fire_Failed;
class SGOMs_Change_Cannon_Ret;
class SGOMs_Cast_Nets_Success;
class SGOMs_Get_ItemLock;
class SGOMs_Get_ItemStop;
class COGMs_OnFire;
class COGMs_Cast_Nets;
class COGMs_HitTeam;
class SGOMs_HitTeam_Success;
class COGMs_HitSceenBomb;
class SGOMs_HitSceenBomb_Success;

// ===================================================================

class SGOMsMapInfo : public ::google::protobuf::MessageLite {
 public:
  SGOMsMapInfo();
  virtual ~SGOMsMapInfo();

  SGOMsMapInfo(const SGOMsMapInfo& from);

  inline SGOMsMapInfo& operator=(const SGOMsMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMsMapInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMsMapInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMsMapInfo* other);

  // implements Message ----------------------------------------------

  SGOMsMapInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMsMapInfo& from);
  void MergeFrom(const SGOMsMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMsMapInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 mapid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMsMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCGMsPlayerInfo : public ::google::protobuf::MessageLite {
 public:
  SCGMsPlayerInfo();
  virtual ~SCGMsPlayerInfo();

  SCGMsPlayerInfo(const SCGMsPlayerInfo& from);

  inline SCGMsPlayerInfo& operator=(const SCGMsPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SCGMsPlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCGMsPlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCGMsPlayerInfo* other);

  // implements Message ----------------------------------------------

  SCGMsPlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCGMsPlayerInfo& from);
  void MergeFrom(const SCGMsPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional string gameId = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 2;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // optional int32 nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline ::google::protobuf::int32 nickname() const;
  inline void set_nickname(::google::protobuf::int32 value);

  // optional int32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 diamonds = 5;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 5;
  inline ::google::protobuf::int32 diamonds() const;
  inline void set_diamonds(::google::protobuf::int32 value);

  // optional int32 headID = 6;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 6;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // optional int32 Prop1 = 7;
  inline bool has_prop1() const;
  inline void clear_prop1();
  static const int kProp1FieldNumber = 7;
  inline ::google::protobuf::int32 prop1() const;
  inline void set_prop1(::google::protobuf::int32 value);

  // optional int32 Prop2 = 8;
  inline bool has_prop2() const;
  inline void clear_prop2();
  static const int kProp2FieldNumber = 8;
  inline ::google::protobuf::int32 prop2() const;
  inline void set_prop2(::google::protobuf::int32 value);

  // optional int32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SCGMsPlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_prop1();
  inline void clear_has_prop1();
  inline void set_has_prop2();
  inline void clear_has_prop2();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_level();
  inline void clear_has_level();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gameid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 nickname_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamonds_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 prop1_;
  ::google::protobuf::int32 prop2_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 level_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SCGMsPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerInfo : public ::google::protobuf::MessageLite {
 public:
  GamePlayerInfo();
  virtual ~GamePlayerInfo();

  GamePlayerInfo(const GamePlayerInfo& from);

  inline GamePlayerInfo& operator=(const GamePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GamePlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GamePlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GamePlayerInfo* other);

  // implements Message ----------------------------------------------

  GamePlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GamePlayerInfo& from);
  void MergeFrom(const GamePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isMyself = 1;
  inline bool has_ismyself() const;
  inline void clear_ismyself();
  static const int kIsMyselfFieldNumber = 1;
  inline bool ismyself() const;
  inline void set_ismyself(bool value);

  // required int32 chairID = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required string nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // required int32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 diamonds = 6;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 6;
  inline ::google::protobuf::int32 diamonds() const;
  inline void set_diamonds(::google::protobuf::int32 value);

  // optional int32 itemStop = 7;
  inline bool has_itemstop() const;
  inline void clear_itemstop();
  static const int kItemStopFieldNumber = 7;
  inline ::google::protobuf::int32 itemstop() const;
  inline void set_itemstop(::google::protobuf::int32 value);

  // optional int32 itemLock = 8;
  inline bool has_itemlock() const;
  inline void clear_itemlock();
  static const int kItemLockFieldNumber = 8;
  inline ::google::protobuf::int32 itemlock() const;
  inline void set_itemlock(::google::protobuf::int32 value);

  // optional int32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 cannonLv = 11;
  inline bool has_cannonlv() const;
  inline void clear_cannonlv();
  static const int kCannonLvFieldNumber = 11;
  inline ::google::protobuf::int32 cannonlv() const;
  inline void set_cannonlv(::google::protobuf::int32 value);

  // required int32 headID = 12;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 12;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.GamePlayerInfo)
 private:
  inline void set_has_ismyself();
  inline void clear_has_ismyself();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_itemstop();
  inline void clear_has_itemstop();
  inline void set_has_itemlock();
  inline void clear_has_itemlock();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cannonlv();
  inline void clear_has_cannonlv();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ismyself_;
  ::google::protobuf::int32 chairid_;
  ::std::string* nickname_;
  ::std::string* gameid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamonds_;
  ::google::protobuf::int32 itemstop_;
  ::google::protobuf::int32 itemlock_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 cannonlv_;
  ::google::protobuf::int32 headid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class COGMsEntyrGame : public ::google::protobuf::MessageLite {
 public:
  COGMsEntyrGame();
  virtual ~COGMsEntyrGame();

  COGMsEntyrGame(const COGMsEntyrGame& from);

  inline COGMsEntyrGame& operator=(const COGMsEntyrGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COGMsEntyrGame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COGMsEntyrGame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COGMsEntyrGame* other);

  // implements Message ----------------------------------------------

  COGMsEntyrGame* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COGMsEntyrGame& from);
  void MergeFrom(const COGMsEntyrGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gameId = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COGMsEntyrGame)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gameid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static COGMsEntyrGame* default_instance_;
};
// -------------------------------------------------------------------

class SGOMsPlayerInfo : public ::google::protobuf::MessageLite {
 public:
  SGOMsPlayerInfo();
  virtual ~SGOMsPlayerInfo();

  SGOMsPlayerInfo(const SGOMsPlayerInfo& from);

  inline SGOMsPlayerInfo& operator=(const SGOMsPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMsPlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMsPlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMsPlayerInfo* other);

  // implements Message ----------------------------------------------

  SGOMsPlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMsPlayerInfo& from);
  void MergeFrom(const SGOMsPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.game.Protobuf.GamePlayerInfo playerList = 1;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 1;
  inline const ::com::game::Protobuf::GamePlayerInfo& playerlist(int index) const;
  inline ::com::game::Protobuf::GamePlayerInfo* mutable_playerlist(int index);
  inline ::com::game::Protobuf::GamePlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::GamePlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::GamePlayerInfo >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMsPlayerInfo)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::GamePlayerInfo > playerlist_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMsPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Fish_Object : public ::google::protobuf::MessageLite {
 public:
  Fish_Object();
  virtual ~Fish_Object();

  Fish_Object(const Fish_Object& from);

  inline Fish_Object& operator=(const Fish_Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Fish_Object& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Fish_Object* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Fish_Object* other);

  // implements Message ----------------------------------------------

  Fish_Object* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Fish_Object& from);
  void MergeFrom(const Fish_Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wID = 1;
  inline bool has_wid() const;
  inline void clear_wid();
  static const int kWIDFieldNumber = 1;
  inline ::google::protobuf::int32 wid() const;
  inline void set_wid(::google::protobuf::int32 value);

  // required int32 cbType = 2;
  inline bool has_cbtype() const;
  inline void clear_cbtype();
  static const int kCbTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cbtype() const;
  inline void set_cbtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.Fish_Object)
 private:
  inline void set_has_wid();
  inline void clear_has_wid();
  inline void set_has_cbtype();
  inline void clear_has_cbtype();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 wid_;
  ::google::protobuf::int32 cbtype_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static Fish_Object* default_instance_;
};
// -------------------------------------------------------------------

class Net_Object : public ::google::protobuf::MessageLite {
 public:
  Net_Object();
  virtual ~Net_Object();

  Net_Object(const Net_Object& from);

  inline Net_Object& operator=(const Net_Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Net_Object& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Net_Object* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Net_Object* other);

  // implements Message ----------------------------------------------

  Net_Object* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Net_Object& from);
  void MergeFrom(const Net_Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wID = 1;
  inline bool has_wid() const;
  inline void clear_wid();
  static const int kWIDFieldNumber = 1;
  inline ::google::protobuf::int32 wid() const;
  inline void set_wid(::google::protobuf::int32 value);

  // required int32 cbType = 2;
  inline bool has_cbtype() const;
  inline void clear_cbtype();
  static const int kCbTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cbtype() const;
  inline void set_cbtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.Net_Object)
 private:
  inline void set_has_wid();
  inline void clear_has_wid();
  inline void set_has_cbtype();
  inline void clear_has_cbtype();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 wid_;
  ::google::protobuf::int32 cbtype_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static Net_Object* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Fish_Path : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Fish_Path();
  virtual ~SGOMs_Fish_Path();

  SGOMs_Fish_Path(const SGOMs_Fish_Path& from);

  inline SGOMs_Fish_Path& operator=(const SGOMs_Fish_Path& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Fish_Path& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Fish_Path* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Fish_Path* other);

  // implements Message ----------------------------------------------

  SGOMs_Fish_Path* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Fish_Path& from);
  void MergeFrom(const SGOMs_Fish_Path& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbType = 1;
  inline bool has_cbtype() const;
  inline void clear_cbtype();
  static const int kCbTypeFieldNumber = 1;
  inline ::google::protobuf::int32 cbtype() const;
  inline void set_cbtype(::google::protobuf::int32 value);

  // required int32 cbCount = 2;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 2;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required int32 cbSeed = 3;
  inline bool has_cbseed() const;
  inline void clear_cbseed();
  static const int kCbSeedFieldNumber = 3;
  inline ::google::protobuf::int32 cbseed() const;
  inline void set_cbseed(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.Fish_Object FishNetObject = 4;
  inline int fishnetobject_size() const;
  inline void clear_fishnetobject();
  static const int kFishNetObjectFieldNumber = 4;
  inline const ::com::game::Protobuf::Fish_Object& fishnetobject(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishnetobject(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishnetobject();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishnetobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishnetobject();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Fish_Path)
 private:
  inline void set_has_cbtype();
  inline void clear_has_cbtype();
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_cbseed();
  inline void clear_has_cbseed();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbtype_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishnetobject_;
  ::google::protobuf::int32 cbseed_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Fish_Path* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Fish_Group : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Fish_Group();
  virtual ~SGOMs_Fish_Group();

  SGOMs_Fish_Group(const SGOMs_Fish_Group& from);

  inline SGOMs_Fish_Group& operator=(const SGOMs_Fish_Group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Fish_Group& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Fish_Group* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Fish_Group* other);

  // implements Message ----------------------------------------------

  SGOMs_Fish_Group* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Fish_Group& from);
  void MergeFrom(const SGOMs_Fish_Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbType = 1;
  inline bool has_cbtype() const;
  inline void clear_cbtype();
  static const int kCbTypeFieldNumber = 1;
  inline ::google::protobuf::int32 cbtype() const;
  inline void set_cbtype(::google::protobuf::int32 value);

  // required int32 cbSeed = 2;
  inline bool has_cbseed() const;
  inline void clear_cbseed();
  static const int kCbSeedFieldNumber = 2;
  inline ::google::protobuf::int32 cbseed() const;
  inline void set_cbseed(::google::protobuf::int32 value);

  // required float fPassTime = 3;
  inline bool has_fpasstime() const;
  inline void clear_fpasstime();
  static const int kFPassTimeFieldNumber = 3;
  inline float fpasstime() const;
  inline void set_fpasstime(float value);

  // required int32 wCount = 4;
  inline bool has_wcount() const;
  inline void clear_wcount();
  static const int kWCountFieldNumber = 4;
  inline ::google::protobuf::int32 wcount() const;
  inline void set_wcount(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.Fish_Object FishGroupIDs = 5;
  inline int fishgroupids_size() const;
  inline void clear_fishgroupids();
  static const int kFishGroupIDsFieldNumber = 5;
  inline const ::com::game::Protobuf::Fish_Object& fishgroupids(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishgroupids(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishgroupids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishgroupids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishgroupids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Fish_Group)
 private:
  inline void set_has_cbtype();
  inline void clear_has_cbtype();
  inline void set_has_cbseed();
  inline void clear_has_cbseed();
  inline void set_has_fpasstime();
  inline void clear_has_fpasstime();
  inline void set_has_wcount();
  inline void clear_has_wcount();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbtype_;
  ::google::protobuf::int32 cbseed_;
  float fpasstime_;
  ::google::protobuf::int32 wcount_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishgroupids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Fish_Group* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Fire_Success : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Fire_Success();
  virtual ~SGOMs_Fire_Success();

  SGOMs_Fire_Success(const SGOMs_Fire_Success& from);

  inline SGOMs_Fire_Success& operator=(const SGOMs_Fire_Success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Fire_Success& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Fire_Success* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Fire_Success* other);

  // implements Message ----------------------------------------------

  SGOMs_Fire_Success* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Fire_Success& from);
  void MergeFrom(const SGOMs_Fire_Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbChairID = 1;
  inline bool has_cbchairid() const;
  inline void clear_cbchairid();
  static const int kCbChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 cbchairid() const;
  inline void set_cbchairid(::google::protobuf::int32 value);

  // required int32 fRote = 2;
  inline bool has_frote() const;
  inline void clear_frote();
  static const int kFRoteFieldNumber = 2;
  inline ::google::protobuf::int32 frote() const;
  inline void set_frote(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Fire_Success)
 private:
  inline void set_has_cbchairid();
  inline void clear_has_cbchairid();
  inline void set_has_frote();
  inline void clear_has_frote();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbchairid_;
  ::google::protobuf::int32 frote_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Fire_Success* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Fire_Failed : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Fire_Failed();
  virtual ~SGOMs_Fire_Failed();

  SGOMs_Fire_Failed(const SGOMs_Fire_Failed& from);

  inline SGOMs_Fire_Failed& operator=(const SGOMs_Fire_Failed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Fire_Failed& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Fire_Failed* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Fire_Failed* other);

  // implements Message ----------------------------------------------

  SGOMs_Fire_Failed* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Fire_Failed& from);
  void MergeFrom(const SGOMs_Fire_Failed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wChairID = 1;
  inline bool has_wchairid() const;
  inline void clear_wchairid();
  static const int kWChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 wchairid() const;
  inline void set_wchairid(::google::protobuf::int32 value);

  // required string szReason = 2;
  inline bool has_szreason() const;
  inline void clear_szreason();
  static const int kSzReasonFieldNumber = 2;
  inline const ::std::string& szreason() const;
  inline void set_szreason(const ::std::string& value);
  inline void set_szreason(const char* value);
  inline void set_szreason(const char* value, size_t size);
  inline ::std::string* mutable_szreason();
  inline ::std::string* release_szreason();
  inline void set_allocated_szreason(::std::string* szreason);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Fire_Failed)
 private:
  inline void set_has_wchairid();
  inline void clear_has_wchairid();
  inline void set_has_szreason();
  inline void clear_has_szreason();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* szreason_;
  ::google::protobuf::int32 wchairid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Fire_Failed* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Change_Cannon_Ret : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Change_Cannon_Ret();
  virtual ~SGOMs_Change_Cannon_Ret();

  SGOMs_Change_Cannon_Ret(const SGOMs_Change_Cannon_Ret& from);

  inline SGOMs_Change_Cannon_Ret& operator=(const SGOMs_Change_Cannon_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Change_Cannon_Ret& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Change_Cannon_Ret* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Change_Cannon_Ret* other);

  // implements Message ----------------------------------------------

  SGOMs_Change_Cannon_Ret* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Change_Cannon_Ret& from);
  void MergeFrom(const SGOMs_Change_Cannon_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbChairID = 1;
  inline bool has_cbchairid() const;
  inline void clear_cbchairid();
  static const int kCbChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 cbchairid() const;
  inline void set_cbchairid(::google::protobuf::int32 value);

  // required int32 cbStyle = 2;
  inline bool has_cbstyle() const;
  inline void clear_cbstyle();
  static const int kCbStyleFieldNumber = 2;
  inline ::google::protobuf::int32 cbstyle() const;
  inline void set_cbstyle(::google::protobuf::int32 value);

  // required int32 wCost = 3;
  inline bool has_wcost() const;
  inline void clear_wcost();
  static const int kWCostFieldNumber = 3;
  inline ::google::protobuf::int32 wcost() const;
  inline void set_wcost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Change_Cannon_Ret)
 private:
  inline void set_has_cbchairid();
  inline void clear_has_cbchairid();
  inline void set_has_cbstyle();
  inline void clear_has_cbstyle();
  inline void set_has_wcost();
  inline void clear_has_wcost();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbchairid_;
  ::google::protobuf::int32 cbstyle_;
  ::google::protobuf::int32 wcost_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Change_Cannon_Ret* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Cast_Nets_Success : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Cast_Nets_Success();
  virtual ~SGOMs_Cast_Nets_Success();

  SGOMs_Cast_Nets_Success(const SGOMs_Cast_Nets_Success& from);

  inline SGOMs_Cast_Nets_Success& operator=(const SGOMs_Cast_Nets_Success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Cast_Nets_Success& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Cast_Nets_Success* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Cast_Nets_Success* other);

  // implements Message ----------------------------------------------

  SGOMs_Cast_Nets_Success* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Cast_Nets_Success& from);
  void MergeFrom(const SGOMs_Cast_Nets_Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbCount = 1;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 1;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required int32 cbChairID = 2;
  inline bool has_cbchairid() const;
  inline void clear_cbchairid();
  static const int kCbChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 cbchairid() const;
  inline void set_cbchairid(::google::protobuf::int32 value);

  // required int32 totalGoin = 3;
  inline bool has_totalgoin() const;
  inline void clear_totalgoin();
  static const int kTotalGoinFieldNumber = 3;
  inline ::google::protobuf::int32 totalgoin() const;
  inline void set_totalgoin(::google::protobuf::int32 value);

  // required int32 addGoin = 4;
  inline bool has_addgoin() const;
  inline void clear_addgoin();
  static const int kAddGoinFieldNumber = 4;
  inline ::google::protobuf::int32 addgoin() const;
  inline void set_addgoin(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 6;
  inline const ::com::game::Protobuf::Fish_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Cast_Nets_Success)
 private:
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_cbchairid();
  inline void clear_has_cbchairid();
  inline void set_has_totalgoin();
  inline void clear_has_totalgoin();
  inline void set_has_addgoin();
  inline void clear_has_addgoin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::int32 cbchairid_;
  ::google::protobuf::int32 totalgoin_;
  ::google::protobuf::int32 addgoin_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Cast_Nets_Success* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Get_ItemLock : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Get_ItemLock();
  virtual ~SGOMs_Get_ItemLock();

  SGOMs_Get_ItemLock(const SGOMs_Get_ItemLock& from);

  inline SGOMs_Get_ItemLock& operator=(const SGOMs_Get_ItemLock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Get_ItemLock& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Get_ItemLock* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Get_ItemLock* other);

  // implements Message ----------------------------------------------

  SGOMs_Get_ItemLock* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Get_ItemLock& from);
  void MergeFrom(const SGOMs_Get_ItemLock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Get_ItemLock)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gameid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Get_ItemLock* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_Get_ItemStop : public ::google::protobuf::MessageLite {
 public:
  SGOMs_Get_ItemStop();
  virtual ~SGOMs_Get_ItemStop();

  SGOMs_Get_ItemStop(const SGOMs_Get_ItemStop& from);

  inline SGOMs_Get_ItemStop& operator=(const SGOMs_Get_ItemStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_Get_ItemStop& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_Get_ItemStop* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_Get_ItemStop* other);

  // implements Message ----------------------------------------------

  SGOMs_Get_ItemStop* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_Get_ItemStop& from);
  void MergeFrom(const SGOMs_Get_ItemStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_Get_ItemStop)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gameid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_Get_ItemStop* default_instance_;
};
// -------------------------------------------------------------------

class COGMs_OnFire : public ::google::protobuf::MessageLite {
 public:
  COGMs_OnFire();
  virtual ~COGMs_OnFire();

  COGMs_OnFire(const COGMs_OnFire& from);

  inline COGMs_OnFire& operator=(const COGMs_OnFire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COGMs_OnFire& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COGMs_OnFire* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COGMs_OnFire* other);

  // implements Message ----------------------------------------------

  COGMs_OnFire* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COGMs_OnFire& from);
  void MergeFrom(const COGMs_OnFire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float fRote = 1;
  inline bool has_frote() const;
  inline void clear_frote();
  static const int kFRoteFieldNumber = 1;
  inline float frote() const;
  inline void set_frote(float value);

  // required int32 canonlv = 2;
  inline bool has_canonlv() const;
  inline void clear_canonlv();
  static const int kCanonlvFieldNumber = 2;
  inline ::google::protobuf::int32 canonlv() const;
  inline void set_canonlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COGMs_OnFire)
 private:
  inline void set_has_frote();
  inline void clear_has_frote();
  inline void set_has_canonlv();
  inline void clear_has_canonlv();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float frote_;
  ::google::protobuf::int32 canonlv_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static COGMs_OnFire* default_instance_;
};
// -------------------------------------------------------------------

class COGMs_Cast_Nets : public ::google::protobuf::MessageLite {
 public:
  COGMs_Cast_Nets();
  virtual ~COGMs_Cast_Nets();

  COGMs_Cast_Nets(const COGMs_Cast_Nets& from);

  inline COGMs_Cast_Nets& operator=(const COGMs_Cast_Nets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COGMs_Cast_Nets& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COGMs_Cast_Nets* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COGMs_Cast_Nets* other);

  // implements Message ----------------------------------------------

  COGMs_Cast_Nets* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COGMs_Cast_Nets& from);
  void MergeFrom(const COGMs_Cast_Nets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbCount = 1;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 1;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required int32 wRatio = 2;
  inline bool has_wratio() const;
  inline void clear_wratio();
  static const int kWRatioFieldNumber = 2;
  inline ::google::protobuf::int32 wratio() const;
  inline void set_wratio(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 3;
  inline const ::com::game::Protobuf::Fish_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COGMs_Cast_Nets)
 private:
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_wratio();
  inline void clear_has_wratio();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::int32 wratio_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static COGMs_Cast_Nets* default_instance_;
};
// -------------------------------------------------------------------

class COGMs_HitTeam : public ::google::protobuf::MessageLite {
 public:
  COGMs_HitTeam();
  virtual ~COGMs_HitTeam();

  COGMs_HitTeam(const COGMs_HitTeam& from);

  inline COGMs_HitTeam& operator=(const COGMs_HitTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COGMs_HitTeam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COGMs_HitTeam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COGMs_HitTeam* other);

  // implements Message ----------------------------------------------

  COGMs_HitTeam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COGMs_HitTeam& from);
  void MergeFrom(const COGMs_HitTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbCount = 1;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 1;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required .com.game.Protobuf.Fish_Object hitFish = 2;
  inline bool has_hitfish() const;
  inline void clear_hitfish();
  static const int kHitFishFieldNumber = 2;
  inline const ::com::game::Protobuf::Fish_Object& hitfish() const;
  inline ::com::game::Protobuf::Fish_Object* mutable_hitfish();
  inline ::com::game::Protobuf::Fish_Object* release_hitfish();
  inline void set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish);

  // repeated .com.game.Protobuf.Net_Object FishIDs = 3;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 3;
  inline const ::com::game::Protobuf::Net_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Net_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Net_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COGMs_HitTeam)
 private:
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_hitfish();
  inline void clear_has_hitfish();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::game::Protobuf::Fish_Object* hitfish_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object > fishids_;
  ::google::protobuf::int32 cbcount_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static COGMs_HitTeam* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_HitTeam_Success : public ::google::protobuf::MessageLite {
 public:
  SGOMs_HitTeam_Success();
  virtual ~SGOMs_HitTeam_Success();

  SGOMs_HitTeam_Success(const SGOMs_HitTeam_Success& from);

  inline SGOMs_HitTeam_Success& operator=(const SGOMs_HitTeam_Success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_HitTeam_Success& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_HitTeam_Success* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_HitTeam_Success* other);

  // implements Message ----------------------------------------------

  SGOMs_HitTeam_Success* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_HitTeam_Success& from);
  void MergeFrom(const SGOMs_HitTeam_Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbCount = 1;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 1;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required int32 cbChairID = 2;
  inline bool has_cbchairid() const;
  inline void clear_cbchairid();
  static const int kCbChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 cbchairid() const;
  inline void set_cbchairid(::google::protobuf::int32 value);

  // required int32 totalGoin = 3;
  inline bool has_totalgoin() const;
  inline void clear_totalgoin();
  static const int kTotalGoinFieldNumber = 3;
  inline ::google::protobuf::int32 totalgoin() const;
  inline void set_totalgoin(::google::protobuf::int32 value);

  // required int32 addGoin = 4;
  inline bool has_addgoin() const;
  inline void clear_addgoin();
  static const int kAddGoinFieldNumber = 4;
  inline ::google::protobuf::int32 addgoin() const;
  inline void set_addgoin(::google::protobuf::int32 value);

  // required .com.game.Protobuf.Fish_Object hitFish = 5;
  inline bool has_hitfish() const;
  inline void clear_hitfish();
  static const int kHitFishFieldNumber = 5;
  inline const ::com::game::Protobuf::Fish_Object& hitfish() const;
  inline ::com::game::Protobuf::Fish_Object* mutable_hitfish();
  inline ::com::game::Protobuf::Fish_Object* release_hitfish();
  inline void set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish);

  // repeated .com.game.Protobuf.Net_Object FishIDs = 6;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 6;
  inline const ::com::game::Protobuf::Net_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Net_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Net_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_HitTeam_Success)
 private:
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_cbchairid();
  inline void clear_has_cbchairid();
  inline void set_has_totalgoin();
  inline void clear_has_totalgoin();
  inline void set_has_addgoin();
  inline void clear_has_addgoin();
  inline void set_has_hitfish();
  inline void clear_has_hitfish();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::int32 cbchairid_;
  ::google::protobuf::int32 totalgoin_;
  ::google::protobuf::int32 addgoin_;
  ::com::game::Protobuf::Fish_Object* hitfish_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object > fishids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_HitTeam_Success* default_instance_;
};
// -------------------------------------------------------------------

class COGMs_HitSceenBomb : public ::google::protobuf::MessageLite {
 public:
  COGMs_HitSceenBomb();
  virtual ~COGMs_HitSceenBomb();

  COGMs_HitSceenBomb(const COGMs_HitSceenBomb& from);

  inline COGMs_HitSceenBomb& operator=(const COGMs_HitSceenBomb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const COGMs_HitSceenBomb& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const COGMs_HitSceenBomb* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(COGMs_HitSceenBomb* other);

  // implements Message ----------------------------------------------

  COGMs_HitSceenBomb* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const COGMs_HitSceenBomb& from);
  void MergeFrom(const COGMs_HitSceenBomb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wRatio = 1;
  inline bool has_wratio() const;
  inline void clear_wratio();
  static const int kWRatioFieldNumber = 1;
  inline ::google::protobuf::int32 wratio() const;
  inline void set_wratio(::google::protobuf::int32 value);

  // required int32 cbCount = 2;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 2;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 3;
  inline const ::com::game::Protobuf::Fish_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.COGMs_HitSceenBomb)
 private:
  inline void set_has_wratio();
  inline void clear_has_wratio();
  inline void set_has_cbcount();
  inline void clear_has_cbcount();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 wratio_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static COGMs_HitSceenBomb* default_instance_;
};
// -------------------------------------------------------------------

class SGOMs_HitSceenBomb_Success : public ::google::protobuf::MessageLite {
 public:
  SGOMs_HitSceenBomb_Success();
  virtual ~SGOMs_HitSceenBomb_Success();

  SGOMs_HitSceenBomb_Success(const SGOMs_HitSceenBomb_Success& from);

  inline SGOMs_HitSceenBomb_Success& operator=(const SGOMs_HitSceenBomb_Success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SGOMs_HitSceenBomb_Success& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SGOMs_HitSceenBomb_Success* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SGOMs_HitSceenBomb_Success* other);

  // implements Message ----------------------------------------------

  SGOMs_HitSceenBomb_Success* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SGOMs_HitSceenBomb_Success& from);
  void MergeFrom(const SGOMs_HitSceenBomb_Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cbCount = 1;
  inline bool has_cbcount() const;
  inline void clear_cbcount();
  static const int kCbCountFieldNumber = 1;
  inline ::google::protobuf::int32 cbcount() const;
  inline void set_cbcount(::google::protobuf::int32 value);

  // required int32 cbChairID = 2;
  inline bool has_cbchairid() const;
  inline void clear_cbchairid();
  static const int kCbChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 cbchairid() const;
  inline void set_cbchairid(::google::protobuf::int32 value);

  // required int32 totalGoin = 3;
  inline bool has_totalgoin() const;
  inline void clear_totalgoin();
  static const int kTotalGoinFieldNumber = 3;
  inline ::google::protobuf::int32 totalgoin() const;
  inline void set_totalgoin(::google::protobuf::int32 value);

  // required int32 addGoin = 4;
  inline bool has_addgoin() const;
  inline void clear_addgoin();
  static const int kAddGoinFieldNumber = 4;
  inline ::google::protobuf::int32 addgoin() const;
  inline void set_addgoin(::google::protobuf::int32 value);

  // required .com.game.Protobuf.Fish_Object hitFish = 5;
  inline bool has_hitfish() const;
  inline void clear_hitfish();
  static const int kHitFishFieldNumber = 5;
  inline const ::com::game::Protobuf::Fish_Object& hitfish() const;
  inline ::com::game::Protobuf::Fish_Object* mutable_hitfish();
  inline ::com::game::Protobuf::Fish_Object* release_hitfish();
  inline void set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish);

  // repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
  inline int fishids_size() const;
  inline void clear_fishids();
  static const int kFishIDsFieldNumber = 6;
  inline const ::com::game::Protobuf::Fish_Object& fishids(int index) const;
  inline ::com::game::Protobuf::Fish_Object* mutable_fishids(int index);
  inline ::com::game::Protobuf::Fish_Object* add_fishids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
      fishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
      mutable_fishids();

  // @@protoc_insertion_point(class_scope:com.game.Protobuf.SGOMs_HitSceenBomb_Success)
 private:
  inline void set_has_cbcount();
  inline void clear_has_cbcount();
  inline void set_has_cbchairid();
  inline void clear_has_cbchairid();
  inline void set_has_totalgoin();
  inline void clear_has_totalgoin();
  inline void set_has_addgoin();
  inline void clear_has_addgoin();
  inline void set_has_hitfish();
  inline void clear_has_hitfish();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cbcount_;
  ::google::protobuf::int32 cbchairid_;
  ::google::protobuf::int32 totalgoin_;
  ::google::protobuf::int32 addgoin_;
  ::com::game::Protobuf::Fish_Object* hitfish_;
  ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object > fishids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameServer_2eproto();
  friend void protobuf_ShutdownFile_GameServer_2eproto();

  void InitAsDefaultInstance();
  static SGOMs_HitSceenBomb_Success* default_instance_;
};
// ===================================================================


// ===================================================================

// SGOMsMapInfo

// required int32 mapid = 1;
inline bool SGOMsMapInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMsMapInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMsMapInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMsMapInfo::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 SGOMsMapInfo::mapid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMsMapInfo.mapid)
  return mapid_;
}
inline void SGOMsMapInfo::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMsMapInfo.mapid)
}

// -------------------------------------------------------------------

// SCGMsPlayerInfo

// required int32 ret = 1;
inline bool SCGMsPlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGMsPlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGMsPlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGMsPlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::ret() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.ret)
  return ret_;
}
inline void SCGMsPlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.ret)
}

// optional string gameId = 2;
inline bool SCGMsPlayerInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGMsPlayerInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGMsPlayerInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGMsPlayerInfo::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& SCGMsPlayerInfo::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.gameId)
  return *gameid_;
}
inline void SCGMsPlayerInfo::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.gameId)
}
inline void SCGMsPlayerInfo::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.SCGMsPlayerInfo.gameId)
}
inline void SCGMsPlayerInfo::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.SCGMsPlayerInfo.gameId)
}
inline ::std::string* SCGMsPlayerInfo::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SCGMsPlayerInfo.gameId)
  return gameid_;
}
inline ::std::string* SCGMsPlayerInfo::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SCGMsPlayerInfo::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.SCGMsPlayerInfo.gameId)
}

// optional int32 nickName = 3;
inline bool SCGMsPlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCGMsPlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCGMsPlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCGMsPlayerInfo::clear_nickname() {
  nickname_ = 0;
  clear_has_nickname();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.nickName)
  return nickname_;
}
inline void SCGMsPlayerInfo::set_nickname(::google::protobuf::int32 value) {
  set_has_nickname();
  nickname_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.nickName)
}

// optional int32 gold = 4;
inline bool SCGMsPlayerInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCGMsPlayerInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCGMsPlayerInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCGMsPlayerInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.gold)
  return gold_;
}
inline void SCGMsPlayerInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.gold)
}

// optional int32 diamonds = 5;
inline bool SCGMsPlayerInfo::has_diamonds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCGMsPlayerInfo::set_has_diamonds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCGMsPlayerInfo::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCGMsPlayerInfo::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::diamonds() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.diamonds)
  return diamonds_;
}
inline void SCGMsPlayerInfo::set_diamonds(::google::protobuf::int32 value) {
  set_has_diamonds();
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.diamonds)
}

// optional int32 headID = 6;
inline bool SCGMsPlayerInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCGMsPlayerInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCGMsPlayerInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCGMsPlayerInfo::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::headid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.headID)
  return headid_;
}
inline void SCGMsPlayerInfo::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.headID)
}

// optional int32 Prop1 = 7;
inline bool SCGMsPlayerInfo::has_prop1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCGMsPlayerInfo::set_has_prop1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCGMsPlayerInfo::clear_has_prop1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCGMsPlayerInfo::clear_prop1() {
  prop1_ = 0;
  clear_has_prop1();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::prop1() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.Prop1)
  return prop1_;
}
inline void SCGMsPlayerInfo::set_prop1(::google::protobuf::int32 value) {
  set_has_prop1();
  prop1_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.Prop1)
}

// optional int32 Prop2 = 8;
inline bool SCGMsPlayerInfo::has_prop2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCGMsPlayerInfo::set_has_prop2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCGMsPlayerInfo::clear_has_prop2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCGMsPlayerInfo::clear_prop2() {
  prop2_ = 0;
  clear_has_prop2();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::prop2() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.Prop2)
  return prop2_;
}
inline void SCGMsPlayerInfo::set_prop2(::google::protobuf::int32 value) {
  set_has_prop2();
  prop2_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.Prop2)
}

// optional int32 vip = 9;
inline bool SCGMsPlayerInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCGMsPlayerInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCGMsPlayerInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCGMsPlayerInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::vip() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.vip)
  return vip_;
}
inline void SCGMsPlayerInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.vip)
}

// optional int32 level = 10;
inline bool SCGMsPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCGMsPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCGMsPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCGMsPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SCGMsPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SCGMsPlayerInfo.level)
  return level_;
}
inline void SCGMsPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SCGMsPlayerInfo.level)
}

// -------------------------------------------------------------------

// GamePlayerInfo

// required bool isMyself = 1;
inline bool GamePlayerInfo::has_ismyself() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerInfo::set_has_ismyself() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerInfo::clear_has_ismyself() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerInfo::clear_ismyself() {
  ismyself_ = false;
  clear_has_ismyself();
}
inline bool GamePlayerInfo::ismyself() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.isMyself)
  return ismyself_;
}
inline void GamePlayerInfo::set_ismyself(bool value) {
  set_has_ismyself();
  ismyself_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.isMyself)
}

// required int32 chairID = 2;
inline bool GamePlayerInfo::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerInfo::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerInfo::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerInfo::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 GamePlayerInfo::chairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.chairID)
  return chairid_;
}
inline void GamePlayerInfo::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.chairID)
}

// required string nickName = 3;
inline bool GamePlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePlayerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GamePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.nickName)
  return *nickname_;
}
inline void GamePlayerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.nickName)
}
inline void GamePlayerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.GamePlayerInfo.nickName)
}
inline void GamePlayerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.GamePlayerInfo.nickName)
}
inline ::std::string* GamePlayerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.GamePlayerInfo.nickName)
  return nickname_;
}
inline ::std::string* GamePlayerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GamePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.GamePlayerInfo.nickName)
}

// required string gameid = 4;
inline bool GamePlayerInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePlayerInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePlayerInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePlayerInfo::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& GamePlayerInfo::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.gameid)
  return *gameid_;
}
inline void GamePlayerInfo::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.gameid)
}
inline void GamePlayerInfo::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.GamePlayerInfo.gameid)
}
inline void GamePlayerInfo::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.GamePlayerInfo.gameid)
}
inline ::std::string* GamePlayerInfo::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.GamePlayerInfo.gameid)
  return gameid_;
}
inline ::std::string* GamePlayerInfo::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GamePlayerInfo::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.GamePlayerInfo.gameid)
}

// required int32 gold = 5;
inline bool GamePlayerInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamePlayerInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamePlayerInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamePlayerInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 GamePlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.gold)
  return gold_;
}
inline void GamePlayerInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.gold)
}

// optional int32 diamonds = 6;
inline bool GamePlayerInfo::has_diamonds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamePlayerInfo::set_has_diamonds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamePlayerInfo::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamePlayerInfo::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline ::google::protobuf::int32 GamePlayerInfo::diamonds() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.diamonds)
  return diamonds_;
}
inline void GamePlayerInfo::set_diamonds(::google::protobuf::int32 value) {
  set_has_diamonds();
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.diamonds)
}

// optional int32 itemStop = 7;
inline bool GamePlayerInfo::has_itemstop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GamePlayerInfo::set_has_itemstop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GamePlayerInfo::clear_has_itemstop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GamePlayerInfo::clear_itemstop() {
  itemstop_ = 0;
  clear_has_itemstop();
}
inline ::google::protobuf::int32 GamePlayerInfo::itemstop() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.itemStop)
  return itemstop_;
}
inline void GamePlayerInfo::set_itemstop(::google::protobuf::int32 value) {
  set_has_itemstop();
  itemstop_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.itemStop)
}

// optional int32 itemLock = 8;
inline bool GamePlayerInfo::has_itemlock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GamePlayerInfo::set_has_itemlock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GamePlayerInfo::clear_has_itemlock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GamePlayerInfo::clear_itemlock() {
  itemlock_ = 0;
  clear_has_itemlock();
}
inline ::google::protobuf::int32 GamePlayerInfo::itemlock() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.itemLock)
  return itemlock_;
}
inline void GamePlayerInfo::set_itemlock(::google::protobuf::int32 value) {
  set_has_itemlock();
  itemlock_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.itemLock)
}

// optional int32 vip = 9;
inline bool GamePlayerInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GamePlayerInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GamePlayerInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GamePlayerInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 GamePlayerInfo::vip() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.vip)
  return vip_;
}
inline void GamePlayerInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.vip)
}

// optional int32 level = 10;
inline bool GamePlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GamePlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GamePlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GamePlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GamePlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.level)
  return level_;
}
inline void GamePlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.level)
}

// optional int32 cannonLv = 11;
inline bool GamePlayerInfo::has_cannonlv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GamePlayerInfo::set_has_cannonlv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GamePlayerInfo::clear_has_cannonlv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GamePlayerInfo::clear_cannonlv() {
  cannonlv_ = 0;
  clear_has_cannonlv();
}
inline ::google::protobuf::int32 GamePlayerInfo::cannonlv() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.cannonLv)
  return cannonlv_;
}
inline void GamePlayerInfo::set_cannonlv(::google::protobuf::int32 value) {
  set_has_cannonlv();
  cannonlv_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.cannonLv)
}

// required int32 headID = 12;
inline bool GamePlayerInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GamePlayerInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GamePlayerInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GamePlayerInfo::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 GamePlayerInfo::headid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.GamePlayerInfo.headID)
  return headid_;
}
inline void GamePlayerInfo::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.GamePlayerInfo.headID)
}

// -------------------------------------------------------------------

// COGMsEntyrGame

// required string gameId = 1;
inline bool COGMsEntyrGame::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COGMsEntyrGame::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COGMsEntyrGame::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COGMsEntyrGame::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& COGMsEntyrGame::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMsEntyrGame.gameId)
  return *gameid_;
}
inline void COGMsEntyrGame::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMsEntyrGame.gameId)
}
inline void COGMsEntyrGame::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.COGMsEntyrGame.gameId)
}
inline void COGMsEntyrGame::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.COGMsEntyrGame.gameId)
}
inline ::std::string* COGMsEntyrGame::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COGMsEntyrGame.gameId)
  return gameid_;
}
inline ::std::string* COGMsEntyrGame::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void COGMsEntyrGame::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.COGMsEntyrGame.gameId)
}

// -------------------------------------------------------------------

// SGOMsPlayerInfo

// repeated .com.game.Protobuf.GamePlayerInfo playerList = 1;
inline int SGOMsPlayerInfo::playerlist_size() const {
  return playerlist_.size();
}
inline void SGOMsPlayerInfo::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::com::game::Protobuf::GamePlayerInfo& SGOMsPlayerInfo::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMsPlayerInfo.playerList)
  return playerlist_.Get(index);
}
inline ::com::game::Protobuf::GamePlayerInfo* SGOMsPlayerInfo::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMsPlayerInfo.playerList)
  return playerlist_.Mutable(index);
}
inline ::com::game::Protobuf::GamePlayerInfo* SGOMsPlayerInfo::add_playerlist() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMsPlayerInfo.playerList)
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::GamePlayerInfo >&
SGOMsPlayerInfo::playerlist() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMsPlayerInfo.playerList)
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::GamePlayerInfo >*
SGOMsPlayerInfo::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMsPlayerInfo.playerList)
  return &playerlist_;
}

// -------------------------------------------------------------------

// Fish_Object

// required int32 wID = 1;
inline bool Fish_Object::has_wid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fish_Object::set_has_wid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fish_Object::clear_has_wid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fish_Object::clear_wid() {
  wid_ = 0;
  clear_has_wid();
}
inline ::google::protobuf::int32 Fish_Object::wid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.Fish_Object.wID)
  return wid_;
}
inline void Fish_Object::set_wid(::google::protobuf::int32 value) {
  set_has_wid();
  wid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.Fish_Object.wID)
}

// required int32 cbType = 2;
inline bool Fish_Object::has_cbtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fish_Object::set_has_cbtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fish_Object::clear_has_cbtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fish_Object::clear_cbtype() {
  cbtype_ = 0;
  clear_has_cbtype();
}
inline ::google::protobuf::int32 Fish_Object::cbtype() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.Fish_Object.cbType)
  return cbtype_;
}
inline void Fish_Object::set_cbtype(::google::protobuf::int32 value) {
  set_has_cbtype();
  cbtype_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.Fish_Object.cbType)
}

// -------------------------------------------------------------------

// Net_Object

// required int32 wID = 1;
inline bool Net_Object::has_wid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net_Object::set_has_wid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net_Object::clear_has_wid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net_Object::clear_wid() {
  wid_ = 0;
  clear_has_wid();
}
inline ::google::protobuf::int32 Net_Object::wid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.Net_Object.wID)
  return wid_;
}
inline void Net_Object::set_wid(::google::protobuf::int32 value) {
  set_has_wid();
  wid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.Net_Object.wID)
}

// required int32 cbType = 2;
inline bool Net_Object::has_cbtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Net_Object::set_has_cbtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Net_Object::clear_has_cbtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Net_Object::clear_cbtype() {
  cbtype_ = 0;
  clear_has_cbtype();
}
inline ::google::protobuf::int32 Net_Object::cbtype() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.Net_Object.cbType)
  return cbtype_;
}
inline void Net_Object::set_cbtype(::google::protobuf::int32 value) {
  set_has_cbtype();
  cbtype_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.Net_Object.cbType)
}

// -------------------------------------------------------------------

// SGOMs_Fish_Path

// required int32 cbType = 1;
inline bool SGOMs_Fish_Path::has_cbtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Fish_Path::set_has_cbtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Fish_Path::clear_has_cbtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Fish_Path::clear_cbtype() {
  cbtype_ = 0;
  clear_has_cbtype();
}
inline ::google::protobuf::int32 SGOMs_Fish_Path::cbtype() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Path.cbType)
  return cbtype_;
}
inline void SGOMs_Fish_Path::set_cbtype(::google::protobuf::int32 value) {
  set_has_cbtype();
  cbtype_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Path.cbType)
}

// required int32 cbCount = 2;
inline bool SGOMs_Fish_Path::has_cbcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Fish_Path::set_has_cbcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Fish_Path::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Fish_Path::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 SGOMs_Fish_Path::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Path.cbCount)
  return cbcount_;
}
inline void SGOMs_Fish_Path::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Path.cbCount)
}

// required int32 cbSeed = 3;
inline bool SGOMs_Fish_Path::has_cbseed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_Fish_Path::set_has_cbseed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_Fish_Path::clear_has_cbseed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_Fish_Path::clear_cbseed() {
  cbseed_ = 0;
  clear_has_cbseed();
}
inline ::google::protobuf::int32 SGOMs_Fish_Path::cbseed() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Path.cbSeed)
  return cbseed_;
}
inline void SGOMs_Fish_Path::set_cbseed(::google::protobuf::int32 value) {
  set_has_cbseed();
  cbseed_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Path.cbSeed)
}

// repeated .com.game.Protobuf.Fish_Object FishNetObject = 4;
inline int SGOMs_Fish_Path::fishnetobject_size() const {
  return fishnetobject_.size();
}
inline void SGOMs_Fish_Path::clear_fishnetobject() {
  fishnetobject_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_Fish_Path::fishnetobject(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Path.FishNetObject)
  return fishnetobject_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Fish_Path::mutable_fishnetobject(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_Fish_Path.FishNetObject)
  return fishnetobject_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Fish_Path::add_fishnetobject() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMs_Fish_Path.FishNetObject)
  return fishnetobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
SGOMs_Fish_Path::fishnetobject() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMs_Fish_Path.FishNetObject)
  return fishnetobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
SGOMs_Fish_Path::mutable_fishnetobject() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMs_Fish_Path.FishNetObject)
  return &fishnetobject_;
}

// -------------------------------------------------------------------

// SGOMs_Fish_Group

// required int32 cbType = 1;
inline bool SGOMs_Fish_Group::has_cbtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Fish_Group::set_has_cbtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Fish_Group::clear_has_cbtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Fish_Group::clear_cbtype() {
  cbtype_ = 0;
  clear_has_cbtype();
}
inline ::google::protobuf::int32 SGOMs_Fish_Group::cbtype() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Group.cbType)
  return cbtype_;
}
inline void SGOMs_Fish_Group::set_cbtype(::google::protobuf::int32 value) {
  set_has_cbtype();
  cbtype_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Group.cbType)
}

// required int32 cbSeed = 2;
inline bool SGOMs_Fish_Group::has_cbseed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Fish_Group::set_has_cbseed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Fish_Group::clear_has_cbseed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Fish_Group::clear_cbseed() {
  cbseed_ = 0;
  clear_has_cbseed();
}
inline ::google::protobuf::int32 SGOMs_Fish_Group::cbseed() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Group.cbSeed)
  return cbseed_;
}
inline void SGOMs_Fish_Group::set_cbseed(::google::protobuf::int32 value) {
  set_has_cbseed();
  cbseed_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Group.cbSeed)
}

// required float fPassTime = 3;
inline bool SGOMs_Fish_Group::has_fpasstime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_Fish_Group::set_has_fpasstime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_Fish_Group::clear_has_fpasstime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_Fish_Group::clear_fpasstime() {
  fpasstime_ = 0;
  clear_has_fpasstime();
}
inline float SGOMs_Fish_Group::fpasstime() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Group.fPassTime)
  return fpasstime_;
}
inline void SGOMs_Fish_Group::set_fpasstime(float value) {
  set_has_fpasstime();
  fpasstime_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Group.fPassTime)
}

// required int32 wCount = 4;
inline bool SGOMs_Fish_Group::has_wcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGOMs_Fish_Group::set_has_wcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGOMs_Fish_Group::clear_has_wcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGOMs_Fish_Group::clear_wcount() {
  wcount_ = 0;
  clear_has_wcount();
}
inline ::google::protobuf::int32 SGOMs_Fish_Group::wcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Group.wCount)
  return wcount_;
}
inline void SGOMs_Fish_Group::set_wcount(::google::protobuf::int32 value) {
  set_has_wcount();
  wcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fish_Group.wCount)
}

// repeated .com.game.Protobuf.Fish_Object FishGroupIDs = 5;
inline int SGOMs_Fish_Group::fishgroupids_size() const {
  return fishgroupids_.size();
}
inline void SGOMs_Fish_Group::clear_fishgroupids() {
  fishgroupids_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_Fish_Group::fishgroupids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fish_Group.FishGroupIDs)
  return fishgroupids_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Fish_Group::mutable_fishgroupids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_Fish_Group.FishGroupIDs)
  return fishgroupids_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Fish_Group::add_fishgroupids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMs_Fish_Group.FishGroupIDs)
  return fishgroupids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
SGOMs_Fish_Group::fishgroupids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMs_Fish_Group.FishGroupIDs)
  return fishgroupids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
SGOMs_Fish_Group::mutable_fishgroupids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMs_Fish_Group.FishGroupIDs)
  return &fishgroupids_;
}

// -------------------------------------------------------------------

// SGOMs_Fire_Success

// required int32 cbChairID = 1;
inline bool SGOMs_Fire_Success::has_cbchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Fire_Success::set_has_cbchairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Fire_Success::clear_has_cbchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Fire_Success::clear_cbchairid() {
  cbchairid_ = 0;
  clear_has_cbchairid();
}
inline ::google::protobuf::int32 SGOMs_Fire_Success::cbchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fire_Success.cbChairID)
  return cbchairid_;
}
inline void SGOMs_Fire_Success::set_cbchairid(::google::protobuf::int32 value) {
  set_has_cbchairid();
  cbchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fire_Success.cbChairID)
}

// required int32 fRote = 2;
inline bool SGOMs_Fire_Success::has_frote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Fire_Success::set_has_frote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Fire_Success::clear_has_frote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Fire_Success::clear_frote() {
  frote_ = 0;
  clear_has_frote();
}
inline ::google::protobuf::int32 SGOMs_Fire_Success::frote() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fire_Success.fRote)
  return frote_;
}
inline void SGOMs_Fire_Success::set_frote(::google::protobuf::int32 value) {
  set_has_frote();
  frote_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fire_Success.fRote)
}

// -------------------------------------------------------------------

// SGOMs_Fire_Failed

// required int32 wChairID = 1;
inline bool SGOMs_Fire_Failed::has_wchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Fire_Failed::set_has_wchairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Fire_Failed::clear_has_wchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Fire_Failed::clear_wchairid() {
  wchairid_ = 0;
  clear_has_wchairid();
}
inline ::google::protobuf::int32 SGOMs_Fire_Failed::wchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fire_Failed.wChairID)
  return wchairid_;
}
inline void SGOMs_Fire_Failed::set_wchairid(::google::protobuf::int32 value) {
  set_has_wchairid();
  wchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fire_Failed.wChairID)
}

// required string szReason = 2;
inline bool SGOMs_Fire_Failed::has_szreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Fire_Failed::set_has_szreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Fire_Failed::clear_has_szreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Fire_Failed::clear_szreason() {
  if (szreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szreason_->clear();
  }
  clear_has_szreason();
}
inline const ::std::string& SGOMs_Fire_Failed::szreason() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
  return *szreason_;
}
inline void SGOMs_Fire_Failed::set_szreason(const ::std::string& value) {
  set_has_szreason();
  if (szreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szreason_ = new ::std::string;
  }
  szreason_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
}
inline void SGOMs_Fire_Failed::set_szreason(const char* value) {
  set_has_szreason();
  if (szreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szreason_ = new ::std::string;
  }
  szreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
}
inline void SGOMs_Fire_Failed::set_szreason(const char* value, size_t size) {
  set_has_szreason();
  if (szreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szreason_ = new ::std::string;
  }
  szreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
}
inline ::std::string* SGOMs_Fire_Failed::mutable_szreason() {
  set_has_szreason();
  if (szreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
  return szreason_;
}
inline ::std::string* SGOMs_Fire_Failed::release_szreason() {
  clear_has_szreason();
  if (szreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = szreason_;
    szreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SGOMs_Fire_Failed::set_allocated_szreason(::std::string* szreason) {
  if (szreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szreason_;
  }
  if (szreason) {
    set_has_szreason();
    szreason_ = szreason;
  } else {
    clear_has_szreason();
    szreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.SGOMs_Fire_Failed.szReason)
}

// -------------------------------------------------------------------

// SGOMs_Change_Cannon_Ret

// required int32 cbChairID = 1;
inline bool SGOMs_Change_Cannon_Ret::has_cbchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Change_Cannon_Ret::set_has_cbchairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Change_Cannon_Ret::clear_has_cbchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Change_Cannon_Ret::clear_cbchairid() {
  cbchairid_ = 0;
  clear_has_cbchairid();
}
inline ::google::protobuf::int32 SGOMs_Change_Cannon_Ret::cbchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Change_Cannon_Ret.cbChairID)
  return cbchairid_;
}
inline void SGOMs_Change_Cannon_Ret::set_cbchairid(::google::protobuf::int32 value) {
  set_has_cbchairid();
  cbchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Change_Cannon_Ret.cbChairID)
}

// required int32 cbStyle = 2;
inline bool SGOMs_Change_Cannon_Ret::has_cbstyle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Change_Cannon_Ret::set_has_cbstyle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Change_Cannon_Ret::clear_has_cbstyle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Change_Cannon_Ret::clear_cbstyle() {
  cbstyle_ = 0;
  clear_has_cbstyle();
}
inline ::google::protobuf::int32 SGOMs_Change_Cannon_Ret::cbstyle() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Change_Cannon_Ret.cbStyle)
  return cbstyle_;
}
inline void SGOMs_Change_Cannon_Ret::set_cbstyle(::google::protobuf::int32 value) {
  set_has_cbstyle();
  cbstyle_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Change_Cannon_Ret.cbStyle)
}

// required int32 wCost = 3;
inline bool SGOMs_Change_Cannon_Ret::has_wcost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_Change_Cannon_Ret::set_has_wcost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_Change_Cannon_Ret::clear_has_wcost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_Change_Cannon_Ret::clear_wcost() {
  wcost_ = 0;
  clear_has_wcost();
}
inline ::google::protobuf::int32 SGOMs_Change_Cannon_Ret::wcost() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Change_Cannon_Ret.wCost)
  return wcost_;
}
inline void SGOMs_Change_Cannon_Ret::set_wcost(::google::protobuf::int32 value) {
  set_has_wcost();
  wcost_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Change_Cannon_Ret.wCost)
}

// -------------------------------------------------------------------

// SGOMs_Cast_Nets_Success

// required int32 cbCount = 1;
inline bool SGOMs_Cast_Nets_Success::has_cbcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Cast_Nets_Success::set_has_cbcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Cast_Nets_Success::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Cast_Nets_Success::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 SGOMs_Cast_Nets_Success::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Cast_Nets_Success.cbCount)
  return cbcount_;
}
inline void SGOMs_Cast_Nets_Success::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Cast_Nets_Success.cbCount)
}

// required int32 cbChairID = 2;
inline bool SGOMs_Cast_Nets_Success::has_cbchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_Cast_Nets_Success::set_has_cbchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_Cast_Nets_Success::clear_has_cbchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_Cast_Nets_Success::clear_cbchairid() {
  cbchairid_ = 0;
  clear_has_cbchairid();
}
inline ::google::protobuf::int32 SGOMs_Cast_Nets_Success::cbchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Cast_Nets_Success.cbChairID)
  return cbchairid_;
}
inline void SGOMs_Cast_Nets_Success::set_cbchairid(::google::protobuf::int32 value) {
  set_has_cbchairid();
  cbchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Cast_Nets_Success.cbChairID)
}

// required int32 totalGoin = 3;
inline bool SGOMs_Cast_Nets_Success::has_totalgoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_Cast_Nets_Success::set_has_totalgoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_Cast_Nets_Success::clear_has_totalgoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_Cast_Nets_Success::clear_totalgoin() {
  totalgoin_ = 0;
  clear_has_totalgoin();
}
inline ::google::protobuf::int32 SGOMs_Cast_Nets_Success::totalgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Cast_Nets_Success.totalGoin)
  return totalgoin_;
}
inline void SGOMs_Cast_Nets_Success::set_totalgoin(::google::protobuf::int32 value) {
  set_has_totalgoin();
  totalgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Cast_Nets_Success.totalGoin)
}

// required int32 addGoin = 4;
inline bool SGOMs_Cast_Nets_Success::has_addgoin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGOMs_Cast_Nets_Success::set_has_addgoin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGOMs_Cast_Nets_Success::clear_has_addgoin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGOMs_Cast_Nets_Success::clear_addgoin() {
  addgoin_ = 0;
  clear_has_addgoin();
}
inline ::google::protobuf::int32 SGOMs_Cast_Nets_Success::addgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Cast_Nets_Success.addGoin)
  return addgoin_;
}
inline void SGOMs_Cast_Nets_Success::set_addgoin(::google::protobuf::int32 value) {
  set_has_addgoin();
  addgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Cast_Nets_Success.addGoin)
}

// repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
inline int SGOMs_Cast_Nets_Success::fishids_size() const {
  return fishids_.size();
}
inline void SGOMs_Cast_Nets_Success::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_Cast_Nets_Success::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Cast_Nets_Success.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Cast_Nets_Success::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_Cast_Nets_Success.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_Cast_Nets_Success::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMs_Cast_Nets_Success.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
SGOMs_Cast_Nets_Success::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMs_Cast_Nets_Success.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
SGOMs_Cast_Nets_Success::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMs_Cast_Nets_Success.FishIDs)
  return &fishids_;
}

// -------------------------------------------------------------------

// SGOMs_Get_ItemLock

// required int32 gameID = 1;
inline bool SGOMs_Get_ItemLock::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Get_ItemLock::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Get_ItemLock::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Get_ItemLock::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 SGOMs_Get_ItemLock::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Get_ItemLock.gameID)
  return gameid_;
}
inline void SGOMs_Get_ItemLock::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Get_ItemLock.gameID)
}

// -------------------------------------------------------------------

// SGOMs_Get_ItemStop

// required int32 gameID = 1;
inline bool SGOMs_Get_ItemStop::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_Get_ItemStop::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_Get_ItemStop::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_Get_ItemStop::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 SGOMs_Get_ItemStop::gameid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_Get_ItemStop.gameID)
  return gameid_;
}
inline void SGOMs_Get_ItemStop::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_Get_ItemStop.gameID)
}

// -------------------------------------------------------------------

// COGMs_OnFire

// required float fRote = 1;
inline bool COGMs_OnFire::has_frote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COGMs_OnFire::set_has_frote() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COGMs_OnFire::clear_has_frote() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COGMs_OnFire::clear_frote() {
  frote_ = 0;
  clear_has_frote();
}
inline float COGMs_OnFire::frote() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_OnFire.fRote)
  return frote_;
}
inline void COGMs_OnFire::set_frote(float value) {
  set_has_frote();
  frote_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_OnFire.fRote)
}

// required int32 canonlv = 2;
inline bool COGMs_OnFire::has_canonlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COGMs_OnFire::set_has_canonlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COGMs_OnFire::clear_has_canonlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COGMs_OnFire::clear_canonlv() {
  canonlv_ = 0;
  clear_has_canonlv();
}
inline ::google::protobuf::int32 COGMs_OnFire::canonlv() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_OnFire.canonlv)
  return canonlv_;
}
inline void COGMs_OnFire::set_canonlv(::google::protobuf::int32 value) {
  set_has_canonlv();
  canonlv_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_OnFire.canonlv)
}

// -------------------------------------------------------------------

// COGMs_Cast_Nets

// required int32 cbCount = 1;
inline bool COGMs_Cast_Nets::has_cbcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COGMs_Cast_Nets::set_has_cbcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COGMs_Cast_Nets::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COGMs_Cast_Nets::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 COGMs_Cast_Nets::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_Cast_Nets.cbCount)
  return cbcount_;
}
inline void COGMs_Cast_Nets::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_Cast_Nets.cbCount)
}

// required int32 wRatio = 2;
inline bool COGMs_Cast_Nets::has_wratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COGMs_Cast_Nets::set_has_wratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COGMs_Cast_Nets::clear_has_wratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COGMs_Cast_Nets::clear_wratio() {
  wratio_ = 0;
  clear_has_wratio();
}
inline ::google::protobuf::int32 COGMs_Cast_Nets::wratio() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_Cast_Nets.wRatio)
  return wratio_;
}
inline void COGMs_Cast_Nets::set_wratio(::google::protobuf::int32 value) {
  set_has_wratio();
  wratio_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_Cast_Nets.wRatio)
}

// repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
inline int COGMs_Cast_Nets::fishids_size() const {
  return fishids_.size();
}
inline void COGMs_Cast_Nets::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& COGMs_Cast_Nets::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_Cast_Nets.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* COGMs_Cast_Nets::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COGMs_Cast_Nets.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* COGMs_Cast_Nets::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.COGMs_Cast_Nets.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
COGMs_Cast_Nets::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.COGMs_Cast_Nets.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
COGMs_Cast_Nets::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.COGMs_Cast_Nets.FishIDs)
  return &fishids_;
}

// -------------------------------------------------------------------

// COGMs_HitTeam

// required int32 cbCount = 1;
inline bool COGMs_HitTeam::has_cbcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COGMs_HitTeam::set_has_cbcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COGMs_HitTeam::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COGMs_HitTeam::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 COGMs_HitTeam::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitTeam.cbCount)
  return cbcount_;
}
inline void COGMs_HitTeam::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_HitTeam.cbCount)
}

// required .com.game.Protobuf.Fish_Object hitFish = 2;
inline bool COGMs_HitTeam::has_hitfish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COGMs_HitTeam::set_has_hitfish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COGMs_HitTeam::clear_has_hitfish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COGMs_HitTeam::clear_hitfish() {
  if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
  clear_has_hitfish();
}
inline const ::com::game::Protobuf::Fish_Object& COGMs_HitTeam::hitfish() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitTeam.hitFish)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hitfish_ != NULL ? *hitfish_ : *default_instance().hitfish_;
#else
  return hitfish_ != NULL ? *hitfish_ : *default_instance_->hitfish_;
#endif
}
inline ::com::game::Protobuf::Fish_Object* COGMs_HitTeam::mutable_hitfish() {
  set_has_hitfish();
  if (hitfish_ == NULL) hitfish_ = new ::com::game::Protobuf::Fish_Object;
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COGMs_HitTeam.hitFish)
  return hitfish_;
}
inline ::com::game::Protobuf::Fish_Object* COGMs_HitTeam::release_hitfish() {
  clear_has_hitfish();
  ::com::game::Protobuf::Fish_Object* temp = hitfish_;
  hitfish_ = NULL;
  return temp;
}
inline void COGMs_HitTeam::set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish) {
  delete hitfish_;
  hitfish_ = hitfish;
  if (hitfish) {
    set_has_hitfish();
  } else {
    clear_has_hitfish();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.COGMs_HitTeam.hitFish)
}

// repeated .com.game.Protobuf.Net_Object FishIDs = 3;
inline int COGMs_HitTeam::fishids_size() const {
  return fishids_.size();
}
inline void COGMs_HitTeam::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Net_Object& COGMs_HitTeam::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitTeam.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Net_Object* COGMs_HitTeam::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COGMs_HitTeam.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Net_Object* COGMs_HitTeam::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.COGMs_HitTeam.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >&
COGMs_HitTeam::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.COGMs_HitTeam.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >*
COGMs_HitTeam::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.COGMs_HitTeam.FishIDs)
  return &fishids_;
}

// -------------------------------------------------------------------

// SGOMs_HitTeam_Success

// required int32 cbCount = 1;
inline bool SGOMs_HitTeam_Success::has_cbcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_HitTeam_Success::set_has_cbcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_HitTeam_Success::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_HitTeam_Success::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 SGOMs_HitTeam_Success::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.cbCount)
  return cbcount_;
}
inline void SGOMs_HitTeam_Success::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitTeam_Success.cbCount)
}

// required int32 cbChairID = 2;
inline bool SGOMs_HitTeam_Success::has_cbchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_HitTeam_Success::set_has_cbchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_HitTeam_Success::clear_has_cbchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_HitTeam_Success::clear_cbchairid() {
  cbchairid_ = 0;
  clear_has_cbchairid();
}
inline ::google::protobuf::int32 SGOMs_HitTeam_Success::cbchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.cbChairID)
  return cbchairid_;
}
inline void SGOMs_HitTeam_Success::set_cbchairid(::google::protobuf::int32 value) {
  set_has_cbchairid();
  cbchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitTeam_Success.cbChairID)
}

// required int32 totalGoin = 3;
inline bool SGOMs_HitTeam_Success::has_totalgoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_HitTeam_Success::set_has_totalgoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_HitTeam_Success::clear_has_totalgoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_HitTeam_Success::clear_totalgoin() {
  totalgoin_ = 0;
  clear_has_totalgoin();
}
inline ::google::protobuf::int32 SGOMs_HitTeam_Success::totalgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.totalGoin)
  return totalgoin_;
}
inline void SGOMs_HitTeam_Success::set_totalgoin(::google::protobuf::int32 value) {
  set_has_totalgoin();
  totalgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitTeam_Success.totalGoin)
}

// required int32 addGoin = 4;
inline bool SGOMs_HitTeam_Success::has_addgoin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGOMs_HitTeam_Success::set_has_addgoin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGOMs_HitTeam_Success::clear_has_addgoin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGOMs_HitTeam_Success::clear_addgoin() {
  addgoin_ = 0;
  clear_has_addgoin();
}
inline ::google::protobuf::int32 SGOMs_HitTeam_Success::addgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.addGoin)
  return addgoin_;
}
inline void SGOMs_HitTeam_Success::set_addgoin(::google::protobuf::int32 value) {
  set_has_addgoin();
  addgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitTeam_Success.addGoin)
}

// required .com.game.Protobuf.Fish_Object hitFish = 5;
inline bool SGOMs_HitTeam_Success::has_hitfish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGOMs_HitTeam_Success::set_has_hitfish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGOMs_HitTeam_Success::clear_has_hitfish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGOMs_HitTeam_Success::clear_hitfish() {
  if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
  clear_has_hitfish();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_HitTeam_Success::hitfish() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.hitFish)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hitfish_ != NULL ? *hitfish_ : *default_instance().hitfish_;
#else
  return hitfish_ != NULL ? *hitfish_ : *default_instance_->hitfish_;
#endif
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitTeam_Success::mutable_hitfish() {
  set_has_hitfish();
  if (hitfish_ == NULL) hitfish_ = new ::com::game::Protobuf::Fish_Object;
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_HitTeam_Success.hitFish)
  return hitfish_;
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitTeam_Success::release_hitfish() {
  clear_has_hitfish();
  ::com::game::Protobuf::Fish_Object* temp = hitfish_;
  hitfish_ = NULL;
  return temp;
}
inline void SGOMs_HitTeam_Success::set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish) {
  delete hitfish_;
  hitfish_ = hitfish;
  if (hitfish) {
    set_has_hitfish();
  } else {
    clear_has_hitfish();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.SGOMs_HitTeam_Success.hitFish)
}

// repeated .com.game.Protobuf.Net_Object FishIDs = 6;
inline int SGOMs_HitTeam_Success::fishids_size() const {
  return fishids_.size();
}
inline void SGOMs_HitTeam_Success::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Net_Object& SGOMs_HitTeam_Success::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitTeam_Success.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Net_Object* SGOMs_HitTeam_Success::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_HitTeam_Success.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Net_Object* SGOMs_HitTeam_Success::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMs_HitTeam_Success.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >&
SGOMs_HitTeam_Success::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMs_HitTeam_Success.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Net_Object >*
SGOMs_HitTeam_Success::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMs_HitTeam_Success.FishIDs)
  return &fishids_;
}

// -------------------------------------------------------------------

// COGMs_HitSceenBomb

// required int32 wRatio = 1;
inline bool COGMs_HitSceenBomb::has_wratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COGMs_HitSceenBomb::set_has_wratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COGMs_HitSceenBomb::clear_has_wratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COGMs_HitSceenBomb::clear_wratio() {
  wratio_ = 0;
  clear_has_wratio();
}
inline ::google::protobuf::int32 COGMs_HitSceenBomb::wratio() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitSceenBomb.wRatio)
  return wratio_;
}
inline void COGMs_HitSceenBomb::set_wratio(::google::protobuf::int32 value) {
  set_has_wratio();
  wratio_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_HitSceenBomb.wRatio)
}

// required int32 cbCount = 2;
inline bool COGMs_HitSceenBomb::has_cbcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COGMs_HitSceenBomb::set_has_cbcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COGMs_HitSceenBomb::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COGMs_HitSceenBomb::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 COGMs_HitSceenBomb::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitSceenBomb.cbCount)
  return cbcount_;
}
inline void COGMs_HitSceenBomb::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.COGMs_HitSceenBomb.cbCount)
}

// repeated .com.game.Protobuf.Fish_Object FishIDs = 3;
inline int COGMs_HitSceenBomb::fishids_size() const {
  return fishids_.size();
}
inline void COGMs_HitSceenBomb::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& COGMs_HitSceenBomb::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.COGMs_HitSceenBomb.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* COGMs_HitSceenBomb::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.COGMs_HitSceenBomb.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* COGMs_HitSceenBomb::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.COGMs_HitSceenBomb.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
COGMs_HitSceenBomb::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.COGMs_HitSceenBomb.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
COGMs_HitSceenBomb::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.COGMs_HitSceenBomb.FishIDs)
  return &fishids_;
}

// -------------------------------------------------------------------

// SGOMs_HitSceenBomb_Success

// required int32 cbCount = 1;
inline bool SGOMs_HitSceenBomb_Success::has_cbcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGOMs_HitSceenBomb_Success::set_has_cbcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGOMs_HitSceenBomb_Success::clear_has_cbcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGOMs_HitSceenBomb_Success::clear_cbcount() {
  cbcount_ = 0;
  clear_has_cbcount();
}
inline ::google::protobuf::int32 SGOMs_HitSceenBomb_Success::cbcount() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.cbCount)
  return cbcount_;
}
inline void SGOMs_HitSceenBomb_Success::set_cbcount(::google::protobuf::int32 value) {
  set_has_cbcount();
  cbcount_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitSceenBomb_Success.cbCount)
}

// required int32 cbChairID = 2;
inline bool SGOMs_HitSceenBomb_Success::has_cbchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGOMs_HitSceenBomb_Success::set_has_cbchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGOMs_HitSceenBomb_Success::clear_has_cbchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGOMs_HitSceenBomb_Success::clear_cbchairid() {
  cbchairid_ = 0;
  clear_has_cbchairid();
}
inline ::google::protobuf::int32 SGOMs_HitSceenBomb_Success::cbchairid() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.cbChairID)
  return cbchairid_;
}
inline void SGOMs_HitSceenBomb_Success::set_cbchairid(::google::protobuf::int32 value) {
  set_has_cbchairid();
  cbchairid_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitSceenBomb_Success.cbChairID)
}

// required int32 totalGoin = 3;
inline bool SGOMs_HitSceenBomb_Success::has_totalgoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGOMs_HitSceenBomb_Success::set_has_totalgoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGOMs_HitSceenBomb_Success::clear_has_totalgoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGOMs_HitSceenBomb_Success::clear_totalgoin() {
  totalgoin_ = 0;
  clear_has_totalgoin();
}
inline ::google::protobuf::int32 SGOMs_HitSceenBomb_Success::totalgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.totalGoin)
  return totalgoin_;
}
inline void SGOMs_HitSceenBomb_Success::set_totalgoin(::google::protobuf::int32 value) {
  set_has_totalgoin();
  totalgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitSceenBomb_Success.totalGoin)
}

// required int32 addGoin = 4;
inline bool SGOMs_HitSceenBomb_Success::has_addgoin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGOMs_HitSceenBomb_Success::set_has_addgoin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGOMs_HitSceenBomb_Success::clear_has_addgoin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGOMs_HitSceenBomb_Success::clear_addgoin() {
  addgoin_ = 0;
  clear_has_addgoin();
}
inline ::google::protobuf::int32 SGOMs_HitSceenBomb_Success::addgoin() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.addGoin)
  return addgoin_;
}
inline void SGOMs_HitSceenBomb_Success::set_addgoin(::google::protobuf::int32 value) {
  set_has_addgoin();
  addgoin_ = value;
  // @@protoc_insertion_point(field_set:com.game.Protobuf.SGOMs_HitSceenBomb_Success.addGoin)
}

// required .com.game.Protobuf.Fish_Object hitFish = 5;
inline bool SGOMs_HitSceenBomb_Success::has_hitfish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGOMs_HitSceenBomb_Success::set_has_hitfish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGOMs_HitSceenBomb_Success::clear_has_hitfish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGOMs_HitSceenBomb_Success::clear_hitfish() {
  if (hitfish_ != NULL) hitfish_->::com::game::Protobuf::Fish_Object::Clear();
  clear_has_hitfish();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_HitSceenBomb_Success::hitfish() const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.hitFish)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hitfish_ != NULL ? *hitfish_ : *default_instance().hitfish_;
#else
  return hitfish_ != NULL ? *hitfish_ : *default_instance_->hitfish_;
#endif
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitSceenBomb_Success::mutable_hitfish() {
  set_has_hitfish();
  if (hitfish_ == NULL) hitfish_ = new ::com::game::Protobuf::Fish_Object;
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_HitSceenBomb_Success.hitFish)
  return hitfish_;
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitSceenBomb_Success::release_hitfish() {
  clear_has_hitfish();
  ::com::game::Protobuf::Fish_Object* temp = hitfish_;
  hitfish_ = NULL;
  return temp;
}
inline void SGOMs_HitSceenBomb_Success::set_allocated_hitfish(::com::game::Protobuf::Fish_Object* hitfish) {
  delete hitfish_;
  hitfish_ = hitfish;
  if (hitfish) {
    set_has_hitfish();
  } else {
    clear_has_hitfish();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.Protobuf.SGOMs_HitSceenBomb_Success.hitFish)
}

// repeated .com.game.Protobuf.Fish_Object FishIDs = 6;
inline int SGOMs_HitSceenBomb_Success::fishids_size() const {
  return fishids_.size();
}
inline void SGOMs_HitSceenBomb_Success::clear_fishids() {
  fishids_.Clear();
}
inline const ::com::game::Protobuf::Fish_Object& SGOMs_HitSceenBomb_Success::fishids(int index) const {
  // @@protoc_insertion_point(field_get:com.game.Protobuf.SGOMs_HitSceenBomb_Success.FishIDs)
  return fishids_.Get(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitSceenBomb_Success::mutable_fishids(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.Protobuf.SGOMs_HitSceenBomb_Success.FishIDs)
  return fishids_.Mutable(index);
}
inline ::com::game::Protobuf::Fish_Object* SGOMs_HitSceenBomb_Success::add_fishids() {
  // @@protoc_insertion_point(field_add:com.game.Protobuf.SGOMs_HitSceenBomb_Success.FishIDs)
  return fishids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >&
SGOMs_HitSceenBomb_Success::fishids() const {
  // @@protoc_insertion_point(field_list:com.game.Protobuf.SGOMs_HitSceenBomb_Success.FishIDs)
  return fishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::Protobuf::Fish_Object >*
SGOMs_HitSceenBomb_Success::mutable_fishids() {
  // @@protoc_insertion_point(field_mutable_list:com.game.Protobuf.SGOMs_HitSceenBomb_Success.FishIDs)
  return &fishids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameServer_2eproto__INCLUDED
