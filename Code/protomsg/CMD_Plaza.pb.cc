// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CMD_Plaza.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CMD_Plaza.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace Protobuf {

void protobuf_ShutdownFile_CMD_5fPlaza_2eproto() {
  delete CMD_GP_LogonByAccounts::default_instance_;
  delete CMD_GP_LogonByUserID::default_instance_;
  delete CMD_GP_RegisterAccounts::default_instance_;
  delete CMD_GP_LogonSuccess::default_instance_;
  delete CMD_GP_LogonError::default_instance_;
  delete CMD_GP_ListConfig::default_instance_;
  delete CMD_GP_Version::default_instance_;
  delete CMD_GP_ModifyIndividual::default_instance_;
  delete CMD_GP_UploadCustomFace::default_instance_;
  delete CMD_GP_DownloadFaceSuccess::default_instance_;
  delete CMD_GP_DownloadFace::default_instance_;
  delete CMD_GP_UploadFaceResult::default_instance_;
  delete CMD_GP_DeleteFaceResult::default_instance_;
  delete CMD_GP_CustomFaceDelete::default_instance_;
  delete CMD_GP_ModifyIndividualResult::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CMD_5fPlaza_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CMD_5fPlaza_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_GP_LogonByAccounts::default_instance_ = new CMD_GP_LogonByAccounts();
  CMD_GP_LogonByUserID::default_instance_ = new CMD_GP_LogonByUserID();
  CMD_GP_RegisterAccounts::default_instance_ = new CMD_GP_RegisterAccounts();
  CMD_GP_LogonSuccess::default_instance_ = new CMD_GP_LogonSuccess();
  CMD_GP_LogonError::default_instance_ = new CMD_GP_LogonError();
  CMD_GP_ListConfig::default_instance_ = new CMD_GP_ListConfig();
  CMD_GP_Version::default_instance_ = new CMD_GP_Version();
  CMD_GP_ModifyIndividual::default_instance_ = new CMD_GP_ModifyIndividual();
  CMD_GP_UploadCustomFace::default_instance_ = new CMD_GP_UploadCustomFace();
  CMD_GP_DownloadFaceSuccess::default_instance_ = new CMD_GP_DownloadFaceSuccess();
  CMD_GP_DownloadFace::default_instance_ = new CMD_GP_DownloadFace();
  CMD_GP_UploadFaceResult::default_instance_ = new CMD_GP_UploadFaceResult();
  CMD_GP_DeleteFaceResult::default_instance_ = new CMD_GP_DeleteFaceResult();
  CMD_GP_CustomFaceDelete::default_instance_ = new CMD_GP_CustomFaceDelete();
  CMD_GP_ModifyIndividualResult::default_instance_ = new CMD_GP_ModifyIndividualResult();
  CMD_GP_LogonByAccounts::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonByUserID::default_instance_->InitAsDefaultInstance();
  CMD_GP_RegisterAccounts::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonError::default_instance_->InitAsDefaultInstance();
  CMD_GP_ListConfig::default_instance_->InitAsDefaultInstance();
  CMD_GP_Version::default_instance_->InitAsDefaultInstance();
  CMD_GP_ModifyIndividual::default_instance_->InitAsDefaultInstance();
  CMD_GP_UploadCustomFace::default_instance_->InitAsDefaultInstance();
  CMD_GP_DownloadFaceSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GP_DownloadFace::default_instance_->InitAsDefaultInstance();
  CMD_GP_UploadFaceResult::default_instance_->InitAsDefaultInstance();
  CMD_GP_DeleteFaceResult::default_instance_->InitAsDefaultInstance();
  CMD_GP_CustomFaceDelete::default_instance_->InitAsDefaultInstance();
  CMD_GP_ModifyIndividualResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CMD_5fPlaza_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CMD_5fPlaza_2eproto_once_);
void protobuf_AddDesc_CMD_5fPlaza_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CMD_5fPlaza_2eproto_once_,
                 &protobuf_AddDesc_CMD_5fPlaza_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CMD_5fPlaza_2eproto {
  StaticDescriptorInitializer_CMD_5fPlaza_2eproto() {
    protobuf_AddDesc_CMD_5fPlaza_2eproto();
  }
} static_descriptor_initializer_CMD_5fPlaza_2eproto_;
#endif
bool GCMD_IsValid(int value) {
  switch(value) {
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

bool SYSCMD_IsValid(int value) {
  switch(value) {
    case 3:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

bool CCMD_IsValid(int value) {
  switch(value) {
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonByAccounts::kDwPlazaVersionFieldNumber;
const int CMD_GP_LogonByAccounts::kSzAccountsFieldNumber;
const int CMD_GP_LogonByAccounts::kSzPassuint32FieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonByAccounts::CMD_GP_LogonByAccounts()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_LogonByAccounts)
}

void CMD_GP_LogonByAccounts::InitAsDefaultInstance() {
}

CMD_GP_LogonByAccounts::CMD_GP_LogonByAccounts(const CMD_GP_LogonByAccounts& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_LogonByAccounts)
}

void CMD_GP_LogonByAccounts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwplazaversion_ = GOOGLE_ULONGLONG(0);
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szpassuint32_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonByAccounts::~CMD_GP_LogonByAccounts() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_LogonByAccounts)
  SharedDtor();
}

void CMD_GP_LogonByAccounts::SharedDtor() {
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassuint32_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_LogonByAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_LogonByAccounts& CMD_GP_LogonByAccounts::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_LogonByAccounts* CMD_GP_LogonByAccounts::default_instance_ = NULL;

CMD_GP_LogonByAccounts* CMD_GP_LogonByAccounts::New() const {
  return new CMD_GP_LogonByAccounts;
}

void CMD_GP_LogonByAccounts::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dwplazaversion_ = GOOGLE_ULONGLONG(0);
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_szpassuint32()) {
      if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassuint32_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_LogonByAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_LogonByAccounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwPlazaVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 2;
      case 2: {
        if (tag == 18) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szPassuint32;
        break;
      }

      // required string szPassuint32 = 3;
      case 3: {
        if (tag == 26) {
         parse_szPassuint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassuint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_LogonByAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_LogonByAccounts)
  return false;
#undef DO_
}

void CMD_GP_LogonByAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_LogonByAccounts)
  // required uint64 dwPlazaVersion = 1;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwplazaversion(), output);
  }

  // required string szAccounts = 2;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szaccounts(), output);
  }

  // required string szPassuint32 = 3;
  if (has_szpassuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szpassuint32(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_LogonByAccounts)
}

int CMD_GP_LogonByAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwPlazaVersion = 1;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwplazaversion());
    }

    // required string szAccounts = 2;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szPassuint32 = 3;
    if (has_szpassuint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassuint32());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonByAccounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_LogonByAccounts*>(&from));
}

void CMD_GP_LogonByAccounts::MergeFrom(const CMD_GP_LogonByAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_szpassuint32()) {
      set_szpassuint32(from.szpassuint32());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_LogonByAccounts::CopyFrom(const CMD_GP_LogonByAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonByAccounts::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_LogonByAccounts::Swap(CMD_GP_LogonByAccounts* other) {
  if (other != this) {
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(szpassuint32_, other->szpassuint32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_LogonByAccounts::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_LogonByAccounts";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonByUserID::kDwPlazaVersionFieldNumber;
const int CMD_GP_LogonByUserID::kDwUserIDFieldNumber;
const int CMD_GP_LogonByUserID::kSzPassuint32FieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonByUserID::CMD_GP_LogonByUserID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_LogonByUserID)
}

void CMD_GP_LogonByUserID::InitAsDefaultInstance() {
}

CMD_GP_LogonByUserID::CMD_GP_LogonByUserID(const CMD_GP_LogonByUserID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_LogonByUserID)
}

void CMD_GP_LogonByUserID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwplazaversion_ = GOOGLE_ULONGLONG(0);
  dwuserid_ = GOOGLE_ULONGLONG(0);
  szpassuint32_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonByUserID::~CMD_GP_LogonByUserID() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_LogonByUserID)
  SharedDtor();
}

void CMD_GP_LogonByUserID::SharedDtor() {
  if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassuint32_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_LogonByUserID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_LogonByUserID& CMD_GP_LogonByUserID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_LogonByUserID* CMD_GP_LogonByUserID::default_instance_ = NULL;

CMD_GP_LogonByUserID* CMD_GP_LogonByUserID::New() const {
  return new CMD_GP_LogonByUserID;
}

void CMD_GP_LogonByUserID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_LogonByUserID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dwplazaversion_, dwuserid_);
    if (has_szpassuint32()) {
      if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassuint32_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_LogonByUserID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_LogonByUserID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwPlazaVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwUserID;
        break;
      }

      // required uint64 dwUserID = 2;
      case 2: {
        if (tag == 16) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szPassuint32;
        break;
      }

      // required string szPassuint32 = 3;
      case 3: {
        if (tag == 26) {
         parse_szPassuint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassuint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_LogonByUserID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_LogonByUserID)
  return false;
#undef DO_
}

void CMD_GP_LogonByUserID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_LogonByUserID)
  // required uint64 dwPlazaVersion = 1;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwplazaversion(), output);
  }

  // required uint64 dwUserID = 2;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwuserid(), output);
  }

  // required string szPassuint32 = 3;
  if (has_szpassuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szpassuint32(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_LogonByUserID)
}

int CMD_GP_LogonByUserID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwPlazaVersion = 1;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwplazaversion());
    }

    // required uint64 dwUserID = 2;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required string szPassuint32 = 3;
    if (has_szpassuint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassuint32());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonByUserID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_LogonByUserID*>(&from));
}

void CMD_GP_LogonByUserID::MergeFrom(const CMD_GP_LogonByUserID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_szpassuint32()) {
      set_szpassuint32(from.szpassuint32());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_LogonByUserID::CopyFrom(const CMD_GP_LogonByUserID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonByUserID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_LogonByUserID::Swap(CMD_GP_LogonByUserID* other) {
  if (other != this) {
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(szpassuint32_, other->szpassuint32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_LogonByUserID::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_LogonByUserID";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_RegisterAccounts::kWFaceIDFieldNumber;
const int CMD_GP_RegisterAccounts::kCbGenderFieldNumber;
const int CMD_GP_RegisterAccounts::kDwPlazaVersionFieldNumber;
const int CMD_GP_RegisterAccounts::kSzSpreaderFieldNumber;
const int CMD_GP_RegisterAccounts::kSzAccountsFieldNumber;
const int CMD_GP_RegisterAccounts::kSzPassuint32FieldNumber;
#endif  // !_MSC_VER

CMD_GP_RegisterAccounts::CMD_GP_RegisterAccounts()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_RegisterAccounts)
}

void CMD_GP_RegisterAccounts::InitAsDefaultInstance() {
}

CMD_GP_RegisterAccounts::CMD_GP_RegisterAccounts(const CMD_GP_RegisterAccounts& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_RegisterAccounts)
}

void CMD_GP_RegisterAccounts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wfaceid_ = 0u;
  cbgender_ = 0u;
  dwplazaversion_ = GOOGLE_ULONGLONG(0);
  szspreader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szpassuint32_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_RegisterAccounts::~CMD_GP_RegisterAccounts() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_RegisterAccounts)
  SharedDtor();
}

void CMD_GP_RegisterAccounts::SharedDtor() {
  if (szspreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szspreader_;
  }
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassuint32_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_RegisterAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_RegisterAccounts& CMD_GP_RegisterAccounts::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_RegisterAccounts* CMD_GP_RegisterAccounts::default_instance_ = NULL;

CMD_GP_RegisterAccounts* CMD_GP_RegisterAccounts::New() const {
  return new CMD_GP_RegisterAccounts;
}

void CMD_GP_RegisterAccounts::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_RegisterAccounts*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(wfaceid_, dwplazaversion_);
    if (has_szspreader()) {
      if (szspreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szspreader_->clear();
      }
    }
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_szpassuint32()) {
      if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassuint32_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_RegisterAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_RegisterAccounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 wFaceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wfaceid_)));
          set_has_wfaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbGender;
        break;
      }

      // optional uint32 cbGender = 2;
      case 2: {
        if (tag == 16) {
         parse_cbGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwPlazaVersion;
        break;
      }

      // required uint64 dwPlazaVersion = 3;
      case 3: {
        if (tag == 24) {
         parse_dwPlazaVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szSpreader;
        break;
      }

      // required string szSpreader = 4;
      case 4: {
        if (tag == 34) {
         parse_szSpreader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szspreader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 5;
      case 5: {
        if (tag == 42) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_szPassuint32;
        break;
      }

      // required string szPassuint32 = 6;
      case 6: {
        if (tag == 50) {
         parse_szPassuint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassuint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_RegisterAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_RegisterAccounts)
  return false;
#undef DO_
}

void CMD_GP_RegisterAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_RegisterAccounts)
  // required uint32 wFaceID = 1;
  if (has_wfaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wfaceid(), output);
  }

  // optional uint32 cbGender = 2;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cbgender(), output);
  }

  // required uint64 dwPlazaVersion = 3;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dwplazaversion(), output);
  }

  // required string szSpreader = 4;
  if (has_szspreader()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szspreader(), output);
  }

  // required string szAccounts = 5;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->szaccounts(), output);
  }

  // required string szPassuint32 = 6;
  if (has_szpassuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szpassuint32(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_RegisterAccounts)
}

int CMD_GP_RegisterAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 wFaceID = 1;
    if (has_wfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wfaceid());
    }

    // optional uint32 cbGender = 2;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cbgender());
    }

    // required uint64 dwPlazaVersion = 3;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwplazaversion());
    }

    // required string szSpreader = 4;
    if (has_szspreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szspreader());
    }

    // required string szAccounts = 5;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szPassuint32 = 6;
    if (has_szpassuint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassuint32());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_RegisterAccounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_RegisterAccounts*>(&from));
}

void CMD_GP_RegisterAccounts::MergeFrom(const CMD_GP_RegisterAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wfaceid()) {
      set_wfaceid(from.wfaceid());
    }
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
    if (from.has_szspreader()) {
      set_szspreader(from.szspreader());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_szpassuint32()) {
      set_szpassuint32(from.szpassuint32());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_RegisterAccounts::CopyFrom(const CMD_GP_RegisterAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_RegisterAccounts::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void CMD_GP_RegisterAccounts::Swap(CMD_GP_RegisterAccounts* other) {
  if (other != this) {
    std::swap(wfaceid_, other->wfaceid_);
    std::swap(cbgender_, other->cbgender_);
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(szspreader_, other->szspreader_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(szpassuint32_, other->szpassuint32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_RegisterAccounts::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_RegisterAccounts";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonSuccess::kWFaceIDFieldNumber;
const int CMD_GP_LogonSuccess::kCbGenderFieldNumber;
const int CMD_GP_LogonSuccess::kCbMemberFieldNumber;
const int CMD_GP_LogonSuccess::kDwUserIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwGameIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwExperienceFieldNumber;
const int CMD_GP_LogonSuccess::kDwCustomFaceVerFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonSuccess::CMD_GP_LogonSuccess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_LogonSuccess)
}

void CMD_GP_LogonSuccess::InitAsDefaultInstance() {
}

CMD_GP_LogonSuccess::CMD_GP_LogonSuccess(const CMD_GP_LogonSuccess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_LogonSuccess)
}

void CMD_GP_LogonSuccess::SharedCtor() {
  _cached_size_ = 0;
  wfaceid_ = 0u;
  cbgender_ = 0u;
  cbmember_ = 0u;
  dwuserid_ = GOOGLE_ULONGLONG(0);
  dwgameid_ = GOOGLE_ULONGLONG(0);
  dwexperience_ = GOOGLE_ULONGLONG(0);
  dwcustomfacever_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonSuccess::~CMD_GP_LogonSuccess() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_LogonSuccess)
  SharedDtor();
}

void CMD_GP_LogonSuccess::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_LogonSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_LogonSuccess& CMD_GP_LogonSuccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_LogonSuccess* CMD_GP_LogonSuccess::default_instance_ = NULL;

CMD_GP_LogonSuccess* CMD_GP_LogonSuccess::New() const {
  return new CMD_GP_LogonSuccess;
}

void CMD_GP_LogonSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_LogonSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(wfaceid_, cbmember_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_LogonSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_LogonSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 wFaceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wfaceid_)));
          set_has_wfaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbGender;
        break;
      }

      // required uint32 cbGender = 2;
      case 2: {
        if (tag == 16) {
         parse_cbGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cbMember;
        break;
      }

      // required uint32 cbMember = 3;
      case 3: {
        if (tag == 24) {
         parse_cbMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cbmember_)));
          set_has_cbmember();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwUserID;
        break;
      }

      // required uint64 dwUserID = 4;
      case 4: {
        if (tag == 32) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwGameID;
        break;
      }

      // required uint64 dwGameID = 5;
      case 5: {
        if (tag == 40) {
         parse_dwGameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwgameid_)));
          set_has_dwgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwExperience;
        break;
      }

      // required uint64 dwExperience = 6;
      case 6: {
        if (tag == 48) {
         parse_dwExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwexperience_)));
          set_has_dwexperience();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwCustomFaceVer;
        break;
      }

      // required uint64 dwCustomFaceVer = 7;
      case 7: {
        if (tag == 56) {
         parse_dwCustomFaceVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwcustomfacever_)));
          set_has_dwcustomfacever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_LogonSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_LogonSuccess)
  return false;
#undef DO_
}

void CMD_GP_LogonSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_LogonSuccess)
  // required uint32 wFaceID = 1;
  if (has_wfaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wfaceid(), output);
  }

  // required uint32 cbGender = 2;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cbgender(), output);
  }

  // required uint32 cbMember = 3;
  if (has_cbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cbmember(), output);
  }

  // required uint64 dwUserID = 4;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dwuserid(), output);
  }

  // required uint64 dwGameID = 5;
  if (has_dwgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dwgameid(), output);
  }

  // required uint64 dwExperience = 6;
  if (has_dwexperience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dwexperience(), output);
  }

  // required uint64 dwCustomFaceVer = 7;
  if (has_dwcustomfacever()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dwcustomfacever(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_LogonSuccess)
}

int CMD_GP_LogonSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 wFaceID = 1;
    if (has_wfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wfaceid());
    }

    // required uint32 cbGender = 2;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cbgender());
    }

    // required uint32 cbMember = 3;
    if (has_cbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cbmember());
    }

    // required uint64 dwUserID = 4;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required uint64 dwGameID = 5;
    if (has_dwgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwgameid());
    }

    // required uint64 dwExperience = 6;
    if (has_dwexperience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwexperience());
    }

    // required uint64 dwCustomFaceVer = 7;
    if (has_dwcustomfacever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwcustomfacever());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_LogonSuccess*>(&from));
}

void CMD_GP_LogonSuccess::MergeFrom(const CMD_GP_LogonSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wfaceid()) {
      set_wfaceid(from.wfaceid());
    }
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_cbmember()) {
      set_cbmember(from.cbmember());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwgameid()) {
      set_dwgameid(from.dwgameid());
    }
    if (from.has_dwexperience()) {
      set_dwexperience(from.dwexperience());
    }
    if (from.has_dwcustomfacever()) {
      set_dwcustomfacever(from.dwcustomfacever());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_LogonSuccess::CopyFrom(const CMD_GP_LogonSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CMD_GP_LogonSuccess::Swap(CMD_GP_LogonSuccess* other) {
  if (other != this) {
    std::swap(wfaceid_, other->wfaceid_);
    std::swap(cbgender_, other->cbgender_);
    std::swap(cbmember_, other->cbmember_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwgameid_, other->dwgameid_);
    std::swap(dwexperience_, other->dwexperience_);
    std::swap(dwcustomfacever_, other->dwcustomfacever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_LogonSuccess::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_LogonSuccess";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonError::kLErrorCodeFieldNumber;
const int CMD_GP_LogonError::kSzErrorDescribeFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonError::CMD_GP_LogonError()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_LogonError)
}

void CMD_GP_LogonError::InitAsDefaultInstance() {
}

CMD_GP_LogonError::CMD_GP_LogonError(const CMD_GP_LogonError& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_LogonError)
}

void CMD_GP_LogonError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lerrorcode_ = GOOGLE_LONGLONG(0);
  szerrordescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonError::~CMD_GP_LogonError() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_LogonError)
  SharedDtor();
}

void CMD_GP_LogonError::SharedDtor() {
  if (szerrordescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szerrordescribe_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_LogonError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_LogonError& CMD_GP_LogonError::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_LogonError* CMD_GP_LogonError::default_instance_ = NULL;

CMD_GP_LogonError* CMD_GP_LogonError::New() const {
  return new CMD_GP_LogonError;
}

void CMD_GP_LogonError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    lerrorcode_ = GOOGLE_LONGLONG(0);
    if (has_szerrordescribe()) {
      if (szerrordescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szerrordescribe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_LogonError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_LogonError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 lErrorCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lerrorcode_)));
          set_has_lerrorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szErrorDescribe;
        break;
      }

      // required string szErrorDescribe = 2;
      case 2: {
        if (tag == 18) {
         parse_szErrorDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szerrordescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_LogonError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_LogonError)
  return false;
#undef DO_
}

void CMD_GP_LogonError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_LogonError)
  // required sint64 lErrorCode = 1;
  if (has_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->lerrorcode(), output);
  }

  // required string szErrorDescribe = 2;
  if (has_szerrordescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szerrordescribe(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_LogonError)
}

int CMD_GP_LogonError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 lErrorCode = 1;
    if (has_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lerrorcode());
    }

    // required string szErrorDescribe = 2;
    if (has_szerrordescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szerrordescribe());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_LogonError*>(&from));
}

void CMD_GP_LogonError::MergeFrom(const CMD_GP_LogonError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lerrorcode()) {
      set_lerrorcode(from.lerrorcode());
    }
    if (from.has_szerrordescribe()) {
      set_szerrordescribe(from.szerrordescribe());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_LogonError::CopyFrom(const CMD_GP_LogonError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_LogonError::Swap(CMD_GP_LogonError* other) {
  if (other != this) {
    std::swap(lerrorcode_, other->lerrorcode_);
    std::swap(szerrordescribe_, other->szerrordescribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_LogonError::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_LogonError";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ListConfig::kBShowOnLineCountFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ListConfig::CMD_GP_ListConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_ListConfig)
}

void CMD_GP_ListConfig::InitAsDefaultInstance() {
}

CMD_GP_ListConfig::CMD_GP_ListConfig(const CMD_GP_ListConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_ListConfig)
}

void CMD_GP_ListConfig::SharedCtor() {
  _cached_size_ = 0;
  bshowonlinecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ListConfig::~CMD_GP_ListConfig() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_ListConfig)
  SharedDtor();
}

void CMD_GP_ListConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_ListConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_ListConfig& CMD_GP_ListConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_ListConfig* CMD_GP_ListConfig::default_instance_ = NULL;

CMD_GP_ListConfig* CMD_GP_ListConfig::New() const {
  return new CMD_GP_ListConfig;
}

void CMD_GP_ListConfig::Clear() {
  bshowonlinecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_ListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_ListConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bShowOnLineCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bshowonlinecount_)));
          set_has_bshowonlinecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_ListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_ListConfig)
  return false;
#undef DO_
}

void CMD_GP_ListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_ListConfig)
  // required uint32 bShowOnLineCount = 1;
  if (has_bshowonlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bshowonlinecount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_ListConfig)
}

int CMD_GP_ListConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bShowOnLineCount = 1;
    if (has_bshowonlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bshowonlinecount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ListConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_ListConfig*>(&from));
}

void CMD_GP_ListConfig::MergeFrom(const CMD_GP_ListConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bshowonlinecount()) {
      set_bshowonlinecount(from.bshowonlinecount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_ListConfig::CopyFrom(const CMD_GP_ListConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ListConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_ListConfig::Swap(CMD_GP_ListConfig* other) {
  if (other != this) {
    std::swap(bshowonlinecount_, other->bshowonlinecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_ListConfig::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_ListConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_Version::kBNewVersionFieldNumber;
const int CMD_GP_Version::kBAllowConnectFieldNumber;
#endif  // !_MSC_VER

CMD_GP_Version::CMD_GP_Version()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_Version)
}

void CMD_GP_Version::InitAsDefaultInstance() {
}

CMD_GP_Version::CMD_GP_Version(const CMD_GP_Version& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_Version)
}

void CMD_GP_Version::SharedCtor() {
  _cached_size_ = 0;
  bnewversion_ = 0u;
  ballowconnect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_Version::~CMD_GP_Version() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_Version)
  SharedDtor();
}

void CMD_GP_Version::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_Version& CMD_GP_Version::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_Version* CMD_GP_Version::default_instance_ = NULL;

CMD_GP_Version* CMD_GP_Version::New() const {
  return new CMD_GP_Version;
}

void CMD_GP_Version::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_Version*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bnewversion_, ballowconnect_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bNewVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bnewversion_)));
          set_has_bnewversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bAllowConnect;
        break;
      }

      // required uint32 bAllowConnect = 2;
      case 2: {
        if (tag == 16) {
         parse_bAllowConnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ballowconnect_)));
          set_has_ballowconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_Version)
  return false;
#undef DO_
}

void CMD_GP_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_Version)
  // required uint32 bNewVersion = 1;
  if (has_bnewversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bnewversion(), output);
  }

  // required uint32 bAllowConnect = 2;
  if (has_ballowconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ballowconnect(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_Version)
}

int CMD_GP_Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bNewVersion = 1;
    if (has_bnewversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bnewversion());
    }

    // required uint32 bAllowConnect = 2;
    if (has_ballowconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ballowconnect());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_Version*>(&from));
}

void CMD_GP_Version::MergeFrom(const CMD_GP_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnewversion()) {
      set_bnewversion(from.bnewversion());
    }
    if (from.has_ballowconnect()) {
      set_ballowconnect(from.ballowconnect());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_Version::CopyFrom(const CMD_GP_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_Version::Swap(CMD_GP_Version* other) {
  if (other != this) {
    std::swap(bnewversion_, other->bnewversion_);
    std::swap(ballowconnect_, other->ballowconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_Version::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_Version";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ModifyIndividual::kDwUserIDFieldNumber;
const int CMD_GP_ModifyIndividual::kSzNicknameFieldNumber;
const int CMD_GP_ModifyIndividual::kNGenderFieldNumber;
const int CMD_GP_ModifyIndividual::kNAgeFieldNumber;
const int CMD_GP_ModifyIndividual::kSzAddressFieldNumber;
const int CMD_GP_ModifyIndividual::kSzUnderWriteFieldNumber;
const int CMD_GP_ModifyIndividual::kSzPassuint32FieldNumber;
#endif  // !_MSC_VER

CMD_GP_ModifyIndividual::CMD_GP_ModifyIndividual()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_ModifyIndividual)
}

void CMD_GP_ModifyIndividual::InitAsDefaultInstance() {
}

CMD_GP_ModifyIndividual::CMD_GP_ModifyIndividual(const CMD_GP_ModifyIndividual& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_ModifyIndividual)
}

void CMD_GP_ModifyIndividual::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_ULONGLONG(0);
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngender_ = 0;
  nage_ = 0;
  szaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szunderwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szpassuint32_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ModifyIndividual::~CMD_GP_ModifyIndividual() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_ModifyIndividual)
  SharedDtor();
}

void CMD_GP_ModifyIndividual::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  if (szaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaddress_;
  }
  if (szunderwrite_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szunderwrite_;
  }
  if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassuint32_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_ModifyIndividual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_ModifyIndividual& CMD_GP_ModifyIndividual::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_ModifyIndividual* CMD_GP_ModifyIndividual::default_instance_ = NULL;

CMD_GP_ModifyIndividual* CMD_GP_ModifyIndividual::New() const {
  return new CMD_GP_ModifyIndividual;
}

void CMD_GP_ModifyIndividual::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_ModifyIndividual*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ngender_, nage_);
    dwuserid_ = GOOGLE_ULONGLONG(0);
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
    if (has_szaddress()) {
      if (szaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaddress_->clear();
      }
    }
    if (has_szunderwrite()) {
      if (szunderwrite_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szunderwrite_->clear();
      }
    }
    if (has_szpassuint32()) {
      if (szpassuint32_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassuint32_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_ModifyIndividual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_ModifyIndividual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szNickname;
        break;
      }

      // required string szNickname = 2;
      case 2: {
        if (tag == 18) {
         parse_szNickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nGender;
        break;
      }

      // required int32 nGender = 3;
      case 3: {
        if (tag == 24) {
         parse_nGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngender_)));
          set_has_ngender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nAge;
        break;
      }

      // required int32 nAge = 4;
      case 4: {
        if (tag == 32) {
         parse_nAge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nage_)));
          set_has_nage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_szAddress;
        break;
      }

      // required string szAddress = 5;
      case 5: {
        if (tag == 42) {
         parse_szAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_szUnderWrite;
        break;
      }

      // required string szUnderWrite = 6;
      case 6: {
        if (tag == 50) {
         parse_szUnderWrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szunderwrite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_szPassuint32;
        break;
      }

      // required string szPassuint32 = 7;
      case 7: {
        if (tag == 58) {
         parse_szPassuint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassuint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_ModifyIndividual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_ModifyIndividual)
  return false;
#undef DO_
}

void CMD_GP_ModifyIndividual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_ModifyIndividual)
  // required uint64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwuserid(), output);
  }

  // required string szNickname = 2;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sznickname(), output);
  }

  // required int32 nGender = 3;
  if (has_ngender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ngender(), output);
  }

  // required int32 nAge = 4;
  if (has_nage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nage(), output);
  }

  // required string szAddress = 5;
  if (has_szaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->szaddress(), output);
  }

  // required string szUnderWrite = 6;
  if (has_szunderwrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szunderwrite(), output);
  }

  // required string szPassuint32 = 7;
  if (has_szpassuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->szpassuint32(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_ModifyIndividual)
}

int CMD_GP_ModifyIndividual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required string szNickname = 2;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // required int32 nGender = 3;
    if (has_ngender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngender());
    }

    // required int32 nAge = 4;
    if (has_nage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nage());
    }

    // required string szAddress = 5;
    if (has_szaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaddress());
    }

    // required string szUnderWrite = 6;
    if (has_szunderwrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szunderwrite());
    }

    // required string szPassuint32 = 7;
    if (has_szpassuint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassuint32());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ModifyIndividual::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_ModifyIndividual*>(&from));
}

void CMD_GP_ModifyIndividual::MergeFrom(const CMD_GP_ModifyIndividual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_ngender()) {
      set_ngender(from.ngender());
    }
    if (from.has_nage()) {
      set_nage(from.nage());
    }
    if (from.has_szaddress()) {
      set_szaddress(from.szaddress());
    }
    if (from.has_szunderwrite()) {
      set_szunderwrite(from.szunderwrite());
    }
    if (from.has_szpassuint32()) {
      set_szpassuint32(from.szpassuint32());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_ModifyIndividual::CopyFrom(const CMD_GP_ModifyIndividual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ModifyIndividual::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CMD_GP_ModifyIndividual::Swap(CMD_GP_ModifyIndividual* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(ngender_, other->ngender_);
    std::swap(nage_, other->nage_);
    std::swap(szaddress_, other->szaddress_);
    std::swap(szunderwrite_, other->szunderwrite_);
    std::swap(szpassuint32_, other->szpassuint32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_ModifyIndividual::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_ModifyIndividual";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UploadCustomFace::kDwUserIDFieldNumber;
const int CMD_GP_UploadCustomFace::kWCurrentSizeFieldNumber;
const int CMD_GP_UploadCustomFace::kBLastPacketFieldNumber;
const int CMD_GP_UploadCustomFace::kBFirstPacketFieldNumber;
const int CMD_GP_UploadCustomFace::kBFaceDataFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UploadCustomFace::CMD_GP_UploadCustomFace()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_UploadCustomFace)
}

void CMD_GP_UploadCustomFace::InitAsDefaultInstance() {
}

CMD_GP_UploadCustomFace::CMD_GP_UploadCustomFace(const CMD_GP_UploadCustomFace& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_UploadCustomFace)
}

void CMD_GP_UploadCustomFace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_ULONGLONG(0);
  wcurrentsize_ = 0u;
  blastpacket_ = false;
  bfirstpacket_ = false;
  bfacedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UploadCustomFace::~CMD_GP_UploadCustomFace() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_UploadCustomFace)
  SharedDtor();
}

void CMD_GP_UploadCustomFace::SharedDtor() {
  if (bfacedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bfacedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_UploadCustomFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_UploadCustomFace& CMD_GP_UploadCustomFace::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_UploadCustomFace* CMD_GP_UploadCustomFace::default_instance_ = NULL;

CMD_GP_UploadCustomFace* CMD_GP_UploadCustomFace::New() const {
  return new CMD_GP_UploadCustomFace;
}

void CMD_GP_UploadCustomFace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_UploadCustomFace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(dwuserid_, bfirstpacket_);
    if (has_bfacedata()) {
      if (bfacedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bfacedata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_UploadCustomFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_UploadCustomFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wCurrentSize;
        break;
      }

      // required uint32 wCurrentSize = 2;
      case 2: {
        if (tag == 16) {
         parse_wCurrentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcurrentsize_)));
          set_has_wcurrentsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bLastPacket;
        break;
      }

      // required bool bLastPacket = 3;
      case 3: {
        if (tag == 24) {
         parse_bLastPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blastpacket_)));
          set_has_blastpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bFirstPacket;
        break;
      }

      // required bool bFirstPacket = 4;
      case 4: {
        if (tag == 32) {
         parse_bFirstPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfirstpacket_)));
          set_has_bfirstpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bFaceData;
        break;
      }

      // required string bFaceData = 5;
      case 5: {
        if (tag == 42) {
         parse_bFaceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bfacedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_UploadCustomFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_UploadCustomFace)
  return false;
#undef DO_
}

void CMD_GP_UploadCustomFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_UploadCustomFace)
  // required uint64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwuserid(), output);
  }

  // required uint32 wCurrentSize = 2;
  if (has_wcurrentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wcurrentsize(), output);
  }

  // required bool bLastPacket = 3;
  if (has_blastpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blastpacket(), output);
  }

  // required bool bFirstPacket = 4;
  if (has_bfirstpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bfirstpacket(), output);
  }

  // required string bFaceData = 5;
  if (has_bfacedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bfacedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_UploadCustomFace)
}

int CMD_GP_UploadCustomFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required uint32 wCurrentSize = 2;
    if (has_wcurrentsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcurrentsize());
    }

    // required bool bLastPacket = 3;
    if (has_blastpacket()) {
      total_size += 1 + 1;
    }

    // required bool bFirstPacket = 4;
    if (has_bfirstpacket()) {
      total_size += 1 + 1;
    }

    // required string bFaceData = 5;
    if (has_bfacedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bfacedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UploadCustomFace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_UploadCustomFace*>(&from));
}

void CMD_GP_UploadCustomFace::MergeFrom(const CMD_GP_UploadCustomFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_wcurrentsize()) {
      set_wcurrentsize(from.wcurrentsize());
    }
    if (from.has_blastpacket()) {
      set_blastpacket(from.blastpacket());
    }
    if (from.has_bfirstpacket()) {
      set_bfirstpacket(from.bfirstpacket());
    }
    if (from.has_bfacedata()) {
      set_bfacedata(from.bfacedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_UploadCustomFace::CopyFrom(const CMD_GP_UploadCustomFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UploadCustomFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_GP_UploadCustomFace::Swap(CMD_GP_UploadCustomFace* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(wcurrentsize_, other->wcurrentsize_);
    std::swap(blastpacket_, other->blastpacket_);
    std::swap(bfirstpacket_, other->bfirstpacket_);
    std::swap(bfacedata_, other->bfacedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_UploadCustomFace::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_UploadCustomFace";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_DownloadFaceSuccess::kDwToltalSizeFieldNumber;
const int CMD_GP_DownloadFaceSuccess::kDwCurrentSizeFieldNumber;
const int CMD_GP_DownloadFaceSuccess::kDwUserIDFieldNumber;
const int CMD_GP_DownloadFaceSuccess::kBFaceDataFieldNumber;
#endif  // !_MSC_VER

CMD_GP_DownloadFaceSuccess::CMD_GP_DownloadFaceSuccess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
}

void CMD_GP_DownloadFaceSuccess::InitAsDefaultInstance() {
}

CMD_GP_DownloadFaceSuccess::CMD_GP_DownloadFaceSuccess(const CMD_GP_DownloadFaceSuccess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
}

void CMD_GP_DownloadFaceSuccess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwtoltalsize_ = GOOGLE_ULONGLONG(0);
  dwcurrentsize_ = GOOGLE_ULONGLONG(0);
  dwuserid_ = GOOGLE_ULONGLONG(0);
  bfacedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_DownloadFaceSuccess::~CMD_GP_DownloadFaceSuccess() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
  SharedDtor();
}

void CMD_GP_DownloadFaceSuccess::SharedDtor() {
  if (bfacedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bfacedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_DownloadFaceSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_DownloadFaceSuccess& CMD_GP_DownloadFaceSuccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_DownloadFaceSuccess* CMD_GP_DownloadFaceSuccess::default_instance_ = NULL;

CMD_GP_DownloadFaceSuccess* CMD_GP_DownloadFaceSuccess::New() const {
  return new CMD_GP_DownloadFaceSuccess;
}

void CMD_GP_DownloadFaceSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_DownloadFaceSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dwtoltalsize_, dwuserid_);
    if (has_bfacedata()) {
      if (bfacedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bfacedata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_DownloadFaceSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwToltalSize = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwtoltalsize_)));
          set_has_dwtoltalsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwCurrentSize;
        break;
      }

      // required uint64 dwCurrentSize = 2;
      case 2: {
        if (tag == 16) {
         parse_dwCurrentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwcurrentsize_)));
          set_has_dwcurrentsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwUserID;
        break;
      }

      // required uint64 dwUserID = 3;
      case 3: {
        if (tag == 24) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bFaceData;
        break;
      }

      // required string bFaceData = 4;
      case 4: {
        if (tag == 34) {
         parse_bFaceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bfacedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
  return false;
#undef DO_
}

void CMD_GP_DownloadFaceSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
  // required uint64 dwToltalSize = 1;
  if (has_dwtoltalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwtoltalsize(), output);
  }

  // required uint64 dwCurrentSize = 2;
  if (has_dwcurrentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwcurrentsize(), output);
  }

  // required uint64 dwUserID = 3;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dwuserid(), output);
  }

  // required string bFaceData = 4;
  if (has_bfacedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bfacedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_DownloadFaceSuccess)
}

int CMD_GP_DownloadFaceSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwToltalSize = 1;
    if (has_dwtoltalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwtoltalsize());
    }

    // required uint64 dwCurrentSize = 2;
    if (has_dwcurrentsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwcurrentsize());
    }

    // required uint64 dwUserID = 3;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required string bFaceData = 4;
    if (has_bfacedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bfacedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_DownloadFaceSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_DownloadFaceSuccess*>(&from));
}

void CMD_GP_DownloadFaceSuccess::MergeFrom(const CMD_GP_DownloadFaceSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwtoltalsize()) {
      set_dwtoltalsize(from.dwtoltalsize());
    }
    if (from.has_dwcurrentsize()) {
      set_dwcurrentsize(from.dwcurrentsize());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_bfacedata()) {
      set_bfacedata(from.bfacedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_DownloadFaceSuccess::CopyFrom(const CMD_GP_DownloadFaceSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_DownloadFaceSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_DownloadFaceSuccess::Swap(CMD_GP_DownloadFaceSuccess* other) {
  if (other != this) {
    std::swap(dwtoltalsize_, other->dwtoltalsize_);
    std::swap(dwcurrentsize_, other->dwcurrentsize_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(bfacedata_, other->bfacedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_DownloadFaceSuccess::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_DownloadFaceSuccess";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_DownloadFace::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_DownloadFace::CMD_GP_DownloadFace()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_DownloadFace)
}

void CMD_GP_DownloadFace::InitAsDefaultInstance() {
}

CMD_GP_DownloadFace::CMD_GP_DownloadFace(const CMD_GP_DownloadFace& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_DownloadFace)
}

void CMD_GP_DownloadFace::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_DownloadFace::~CMD_GP_DownloadFace() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_DownloadFace)
  SharedDtor();
}

void CMD_GP_DownloadFace::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_DownloadFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_DownloadFace& CMD_GP_DownloadFace::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_DownloadFace* CMD_GP_DownloadFace::default_instance_ = NULL;

CMD_GP_DownloadFace* CMD_GP_DownloadFace::New() const {
  return new CMD_GP_DownloadFace;
}

void CMD_GP_DownloadFace::Clear() {
  dwuserid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_DownloadFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_DownloadFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_DownloadFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_DownloadFace)
  return false;
#undef DO_
}

void CMD_GP_DownloadFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_DownloadFace)
  // required uint64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_DownloadFace)
}

int CMD_GP_DownloadFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_DownloadFace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_DownloadFace*>(&from));
}

void CMD_GP_DownloadFace::MergeFrom(const CMD_GP_DownloadFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_DownloadFace::CopyFrom(const CMD_GP_DownloadFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_DownloadFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_DownloadFace::Swap(CMD_GP_DownloadFace* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_DownloadFace::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_DownloadFace";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UploadFaceResult::kSzDescribeMsgFieldNumber;
const int CMD_GP_UploadFaceResult::kDwFaceVerFieldNumber;
const int CMD_GP_UploadFaceResult::kBOperateSuccessFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UploadFaceResult::CMD_GP_UploadFaceResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_UploadFaceResult)
}

void CMD_GP_UploadFaceResult::InitAsDefaultInstance() {
}

CMD_GP_UploadFaceResult::CMD_GP_UploadFaceResult(const CMD_GP_UploadFaceResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_UploadFaceResult)
}

void CMD_GP_UploadFaceResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szdescribemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwfacever_ = GOOGLE_ULONGLONG(0);
  boperatesuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UploadFaceResult::~CMD_GP_UploadFaceResult() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_UploadFaceResult)
  SharedDtor();
}

void CMD_GP_UploadFaceResult::SharedDtor() {
  if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribemsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_UploadFaceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_UploadFaceResult& CMD_GP_UploadFaceResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_UploadFaceResult* CMD_GP_UploadFaceResult::default_instance_ = NULL;

CMD_GP_UploadFaceResult* CMD_GP_UploadFaceResult::New() const {
  return new CMD_GP_UploadFaceResult;
}

void CMD_GP_UploadFaceResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_UploadFaceResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dwfacever_, boperatesuccess_);
    if (has_szdescribemsg()) {
      if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribemsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_UploadFaceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_UploadFaceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szDescribeMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribemsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwFaceVer;
        break;
      }

      // required uint64 dwFaceVer = 2;
      case 2: {
        if (tag == 16) {
         parse_dwFaceVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfacever_)));
          set_has_dwfacever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bOperateSuccess;
        break;
      }

      // required bool bOperateSuccess = 3;
      case 3: {
        if (tag == 24) {
         parse_bOperateSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boperatesuccess_)));
          set_has_boperatesuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_UploadFaceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_UploadFaceResult)
  return false;
#undef DO_
}

void CMD_GP_UploadFaceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_UploadFaceResult)
  // required string szDescribeMsg = 1;
  if (has_szdescribemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szdescribemsg(), output);
  }

  // required uint64 dwFaceVer = 2;
  if (has_dwfacever()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwfacever(), output);
  }

  // required bool bOperateSuccess = 3;
  if (has_boperatesuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boperatesuccess(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_UploadFaceResult)
}

int CMD_GP_UploadFaceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szDescribeMsg = 1;
    if (has_szdescribemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribemsg());
    }

    // required uint64 dwFaceVer = 2;
    if (has_dwfacever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwfacever());
    }

    // required bool bOperateSuccess = 3;
    if (has_boperatesuccess()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UploadFaceResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_UploadFaceResult*>(&from));
}

void CMD_GP_UploadFaceResult::MergeFrom(const CMD_GP_UploadFaceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szdescribemsg()) {
      set_szdescribemsg(from.szdescribemsg());
    }
    if (from.has_dwfacever()) {
      set_dwfacever(from.dwfacever());
    }
    if (from.has_boperatesuccess()) {
      set_boperatesuccess(from.boperatesuccess());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_UploadFaceResult::CopyFrom(const CMD_GP_UploadFaceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UploadFaceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_UploadFaceResult::Swap(CMD_GP_UploadFaceResult* other) {
  if (other != this) {
    std::swap(szdescribemsg_, other->szdescribemsg_);
    std::swap(dwfacever_, other->dwfacever_);
    std::swap(boperatesuccess_, other->boperatesuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_UploadFaceResult::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_UploadFaceResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_DeleteFaceResult::kSzDescribeMsgFieldNumber;
const int CMD_GP_DeleteFaceResult::kDwFaceVerFieldNumber;
const int CMD_GP_DeleteFaceResult::kBOperateSuccessFieldNumber;
#endif  // !_MSC_VER

CMD_GP_DeleteFaceResult::CMD_GP_DeleteFaceResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_DeleteFaceResult)
}

void CMD_GP_DeleteFaceResult::InitAsDefaultInstance() {
}

CMD_GP_DeleteFaceResult::CMD_GP_DeleteFaceResult(const CMD_GP_DeleteFaceResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_DeleteFaceResult)
}

void CMD_GP_DeleteFaceResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szdescribemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwfacever_ = GOOGLE_ULONGLONG(0);
  boperatesuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_DeleteFaceResult::~CMD_GP_DeleteFaceResult() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_DeleteFaceResult)
  SharedDtor();
}

void CMD_GP_DeleteFaceResult::SharedDtor() {
  if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribemsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_DeleteFaceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_DeleteFaceResult& CMD_GP_DeleteFaceResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_DeleteFaceResult* CMD_GP_DeleteFaceResult::default_instance_ = NULL;

CMD_GP_DeleteFaceResult* CMD_GP_DeleteFaceResult::New() const {
  return new CMD_GP_DeleteFaceResult;
}

void CMD_GP_DeleteFaceResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_DeleteFaceResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dwfacever_, boperatesuccess_);
    if (has_szdescribemsg()) {
      if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribemsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_DeleteFaceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_DeleteFaceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szDescribeMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribemsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwFaceVer;
        break;
      }

      // required uint64 dwFaceVer = 2;
      case 2: {
        if (tag == 16) {
         parse_dwFaceVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfacever_)));
          set_has_dwfacever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bOperateSuccess;
        break;
      }

      // required bool bOperateSuccess = 3;
      case 3: {
        if (tag == 24) {
         parse_bOperateSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boperatesuccess_)));
          set_has_boperatesuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_DeleteFaceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_DeleteFaceResult)
  return false;
#undef DO_
}

void CMD_GP_DeleteFaceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_DeleteFaceResult)
  // required string szDescribeMsg = 1;
  if (has_szdescribemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szdescribemsg(), output);
  }

  // required uint64 dwFaceVer = 2;
  if (has_dwfacever()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwfacever(), output);
  }

  // required bool bOperateSuccess = 3;
  if (has_boperatesuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boperatesuccess(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_DeleteFaceResult)
}

int CMD_GP_DeleteFaceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szDescribeMsg = 1;
    if (has_szdescribemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribemsg());
    }

    // required uint64 dwFaceVer = 2;
    if (has_dwfacever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwfacever());
    }

    // required bool bOperateSuccess = 3;
    if (has_boperatesuccess()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_DeleteFaceResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_DeleteFaceResult*>(&from));
}

void CMD_GP_DeleteFaceResult::MergeFrom(const CMD_GP_DeleteFaceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szdescribemsg()) {
      set_szdescribemsg(from.szdescribemsg());
    }
    if (from.has_dwfacever()) {
      set_dwfacever(from.dwfacever());
    }
    if (from.has_boperatesuccess()) {
      set_boperatesuccess(from.boperatesuccess());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_DeleteFaceResult::CopyFrom(const CMD_GP_DeleteFaceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_DeleteFaceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_DeleteFaceResult::Swap(CMD_GP_DeleteFaceResult* other) {
  if (other != this) {
    std::swap(szdescribemsg_, other->szdescribemsg_);
    std::swap(dwfacever_, other->dwfacever_);
    std::swap(boperatesuccess_, other->boperatesuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_DeleteFaceResult::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_DeleteFaceResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_CustomFaceDelete::kDwUserIDFieldNumber;
const int CMD_GP_CustomFaceDelete::kDwFaceVerFieldNumber;
#endif  // !_MSC_VER

CMD_GP_CustomFaceDelete::CMD_GP_CustomFaceDelete()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_CustomFaceDelete)
}

void CMD_GP_CustomFaceDelete::InitAsDefaultInstance() {
}

CMD_GP_CustomFaceDelete::CMD_GP_CustomFaceDelete(const CMD_GP_CustomFaceDelete& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_CustomFaceDelete)
}

void CMD_GP_CustomFaceDelete::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_ULONGLONG(0);
  dwfacever_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_CustomFaceDelete::~CMD_GP_CustomFaceDelete() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_CustomFaceDelete)
  SharedDtor();
}

void CMD_GP_CustomFaceDelete::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_CustomFaceDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_CustomFaceDelete& CMD_GP_CustomFaceDelete::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_CustomFaceDelete* CMD_GP_CustomFaceDelete::default_instance_ = NULL;

CMD_GP_CustomFaceDelete* CMD_GP_CustomFaceDelete::New() const {
  return new CMD_GP_CustomFaceDelete;
}

void CMD_GP_CustomFaceDelete::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMD_GP_CustomFaceDelete*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwuserid_, dwfacever_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_CustomFaceDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_CustomFaceDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwFaceVer;
        break;
      }

      // required uint64 dwFaceVer = 2;
      case 2: {
        if (tag == 16) {
         parse_dwFaceVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfacever_)));
          set_has_dwfacever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_CustomFaceDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_CustomFaceDelete)
  return false;
#undef DO_
}

void CMD_GP_CustomFaceDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_CustomFaceDelete)
  // required uint64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwuserid(), output);
  }

  // required uint64 dwFaceVer = 2;
  if (has_dwfacever()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwfacever(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_CustomFaceDelete)
}

int CMD_GP_CustomFaceDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwuserid());
    }

    // required uint64 dwFaceVer = 2;
    if (has_dwfacever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwfacever());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_CustomFaceDelete::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_CustomFaceDelete*>(&from));
}

void CMD_GP_CustomFaceDelete::MergeFrom(const CMD_GP_CustomFaceDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwfacever()) {
      set_dwfacever(from.dwfacever());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_CustomFaceDelete::CopyFrom(const CMD_GP_CustomFaceDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_CustomFaceDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_CustomFaceDelete::Swap(CMD_GP_CustomFaceDelete* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwfacever_, other->dwfacever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_CustomFaceDelete::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_CustomFaceDelete";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ModifyIndividualResult::kSzDescribeMsgFieldNumber;
const int CMD_GP_ModifyIndividualResult::kBOperateSuccessFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ModifyIndividualResult::CMD_GP_ModifyIndividualResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
}

void CMD_GP_ModifyIndividualResult::InitAsDefaultInstance() {
}

CMD_GP_ModifyIndividualResult::CMD_GP_ModifyIndividualResult(const CMD_GP_ModifyIndividualResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
}

void CMD_GP_ModifyIndividualResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szdescribemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boperatesuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ModifyIndividualResult::~CMD_GP_ModifyIndividualResult() {
  // @@protoc_insertion_point(destructor:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
  SharedDtor();
}

void CMD_GP_ModifyIndividualResult::SharedDtor() {
  if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribemsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GP_ModifyIndividualResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GP_ModifyIndividualResult& CMD_GP_ModifyIndividualResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CMD_5fPlaza_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fPlaza_2eproto();
#endif
  return *default_instance_;
}

CMD_GP_ModifyIndividualResult* CMD_GP_ModifyIndividualResult::default_instance_ = NULL;

CMD_GP_ModifyIndividualResult* CMD_GP_ModifyIndividualResult::New() const {
  return new CMD_GP_ModifyIndividualResult;
}

void CMD_GP_ModifyIndividualResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_szdescribemsg()) {
      if (szdescribemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribemsg_->clear();
      }
    }
    boperatesuccess_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMD_GP_ModifyIndividualResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szDescribeMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribemsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bOperateSuccess;
        break;
      }

      // required bool bOperateSuccess = 2;
      case 2: {
        if (tag == 16) {
         parse_bOperateSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boperatesuccess_)));
          set_has_boperatesuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
  return false;
#undef DO_
}

void CMD_GP_ModifyIndividualResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
  // required string szDescribeMsg = 1;
  if (has_szdescribemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szdescribemsg(), output);
  }

  // required bool bOperateSuccess = 2;
  if (has_boperatesuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->boperatesuccess(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:com.game.Protobuf.CMD_GP_ModifyIndividualResult)
}

int CMD_GP_ModifyIndividualResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szDescribeMsg = 1;
    if (has_szdescribemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribemsg());
    }

    // required bool bOperateSuccess = 2;
    if (has_boperatesuccess()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ModifyIndividualResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GP_ModifyIndividualResult*>(&from));
}

void CMD_GP_ModifyIndividualResult::MergeFrom(const CMD_GP_ModifyIndividualResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szdescribemsg()) {
      set_szdescribemsg(from.szdescribemsg());
    }
    if (from.has_boperatesuccess()) {
      set_boperatesuccess(from.boperatesuccess());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMD_GP_ModifyIndividualResult::CopyFrom(const CMD_GP_ModifyIndividualResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ModifyIndividualResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_ModifyIndividualResult::Swap(CMD_GP_ModifyIndividualResult* other) {
  if (other != this) {
    std::swap(szdescribemsg_, other->szdescribemsg_);
    std::swap(boperatesuccess_, other->boperatesuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GP_ModifyIndividualResult::GetTypeName() const {
  return "com.game.Protobuf.CMD_GP_ModifyIndividualResult";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
